{
  "version": 3,
  "sources": ["../../@firebase/firestore/dist/lite/index.browser.esm2017.js"],
  "sourcesContent": ["import { _getProvider, getApp as t, _removeServiceInstance as e, _registerComponent as n, registerVersion as r, SDK_VERSION as s } from \"@firebase/app\";\n\nimport { Component as i } from \"@firebase/component\";\n\nimport { Logger as o, LogLevel as u } from \"@firebase/logger\";\n\nimport { FirebaseError as c, getDefaultEmulatorHostnameAndPort as a, createMockUserToken as h, getModularInstance as l, deepEqual as f } from \"@firebase/util\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Simple wrapper around a nullable UID. Mostly exists to make code more\n * readable.\n */\nclass d {\n    constructor(t) {\n        this.uid = t;\n    }\n    isAuthenticated() {\n        return null != this.uid;\n    }\n    /**\n     * Returns a key representing this user, suitable for inclusion in a\n     * dictionary.\n     */    toKey() {\n        return this.isAuthenticated() ? \"uid:\" + this.uid : \"anonymous-user\";\n    }\n    isEqual(t) {\n        return t.uid === this.uid;\n    }\n}\n\n/** A user with a null UID. */ d.UNAUTHENTICATED = new d(null), \n// TODO(mikelehen): Look into getting a proper uid-equivalent for\n// non-FirebaseAuth providers.\nd.GOOGLE_CREDENTIALS = new d(\"google-credentials-uid\"), d.FIRST_PARTY = new d(\"first-party-uid\"), \nd.MOCK_USER = new d(\"mock-user\");\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nlet w = \"9.18.0\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst m = new o(\"@firebase/firestore\");\n\n/**\n * Sets the verbosity of Cloud Firestore logs (debug, error, or silent).\n *\n * @param logLevel - The verbosity you set for activity and error logging. Can\n *   be any of the following values:\n *\n *   <ul>\n *     <li>`debug` for the most verbose logging level, primarily for\n *     debugging.</li>\n *     <li>`error` to log errors only.</li>\n *     <li><code>`silent` to turn off logging.</li>\n *   </ul>\n */ function p(t) {\n    m.setLogLevel(t);\n}\n\nfunction y(t, ...e) {\n    if (m.logLevel <= u.DEBUG) {\n        const n = e.map(v);\n        m.debug(`Firestore (${w}): ${t}`, ...n);\n    }\n}\n\nfunction g(t, ...e) {\n    if (m.logLevel <= u.ERROR) {\n        const n = e.map(v);\n        m.error(`Firestore (${w}): ${t}`, ...n);\n    }\n}\n\n/**\n * @internal\n */ function _(t, ...e) {\n    if (m.logLevel <= u.WARN) {\n        const n = e.map(v);\n        m.warn(`Firestore (${w}): ${t}`, ...n);\n    }\n}\n\n/**\n * Converts an additional log parameter to a string representation.\n */ function v(t) {\n    if (\"string\" == typeof t) return t;\n    try {\n        return e = t, JSON.stringify(e);\n    } catch (e) {\n        // Converting to JSON failed, just log the object directly\n        return t;\n    }\n    /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /** Formats an object as a JSON string, suitable for logging. */\n    var e;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Unconditionally fails, throwing an Error with the given message.\n * Messages are stripped in production builds.\n *\n * Returns `never` and can be used in expressions:\n * @example\n * let futureVar = fail('not implemented yet');\n */ function b(t = \"Unexpected state\") {\n    // Log the failure in addition to throw an exception, just in case the\n    // exception is swallowed.\n    const e = `FIRESTORE (${w}) INTERNAL ASSERTION FAILED: ` + t;\n    // NOTE: We don't use FirestoreError here because these are internal failures\n    // that cannot be handled by the user. (Also it would create a circular\n    // dependency between the error and assert modules which doesn't work.)\n    throw g(e), new Error(e);\n}\n\n/**\n * Fails if the given assertion condition is false, throwing an Error with the\n * given message if it did.\n *\n * Messages are stripped in production builds.\n */ function E(t, e) {\n    t || b();\n}\n\n/**\n * Casts `obj` to `T`. In non-production builds, verifies that `obj` is an\n * instance of `T` before casting.\n */ function A(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    return t;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const I = \"ok\", T = \"cancelled\", R = \"unknown\", P = \"invalid-argument\", V = \"deadline-exceeded\", $ = \"not-found\", D = \"already-exists\", N = \"permission-denied\", F = \"unauthenticated\", x = \"resource-exhausted\", S = \"failed-precondition\", q = \"aborted\", O = \"out-of-range\", k = \"unimplemented\", C = \"internal\", L = \"unavailable\", M = \"data-loss\";\n\n/** An error returned by a Firestore operation. */ class U extends c {\n    /** @hideconstructor */\n    constructor(\n    /**\n     * The backend error code associated with this error.\n     */\n    t, \n    /**\n     * A custom error description.\n     */\n    e) {\n        super(t, e), this.code = t, this.message = e, \n        // HACK: We write a toString property directly because Error is not a real\n        // class and so inheritance does not work correctly. We could alternatively\n        // do the same \"back-door inheritance\" trick that FirebaseError does.\n        this.toString = () => `${this.name}: [code=${this.code}]: ${this.message}`;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class j {\n    constructor() {\n        this.promise = new Promise(((t, e) => {\n            this.resolve = t, this.reject = e;\n        }));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class B {\n    constructor(t, e) {\n        this.user = e, this.type = \"OAuth\", this.headers = new Map, this.headers.set(\"Authorization\", `Bearer ${t}`);\n    }\n}\n\n/**\n * A CredentialsProvider that always yields an empty token.\n * @internal\n */ class z {\n    getToken() {\n        return Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        // Fire with initial user.\n        t.enqueueRetryable((() => e(d.UNAUTHENTICATED)));\n    }\n    shutdown() {}\n}\n\n/**\n * A CredentialsProvider that always returns a constant token. Used for\n * emulator token mocking.\n */ class Q {\n    constructor(t) {\n        this.token = t, \n        /**\n         * Stores the listener registered with setChangeListener()\n         * This isn't actually necessary since the UID never changes, but we use this\n         * to verify the listen contract is adhered to in tests.\n         */\n        this.changeListener = null;\n    }\n    getToken() {\n        return Promise.resolve(this.token);\n    }\n    invalidateToken() {}\n    start(t, e) {\n        this.changeListener = e, \n        // Fire with initial user.\n        t.enqueueRetryable((() => e(this.token.user)));\n    }\n    shutdown() {\n        this.changeListener = null;\n    }\n}\n\n/** Credential provider for the Lite SDK. */ class W {\n    constructor(t) {\n        this.auth = null, t.onInit((t => {\n            this.auth = t;\n        }));\n    }\n    getToken() {\n        return this.auth ? this.auth.getToken().then((t => t ? (E(\"string\" == typeof t.accessToken), \n        new B(t.accessToken, new d(this.auth.getUid()))) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/*\n * FirstPartyToken provides a fresh token each time its value\n * is requested, because if the token is too old, requests will be rejected.\n * Technically this may no longer be necessary since the SDK should gracefully\n * recover from unauthenticated errors (see b/33147818 for context), but it's\n * safer to keep the implementation as-is.\n */ class G {\n    constructor(t, e, n, r) {\n        this.t = t, this.i = e, this.o = n, this.u = r, this.type = \"FirstParty\", this.user = d.FIRST_PARTY, \n        this.h = new Map;\n    }\n    /** Gets an authorization token, using a provided factory function, or falling back to First Party GAPI. */    l() {\n        return this.u ? this.u() : (\n        // Make sure this really is a Gapi client.\n        E(!(\"object\" != typeof this.t || null === this.t || !this.t.auth || !this.t.auth.getAuthHeaderValueForFirstParty)), \n        this.t.auth.getAuthHeaderValueForFirstParty([]));\n    }\n    get headers() {\n        this.h.set(\"X-Goog-AuthUser\", this.i);\n        // Use array notation to prevent minification\n        const t = this.l();\n        return t && this.h.set(\"Authorization\", t), this.o && this.h.set(\"X-Goog-Iam-Authorization-Token\", this.o), \n        this.h;\n    }\n}\n\n/*\n * Provides user credentials required for the Firestore JavaScript SDK\n * to authenticate the user, using technique that is only available\n * to applications hosted by Google.\n */ class K {\n    constructor(t, e, n, r) {\n        this.t = t, this.i = e, this.o = n, this.u = r;\n    }\n    getToken() {\n        return Promise.resolve(new G(this.t, this.i, this.o, this.u));\n    }\n    start(t, e) {\n        // Fire with initial uid.\n        t.enqueueRetryable((() => e(d.FIRST_PARTY)));\n    }\n    shutdown() {}\n    invalidateToken() {}\n}\n\nclass Y {\n    constructor(t) {\n        this.value = t, this.type = \"AppCheck\", this.headers = new Map, t && t.length > 0 && this.headers.set(\"x-firebase-appcheck\", this.value);\n    }\n}\n\n/** AppCheck token provider for the Lite SDK. */ class H {\n    constructor(t) {\n        this.m = t, this.appCheck = null, t.onInit((t => {\n            this.appCheck = t;\n        }));\n    }\n    getToken() {\n        return this.appCheck ? this.appCheck.getToken().then((t => t ? (E(\"string\" == typeof t.token), \n        new Y(t.token)) : null)) : Promise.resolve(null);\n    }\n    invalidateToken() {}\n    start(t, e) {}\n    shutdown() {}\n}\n\n/**\n * Builds a CredentialsProvider depending on the type of\n * the credentials passed in.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nclass Z {\n    /**\n     * Constructs a DatabaseInfo using the provided host, databaseId and\n     * persistenceKey.\n     *\n     * @param databaseId - The database to use.\n     * @param appId - The Firebase App Id.\n     * @param persistenceKey - A unique identifier for this Firestore's local\n     * storage (used in conjunction with the databaseId).\n     * @param host - The Firestore backend host to connect to.\n     * @param ssl - Whether to use SSL when connecting.\n     * @param forceLongPolling - Whether to use the forceLongPolling option\n     * when using WebChannel as the network transport.\n     * @param autoDetectLongPolling - Whether to use the detectBufferingProxy\n     * option when using WebChannel as the network transport.\n     * @param useFetchStreams Whether to use the Fetch API instead of\n     * XMLHTTPRequest\n     */\n    constructor(t, e, n, r, s, i, o, u) {\n        this.databaseId = t, this.appId = e, this.persistenceKey = n, this.host = r, this.ssl = s, \n        this.forceLongPolling = i, this.autoDetectLongPolling = o, this.useFetchStreams = u;\n    }\n}\n\n/** The default database name for a project. */\n/**\n * Represents the database ID a Firestore client is associated with.\n * @internal\n */\nclass J {\n    constructor(t, e) {\n        this.projectId = t, this.database = e || \"(default)\";\n    }\n    static empty() {\n        return new J(\"\", \"\");\n    }\n    get isDefaultDatabase() {\n        return \"(default)\" === this.database;\n    }\n    isEqual(t) {\n        return t instanceof J && t.projectId === this.projectId && t.database === this.database;\n    }\n}\n\n/**\n * Path represents an ordered sequence of string segments.\n */\nclass X {\n    constructor(t, e, n) {\n        void 0 === e ? e = 0 : e > t.length && b(), void 0 === n ? n = t.length - e : n > t.length - e && b(), \n        this.segments = t, this.offset = e, this.len = n;\n    }\n    get length() {\n        return this.len;\n    }\n    isEqual(t) {\n        return 0 === X.comparator(this, t);\n    }\n    child(t) {\n        const e = this.segments.slice(this.offset, this.limit());\n        return t instanceof X ? t.forEach((t => {\n            e.push(t);\n        })) : e.push(t), this.construct(e);\n    }\n    /** The index of one past the last segment of the path. */    limit() {\n        return this.offset + this.length;\n    }\n    popFirst(t) {\n        return t = void 0 === t ? 1 : t, this.construct(this.segments, this.offset + t, this.length - t);\n    }\n    popLast() {\n        return this.construct(this.segments, this.offset, this.length - 1);\n    }\n    firstSegment() {\n        return this.segments[this.offset];\n    }\n    lastSegment() {\n        return this.get(this.length - 1);\n    }\n    get(t) {\n        return this.segments[this.offset + t];\n    }\n    isEmpty() {\n        return 0 === this.length;\n    }\n    isPrefixOf(t) {\n        if (t.length < this.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    isImmediateParentOf(t) {\n        if (this.length + 1 !== t.length) return !1;\n        for (let e = 0; e < this.length; e++) if (this.get(e) !== t.get(e)) return !1;\n        return !0;\n    }\n    forEach(t) {\n        for (let e = this.offset, n = this.limit(); e < n; e++) t(this.segments[e]);\n    }\n    toArray() {\n        return this.segments.slice(this.offset, this.limit());\n    }\n    static comparator(t, e) {\n        const n = Math.min(t.length, e.length);\n        for (let r = 0; r < n; r++) {\n            const n = t.get(r), s = e.get(r);\n            if (n < s) return -1;\n            if (n > s) return 1;\n        }\n        return t.length < e.length ? -1 : t.length > e.length ? 1 : 0;\n    }\n}\n\n/**\n * A slash-separated path for navigating resources (documents and collections)\n * within Firestore.\n *\n * @internal\n */ class tt extends X {\n    construct(t, e, n) {\n        return new tt(t, e, n);\n    }\n    canonicalString() {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        return this.toArray().join(\"/\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Creates a resource path from the given slash-delimited string. If multiple\n     * arguments are provided, all components are combined. Leading and trailing\n     * slashes from all components are ignored.\n     */    static fromString(...t) {\n        // NOTE: The client is ignorant of any path segments containing escape\n        // sequences (e.g. __id123__) and just passes them through raw (they exist\n        // for legacy reasons and should not be used frequently).\n        const e = [];\n        for (const n of t) {\n            if (n.indexOf(\"//\") >= 0) throw new U(P, `Invalid segment (${n}). Paths must not contain // in them.`);\n            // Strip leading and traling slashed.\n                        e.push(...n.split(\"/\").filter((t => t.length > 0)));\n        }\n        return new tt(e);\n    }\n    static emptyPath() {\n        return new tt([]);\n    }\n}\n\nconst et = /^[_a-zA-Z][_a-zA-Z0-9]*$/;\n\n/**\n * A dot-separated path for navigating sub-objects within a document.\n * @internal\n */ class nt extends X {\n    construct(t, e, n) {\n        return new nt(t, e, n);\n    }\n    /**\n     * Returns true if the string could be used as a segment in a field path\n     * without escaping.\n     */    static isValidIdentifier(t) {\n        return et.test(t);\n    }\n    canonicalString() {\n        return this.toArray().map((t => (t = t.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\"), \n        nt.isValidIdentifier(t) || (t = \"`\" + t + \"`\"), t))).join(\".\");\n    }\n    toString() {\n        return this.canonicalString();\n    }\n    /**\n     * Returns true if this field references the key of a document.\n     */    isKeyField() {\n        return 1 === this.length && \"__name__\" === this.get(0);\n    }\n    /**\n     * The field designating the key of a document.\n     */    static keyField() {\n        return new nt([ \"__name__\" ]);\n    }\n    /**\n     * Parses a field string from the given server-formatted string.\n     *\n     * - Splitting the empty string is not allowed (for now at least).\n     * - Empty segments within the string (e.g. if there are two consecutive\n     *   separators) are not allowed.\n     *\n     * TODO(b/37244157): we should make this more strict. Right now, it allows\n     * non-identifier path components, even if they aren't escaped.\n     */    static fromServerFormat(t) {\n        const e = [];\n        let n = \"\", r = 0;\n        const s = () => {\n            if (0 === n.length) throw new U(P, `Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);\n            e.push(n), n = \"\";\n        };\n        let i = !1;\n        for (;r < t.length; ) {\n            const e = t[r];\n            if (\"\\\\\" === e) {\n                if (r + 1 === t.length) throw new U(P, \"Path has trailing escape character: \" + t);\n                const e = t[r + 1];\n                if (\"\\\\\" !== e && \".\" !== e && \"`\" !== e) throw new U(P, \"Path has invalid escape sequence: \" + t);\n                n += e, r += 2;\n            } else \"`\" === e ? (i = !i, r++) : \".\" !== e || i ? (n += e, r++) : (s(), r++);\n        }\n        if (s(), i) throw new U(P, \"Unterminated ` in path: \" + t);\n        return new nt(e);\n    }\n    static emptyPath() {\n        return new nt([]);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @internal\n */ class rt {\n    constructor(t) {\n        this.path = t;\n    }\n    static fromPath(t) {\n        return new rt(tt.fromString(t));\n    }\n    static fromName(t) {\n        return new rt(tt.fromString(t).popFirst(5));\n    }\n    static empty() {\n        return new rt(tt.emptyPath());\n    }\n    get collectionGroup() {\n        return this.path.popLast().lastSegment();\n    }\n    /** Returns true if the document is in the specified collectionId. */    hasCollectionId(t) {\n        return this.path.length >= 2 && this.path.get(this.path.length - 2) === t;\n    }\n    /** Returns the collection group (i.e. the name of the parent collection) for this key. */    getCollectionGroup() {\n        return this.path.get(this.path.length - 2);\n    }\n    /** Returns the fully qualified path to the parent collection. */    getCollectionPath() {\n        return this.path.popLast();\n    }\n    isEqual(t) {\n        return null !== t && 0 === tt.comparator(this.path, t.path);\n    }\n    toString() {\n        return this.path.toString();\n    }\n    static comparator(t, e) {\n        return tt.comparator(t.path, e.path);\n    }\n    static isDocumentKey(t) {\n        return t.length % 2 == 0;\n    }\n    /**\n     * Creates and returns a new document key with the given segments.\n     *\n     * @param segments - The segments of the path to the document\n     * @returns A new instance of DocumentKey\n     */    static fromSegments(t) {\n        return new rt(new tt(t.slice()));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function st(t, e, n) {\n    if (!n) throw new U(P, `Function ${t}() cannot be called with an empty ${e}.`);\n}\n\n/**\n * Validates that two boolean options are not set at the same time.\n * @internal\n */\n/**\n * Validates that `path` refers to a document (indicated by the fact it contains\n * an even numbers of segments).\n */\nfunction it(t) {\n    if (!rt.isDocumentKey(t)) throw new U(P, `Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Validates that `path` refers to a collection (indicated by the fact it\n * contains an odd numbers of segments).\n */ function ot(t) {\n    if (rt.isDocumentKey(t)) throw new U(P, `Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`);\n}\n\n/**\n * Returns true if it's a non-null object without a custom prototype\n * (i.e. excludes Array, Date, etc.).\n */\n/** Returns a string describing the type / value of the provided input. */\nfunction ut(t) {\n    if (void 0 === t) return \"undefined\";\n    if (null === t) return \"null\";\n    if (\"string\" == typeof t) return t.length > 20 && (t = `${t.substring(0, 20)}...`), \n    JSON.stringify(t);\n    if (\"number\" == typeof t || \"boolean\" == typeof t) return \"\" + t;\n    if (\"object\" == typeof t) {\n        if (t instanceof Array) return \"an array\";\n        {\n            const e = \n            /** try to get the constructor name for an object. */\n            function(t) {\n                if (t.constructor) return t.constructor.name;\n                return null;\n            }\n            /**\n * Casts `obj` to `T`, optionally unwrapping Compat types to expose the\n * underlying instance. Throws if  `obj` is not an instance of `T`.\n *\n * This cast is used in the Lite and Full SDK to verify instance types for\n * arguments passed to the public API.\n * @internal\n */ (t);\n            return e ? `a custom ${e} object` : \"an object\";\n        }\n    }\n    return \"function\" == typeof t ? \"a function\" : b();\n}\n\nfunction ct(t, \n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ne) {\n    if (\"_delegate\" in t && (\n    // Unwrap Compat types\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    t = t._delegate), !(t instanceof e)) {\n        if (e.name === t.constructor.name) throw new U(P, \"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?\");\n        {\n            const n = ut(t);\n            throw new U(P, `Expected type '${e.name}', but it was: ${n}`);\n        }\n    }\n    return t;\n}\n\nfunction at(t, e) {\n    if (e <= 0) throw new U(P, `Function ${t}() requires a positive number, but it was: ${e}.`);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The value returned from the most recent invocation of\n * `generateUniqueDebugId()`, or null if it has never been invoked.\n */ let ht = null;\n\n/**\n * Generates and returns an initial value for `lastUniqueDebugId`.\n *\n * The returned value is randomly selected from a range of integers that are\n * represented as 8 hexadecimal digits. This means that (within reason) any\n * numbers generated by incrementing the returned number by 1 will also be\n * represented by 8 hexadecimal digits. This leads to all \"IDs\" having the same\n * length when converted to a hexadecimal string, making reading logs containing\n * these IDs easier to follow. And since the return value is randomly selected\n * it will help to differentiate between logs from different executions.\n */\n/**\n * Generates and returns a unique ID as a hexadecimal string.\n *\n * The returned ID is intended to be used in debug logging messages to help\n * correlate log messages that may be spatially separated in the logs, but\n * logically related. For example, a network connection could include the same\n * \"debug ID\" string in all of its log messages to help trace a specific\n * connection over time.\n *\n * @return the 10-character generated ID (e.g. \"0xa1b2c3d4\").\n */\nfunction lt() {\n    return null === ht ? ht = 268435456 + Math.round(2147483648 * Math.random()) : ht++, \n    \"0x\" + ht.toString(16);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns whether a variable is either undefined or null.\n */ function ft(t) {\n    return null == t;\n}\n\n/** Returns whether the value represents -0. */ function dt(t) {\n    // Detect if the value is -0.0. Based on polyfill from\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\n    return 0 === t && 1 / t == -1 / 0;\n}\n\n/**\n * Returns whether a value is an integer and in the safe integer range\n * @param value - The value to test for being an integer and in the safe range\n */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst wt = {\n    BatchGetDocuments: \"batchGet\",\n    Commit: \"commit\",\n    RunQuery: \"runQuery\",\n    RunAggregationQuery: \"runAggregationQuery\"\n};\n\n/**\n * Maps RPC names to the corresponding REST endpoint name.\n *\n * We use array notation to avoid mangling.\n */\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Error Codes describing the different ways GRPC can fail. These are copied\n * directly from GRPC's sources here:\n *\n * https://github.com/grpc/grpc/blob/bceec94ea4fc5f0085d81235d8e1c06798dc341a/include/grpc%2B%2B/impl/codegen/status_code_enum.h\n *\n * Important! The names of these identifiers matter because the string forms\n * are used for reverse lookups from the webchannel stream. Do NOT change the\n * names of these identifiers or change this into a const enum.\n */\nvar mt, pt;\n\n/**\n * Converts an HTTP Status Code to the equivalent error code.\n *\n * @param status - An HTTP Status Code, like 200, 404, 503, etc.\n * @returns The equivalent Code. Unknown status codes are mapped to\n *     Code.UNKNOWN.\n */\nfunction yt(t) {\n    if (void 0 === t) return g(\"RPC_ERROR\", \"HTTP error has no status\"), R;\n    // The canonical error codes for Google APIs [1] specify mapping onto HTTP\n    // status codes but the mapping is not bijective. In each case of ambiguity\n    // this function chooses a primary error.\n    \n    // [1]\n    // https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n        switch (t) {\n      case 200:\n        // OK\n        return I;\n\n      case 400:\n        // Bad Request\n        return S;\n\n        // Other possibilities based on the forward mapping\n        // return Code.INVALID_ARGUMENT;\n        // return Code.OUT_OF_RANGE;\n              case 401:\n        // Unauthorized\n        return F;\n\n      case 403:\n        // Forbidden\n        return N;\n\n      case 404:\n        // Not Found\n        return $;\n\n      case 409:\n        // Conflict\n        return q;\n\n        // Other possibilities:\n        // return Code.ALREADY_EXISTS;\n              case 416:\n        // Range Not Satisfiable\n        return O;\n\n      case 429:\n        // Too Many Requests\n        return x;\n\n      case 499:\n        // Client Closed Request\n        return T;\n\n      case 500:\n        // Internal Server Error\n        return R;\n\n        // Other possibilities:\n        // return Code.INTERNAL;\n        // return Code.DATA_LOSS;\n              case 501:\n        // Unimplemented\n        return k;\n\n      case 503:\n        // Service Unavailable\n        return L;\n\n      case 504:\n        // Gateway Timeout\n        return V;\n\n      default:\n        return t >= 200 && t < 300 ? I : t >= 400 && t < 500 ? S : t >= 500 && t < 600 ? C : R;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A Rest-based connection that relies on the native HTTP stack\n * (e.g. `fetch` or a polyfill).\n */ (pt = mt || (mt = {}))[pt.OK = 0] = \"OK\", pt[pt.CANCELLED = 1] = \"CANCELLED\", \npt[pt.UNKNOWN = 2] = \"UNKNOWN\", pt[pt.INVALID_ARGUMENT = 3] = \"INVALID_ARGUMENT\", \npt[pt.DEADLINE_EXCEEDED = 4] = \"DEADLINE_EXCEEDED\", pt[pt.NOT_FOUND = 5] = \"NOT_FOUND\", \npt[pt.ALREADY_EXISTS = 6] = \"ALREADY_EXISTS\", pt[pt.PERMISSION_DENIED = 7] = \"PERMISSION_DENIED\", \npt[pt.UNAUTHENTICATED = 16] = \"UNAUTHENTICATED\", pt[pt.RESOURCE_EXHAUSTED = 8] = \"RESOURCE_EXHAUSTED\", \npt[pt.FAILED_PRECONDITION = 9] = \"FAILED_PRECONDITION\", pt[pt.ABORTED = 10] = \"ABORTED\", \npt[pt.OUT_OF_RANGE = 11] = \"OUT_OF_RANGE\", pt[pt.UNIMPLEMENTED = 12] = \"UNIMPLEMENTED\", \npt[pt.INTERNAL = 13] = \"INTERNAL\", pt[pt.UNAVAILABLE = 14] = \"UNAVAILABLE\", pt[pt.DATA_LOSS = 15] = \"DATA_LOSS\";\n\nclass gt extends \n/**\n * Base class for all Rest-based connections to the backend (WebChannel and\n * HTTP).\n */\nclass {\n    constructor(t) {\n        this.databaseInfo = t, this.databaseId = t.databaseId;\n        const e = t.ssl ? \"https\" : \"http\";\n        this.p = e + \"://\" + t.host, this.g = \"projects/\" + this.databaseId.projectId + \"/databases/\" + this.databaseId.database + \"/documents\";\n    }\n    get v() {\n        // Both `invokeRPC()` and `invokeStreamingRPC()` use their `path` arguments to determine\n        // where to run the query, and expect the `request` to NOT specify the \"path\".\n        return !1;\n    }\n    A(t, e, n, r, s) {\n        const i = lt(), o = this.I(t, e);\n        y(\"RestConnection\", `Sending RPC '${t}' ${i}:`, o, n);\n        const u = {};\n        return this.T(u, r, s), this.R(t, o, u, n).then((e => (y(\"RestConnection\", `Received RPC '${t}' ${i}: `, e), \n        e)), (e => {\n            throw _(\"RestConnection\", `RPC '${t}' ${i} failed with error: `, e, \"url: \", o, \"request:\", n), \n            e;\n        }));\n    }\n    P(t, e, n, r, s, i) {\n        // The REST API automatically aggregates all of the streamed results, so we\n        // can just use the normal invoke() method.\n        return this.A(t, e, n, r, s);\n    }\n    /**\n     * Modifies the headers for a request, adding any authorization token if\n     * present and any additional headers for the request.\n     */    T(t, e, n) {\n        t[\"X-Goog-Api-Client\"] = \"gl-js/ fire/\" + w, \n        // Content-Type: text/plain will avoid preflight requests which might\n        // mess with CORS and redirects by proxies. If we add custom headers\n        // we will need to change this code to potentially use the $httpOverwrite\n        // parameter supported by ESF to avoid triggering preflight requests.\n        t[\"Content-Type\"] = \"text/plain\", this.databaseInfo.appId && (t[\"X-Firebase-GMPID\"] = this.databaseInfo.appId), \n        e && e.headers.forEach(((e, n) => t[n] = e)), n && n.headers.forEach(((e, n) => t[n] = e));\n    }\n    I(t, e) {\n        const n = wt[t];\n        return `${this.p}/v1/${e}:${n}`;\n    }\n} {\n    /**\n     * @param databaseInfo - The connection info.\n     * @param fetchImpl - `fetch` or a Polyfill that implements the fetch API.\n     */\n    constructor(t, e) {\n        super(t), this.V = e;\n    }\n    $(t, e) {\n        throw new Error(\"Not supported by FetchConnection\");\n    }\n    async R(t, e, n, r) {\n        var s;\n        const i = JSON.stringify(r);\n        let o;\n        try {\n            o = await this.V(e, {\n                method: \"POST\",\n                headers: n,\n                body: i\n            });\n        } catch (t) {\n            const e = t;\n            throw new U(yt(e.status), \"Request failed with error: \" + e.statusText);\n        }\n        if (!o.ok) {\n            let t = await o.json();\n            Array.isArray(t) && (t = t[0]);\n            const e = null === (s = null == t ? void 0 : t.error) || void 0 === s ? void 0 : s.message;\n            throw new U(yt(o.status), `Request failed with error: ${null != e ? e : o.statusText}`);\n        }\n        return o.json();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Initializes the HTTP connection for the REST API. */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst _t = /^[_a-zA-Z][_a-zA-Z0-9]*(?:\\.[_a-zA-Z][_a-zA-Z0-9]*)*$/;\n\n/**\n * An alias for aggregation results.\n * @internal\n */ class vt {\n    /**\n     * @internal\n     * @param alias Un-escaped alias representation\n     */\n    constructor(t) {\n        this.alias = t;\n    }\n    /**\n     * Returns true if the string could be used as an alias.\n     */    static D(t) {\n        return _t.test(t);\n    }\n    /**\n     * Return an escaped and quoted string representation of the alias.\n     */    canonicalString() {\n        let t = this.alias.replace(/\\\\/g, \"\\\\\\\\\").replace(/`/g, \"\\\\`\");\n        return vt.D(t) || (t = \"`\" + t + \"`\"), t;\n    }\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Concrete implementation of the Aggregate type.\n */ class bt {\n    constructor(t, e, n) {\n        this.alias = t, this.N = e, this.fieldPath = n;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Generates `nBytes` of random bytes.\n *\n * If `nBytes < 0` , an error will be thrown.\n */ function Et(t) {\n    // Polyfills for IE and WebWorker by using `self` and `msCrypto` when `crypto` is not available.\n    const e = \n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    \"undefined\" != typeof self && (self.crypto || self.msCrypto), n = new Uint8Array(t);\n    if (e && \"function\" == typeof e.getRandomValues) e.getRandomValues(n); else \n    // Falls back to Math.random\n    for (let e = 0; e < t; e++) n[e] = Math.floor(256 * Math.random());\n    return n;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class At {\n    static F() {\n        // Alphanumeric characters\n        const t = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\", e = Math.floor(256 / t.length) * t.length;\n        // The largest byte value that is a multiple of `char.length`.\n                let n = \"\";\n        for (;n.length < 20; ) {\n            const r = Et(40);\n            for (let s = 0; s < r.length; ++s) \n            // Only accept values that are [0, maxMultiple), this ensures they can\n            // be evenly mapped to indices of `chars` via a modulo operation.\n            n.length < 20 && r[s] < e && (n += t.charAt(r[s] % t.length));\n        }\n        return n;\n    }\n}\n\nfunction It(t, e) {\n    return t < e ? -1 : t > e ? 1 : 0;\n}\n\n/** Helper to compare arrays using isEqual(). */ function Tt(t, e, n) {\n    return t.length === e.length && t.every(((t, r) => n(t, e[r])));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function Rt(t) {\n    let e = 0;\n    for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e++;\n    return e;\n}\n\nfunction Pt(t, e) {\n    for (const n in t) Object.prototype.hasOwnProperty.call(t, n) && e(n, t[n]);\n}\n\n/**\n * @license\n * Copyright 2023 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An error encountered while decoding base64 string.\n */\nclass Vt extends Error {\n    constructor() {\n        super(...arguments), this.name = \"Base64DecodeError\";\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Converts a Base64 encoded string to a binary string. */\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Immutable class that represents a \"proto\" byte string.\n *\n * Proto byte strings can either be Base64-encoded strings or Uint8Arrays when\n * sent on the wire. This class abstracts away this differentiation by holding\n * the proto byte string in a common class that must be converted into a string\n * before being sent as a proto.\n * @internal\n */\nclass $t {\n    constructor(t) {\n        this.binaryString = t;\n    }\n    static fromBase64String(t) {\n        const e = function(t) {\n            try {\n                return atob(t);\n            } catch (t) {\n                throw t instanceof DOMException ? new Vt(\"Invalid base64 string: \" + t) : t;\n            }\n        }\n        /** Converts a binary string to a Base64 encoded string. */ (t);\n        return new $t(e);\n    }\n    static fromUint8Array(t) {\n        // TODO(indexing); Remove the copy of the byte string here as this method\n        // is frequently called during indexing.\n        const e = \n        /**\n * Helper function to convert an Uint8array to a binary string.\n */\n        function(t) {\n            let e = \"\";\n            for (let n = 0; n < t.length; ++n) e += String.fromCharCode(t[n]);\n            return e;\n        }\n        /**\n * Helper function to convert a binary string to an Uint8Array.\n */ (t);\n        return new $t(e);\n    }\n    [Symbol.iterator]() {\n        let t = 0;\n        return {\n            next: () => t < this.binaryString.length ? {\n                value: this.binaryString.charCodeAt(t++),\n                done: !1\n            } : {\n                value: void 0,\n                done: !0\n            }\n        };\n    }\n    toBase64() {\n        return t = this.binaryString, btoa(t);\n        var t;\n    }\n    toUint8Array() {\n        return function(t) {\n            const e = new Uint8Array(t.length);\n            for (let n = 0; n < t.length; n++) e[n] = t.charCodeAt(n);\n            return e;\n        }\n        /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n        // A RegExp matching ISO 8601 UTC timestamps with optional fraction.\n        (this.binaryString);\n    }\n    approximateByteSize() {\n        return 2 * this.binaryString.length;\n    }\n    compareTo(t) {\n        return It(this.binaryString, t.binaryString);\n    }\n    isEqual(t) {\n        return this.binaryString === t.binaryString;\n    }\n}\n\n$t.EMPTY_BYTE_STRING = new $t(\"\");\n\nconst Dt = new RegExp(/^\\d{4}-\\d\\d-\\d\\dT\\d\\d:\\d\\d:\\d\\d(?:\\.(\\d+))?Z$/);\n\n/**\n * Converts the possible Proto values for a timestamp value into a \"seconds and\n * nanos\" representation.\n */ function Nt(t) {\n    // The json interface (for the browser) will return an iso timestamp string,\n    // while the proto js library (for node) will return a\n    // google.protobuf.Timestamp instance.\n    if (E(!!t), \"string\" == typeof t) {\n        // The date string can have higher precision (nanos) than the Date class\n        // (millis), so we do some custom parsing here.\n        // Parse the nanos right out of the string.\n        let e = 0;\n        const n = Dt.exec(t);\n        if (E(!!n), n[1]) {\n            // Pad the fraction out to 9 digits (nanos).\n            let t = n[1];\n            t = (t + \"000000000\").substr(0, 9), e = Number(t);\n        }\n        // Parse the date to get the seconds.\n                const r = new Date(t);\n        return {\n            seconds: Math.floor(r.getTime() / 1e3),\n            nanos: e\n        };\n    }\n    return {\n        seconds: Ft(t.seconds),\n        nanos: Ft(t.nanos)\n    };\n}\n\n/**\n * Converts the possible Proto types for numbers into a JavaScript number.\n * Returns 0 if the value is not numeric.\n */ function Ft(t) {\n    // TODO(bjornick): Handle int64 greater than 53 bits.\n    return \"number\" == typeof t ? t : \"string\" == typeof t ? Number(t) : 0;\n}\n\n/** Converts the possible Proto types for Blobs into a ByteString. */ function xt(t) {\n    return \"string\" == typeof t ? $t.fromBase64String(t) : $t.fromUint8Array(t);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// The earliest date supported by Firestore timestamps (0001-01-01T00:00:00Z).\n/**\n * A `Timestamp` represents a point in time independent of any time zone or\n * calendar, represented as seconds and fractions of seconds at nanosecond\n * resolution in UTC Epoch time.\n *\n * It is encoded using the Proleptic Gregorian Calendar which extends the\n * Gregorian calendar backwards to year one. It is encoded assuming all minutes\n * are 60 seconds long, i.e. leap seconds are \"smeared\" so that no leap second\n * table is needed for interpretation. Range is from 0001-01-01T00:00:00Z to\n * 9999-12-31T23:59:59.999999999Z.\n *\n * For examples and further specifications, refer to the\n * {@link https://github.com/google/protobuf/blob/master/src/google/protobuf/timestamp.proto | Timestamp definition}.\n */\nclass St {\n    /**\n     * Creates a new timestamp.\n     *\n     * @param seconds - The number of seconds of UTC time since Unix epoch\n     *     1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to\n     *     9999-12-31T23:59:59Z inclusive.\n     * @param nanoseconds - The non-negative fractions of a second at nanosecond\n     *     resolution. Negative second values with fractions must still have\n     *     non-negative nanoseconds values that count forward in time. Must be\n     *     from 0 to 999,999,999 inclusive.\n     */\n    constructor(\n    /**\n     * The number of seconds of UTC time since Unix epoch 1970-01-01T00:00:00Z.\n     */\n    t, \n    /**\n     * The fractions of a second at nanosecond resolution.*\n     */\n    e) {\n        if (this.seconds = t, this.nanoseconds = e, e < 0) throw new U(P, \"Timestamp nanoseconds out of range: \" + e);\n        if (e >= 1e9) throw new U(P, \"Timestamp nanoseconds out of range: \" + e);\n        if (t < -62135596800) throw new U(P, \"Timestamp seconds out of range: \" + t);\n        // This will break in the year 10,000.\n                if (t >= 253402300800) throw new U(P, \"Timestamp seconds out of range: \" + t);\n    }\n    /**\n     * Creates a new timestamp with the current date, with millisecond precision.\n     *\n     * @returns a new timestamp representing the current date.\n     */    static now() {\n        return St.fromMillis(Date.now());\n    }\n    /**\n     * Creates a new timestamp from the given date.\n     *\n     * @param date - The date to initialize the `Timestamp` from.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     date.\n     */    static fromDate(t) {\n        return St.fromMillis(t.getTime());\n    }\n    /**\n     * Creates a new timestamp from the given number of milliseconds.\n     *\n     * @param milliseconds - Number of milliseconds since Unix epoch\n     *     1970-01-01T00:00:00Z.\n     * @returns A new `Timestamp` representing the same point in time as the given\n     *     number of milliseconds.\n     */    static fromMillis(t) {\n        const e = Math.floor(t / 1e3), n = Math.floor(1e6 * (t - 1e3 * e));\n        return new St(e, n);\n    }\n    /**\n     * Converts a `Timestamp` to a JavaScript `Date` object. This conversion\n     * causes a loss of precision since `Date` objects only support millisecond\n     * precision.\n     *\n     * @returns JavaScript `Date` object representing the same point in time as\n     *     this `Timestamp`, with millisecond precision.\n     */    toDate() {\n        return new Date(this.toMillis());\n    }\n    /**\n     * Converts a `Timestamp` to a numeric timestamp (in milliseconds since\n     * epoch). This operation causes a loss of precision.\n     *\n     * @returns The point in time corresponding to this timestamp, represented as\n     *     the number of milliseconds since Unix epoch 1970-01-01T00:00:00Z.\n     */    toMillis() {\n        return 1e3 * this.seconds + this.nanoseconds / 1e6;\n    }\n    _compareTo(t) {\n        return this.seconds === t.seconds ? It(this.nanoseconds, t.nanoseconds) : It(this.seconds, t.seconds);\n    }\n    /**\n     * Returns true if this `Timestamp` is equal to the provided one.\n     *\n     * @param other - The `Timestamp` to compare against.\n     * @returns true if this `Timestamp` is equal to the provided one.\n     */    isEqual(t) {\n        return t.seconds === this.seconds && t.nanoseconds === this.nanoseconds;\n    }\n    /** Returns a textual representation of this `Timestamp`. */    toString() {\n        return \"Timestamp(seconds=\" + this.seconds + \", nanoseconds=\" + this.nanoseconds + \")\";\n    }\n    /** Returns a JSON-serializable representation of this `Timestamp`. */    toJSON() {\n        return {\n            seconds: this.seconds,\n            nanoseconds: this.nanoseconds\n        };\n    }\n    /**\n     * Converts this object to a primitive string, which allows `Timestamp` objects\n     * to be compared using the `>`, `<=`, `>=` and `>` operators.\n     */    valueOf() {\n        // This method returns a string of the form <seconds>.<nanoseconds> where\n        // <seconds> is translated to have a non-negative value and both <seconds>\n        // and <nanoseconds> are left-padded with zeroes to be a consistent length.\n        // Strings with this format then have a lexiographical ordering that matches\n        // the expected ordering. The <seconds> translation is done to avoid having\n        // a leading negative sign (i.e. a leading '-' character) in its string\n        // representation, which would affect its lexiographical ordering.\n        const t = this.seconds - -62135596800;\n        // Note: Up to 12 decimal digits are required to represent all valid\n        // 'seconds' values.\n                return String(t).padStart(12, \"0\") + \".\" + String(this.nanoseconds).padStart(9, \"0\");\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a locally-applied ServerTimestamp.\n *\n * Server Timestamps are backed by MapValues that contain an internal field\n * `__type__` with a value of `server_timestamp`. The previous value and local\n * write time are stored in its `__previous_value__` and `__local_write_time__`\n * fields respectively.\n *\n * Notes:\n * - ServerTimestampValue instances are created as the result of applying a\n *   transform. They can only exist in the local view of a document. Therefore\n *   they do not need to be parsed or serialized.\n * - When evaluated locally (e.g. for snapshot.data()), they by default\n *   evaluate to `null`. This behavior can be configured by passing custom\n *   FieldValueOptions to value().\n * - With respect to other ServerTimestampValues, they sort by their\n *   localWriteTime.\n */ function qt(t) {\n    var e, n;\n    return \"server_timestamp\" === (null === (n = ((null === (e = null == t ? void 0 : t.mapValue) || void 0 === e ? void 0 : e.fields) || {}).__type__) || void 0 === n ? void 0 : n.stringValue);\n}\n\n/**\n * Returns the value of the field before this ServerTimestamp was set.\n *\n * Preserving the previous values allows the user to display the last resoled\n * value until the backend responds with the timestamp.\n */ function Ot(t) {\n    const e = t.mapValue.fields.__previous_value__;\n    return qt(e) ? Ot(e) : e;\n}\n\n/**\n * Returns the local time at which this timestamp was first set.\n */ function kt(t) {\n    const e = Nt(t.mapValue.fields.__local_write_time__.timestampValue);\n    return new St(e.seconds, e.nanos);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Ct = {\n    fields: {\n        __type__: {\n            stringValue: \"__max__\"\n        }\n    }\n};\n\n/** Extracts the backend's type order for the provided value. */\nfunction Lt(t) {\n    return \"nullValue\" in t ? 0 /* TypeOrder.NullValue */ : \"booleanValue\" in t ? 1 /* TypeOrder.BooleanValue */ : \"integerValue\" in t || \"doubleValue\" in t ? 2 /* TypeOrder.NumberValue */ : \"timestampValue\" in t ? 3 /* TypeOrder.TimestampValue */ : \"stringValue\" in t ? 5 /* TypeOrder.StringValue */ : \"bytesValue\" in t ? 6 /* TypeOrder.BlobValue */ : \"referenceValue\" in t ? 7 /* TypeOrder.RefValue */ : \"geoPointValue\" in t ? 8 /* TypeOrder.GeoPointValue */ : \"arrayValue\" in t ? 9 /* TypeOrder.ArrayValue */ : \"mapValue\" in t ? qt(t) ? 4 /* TypeOrder.ServerTimestampValue */ : \n    /** Returns true if the Value represents the canonical {@link #MAX_VALUE} . */\n    function(t) {\n        return \"__max__\" === (((t.mapValue || {}).fields || {}).__type__ || {}).stringValue;\n    }\n    /**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * Represents a bound of a query.\n *\n * The bound is specified with the given components representing a position and\n * whether it's just before or just after the position (relative to whatever the\n * query order is).\n *\n * The position represents a logical index position for a query. It's a prefix\n * of values for the (potentially implicit) order by clauses of a query.\n *\n * Bound provides a function to determine whether a document comes before or\n * after a bound. This is influenced by whether the position is just before or\n * just after the provided values.\n */ (t) ? 9007199254740991 /* TypeOrder.MaxValue */ : 10 /* TypeOrder.ObjectValue */ : b();\n}\n\n/** Tests `left` and `right` for equality based on the backend semantics. */ function Mt(t, e) {\n    if (t === e) return !0;\n    const n = Lt(t);\n    if (n !== Lt(e)) return !1;\n    switch (n) {\n      case 0 /* TypeOrder.NullValue */ :\n      case 9007199254740991 /* TypeOrder.MaxValue */ :\n        return !0;\n\n      case 1 /* TypeOrder.BooleanValue */ :\n        return t.booleanValue === e.booleanValue;\n\n      case 4 /* TypeOrder.ServerTimestampValue */ :\n        return kt(t).isEqual(kt(e));\n\n      case 3 /* TypeOrder.TimestampValue */ :\n        return function(t, e) {\n            if (\"string\" == typeof t.timestampValue && \"string\" == typeof e.timestampValue && t.timestampValue.length === e.timestampValue.length) \n            // Use string equality for ISO 8601 timestamps\n            return t.timestampValue === e.timestampValue;\n            const n = Nt(t.timestampValue), r = Nt(e.timestampValue);\n            return n.seconds === r.seconds && n.nanos === r.nanos;\n        }(t, e);\n\n      case 5 /* TypeOrder.StringValue */ :\n        return t.stringValue === e.stringValue;\n\n      case 6 /* TypeOrder.BlobValue */ :\n        return function(t, e) {\n            return xt(t.bytesValue).isEqual(xt(e.bytesValue));\n        }(t, e);\n\n      case 7 /* TypeOrder.RefValue */ :\n        return t.referenceValue === e.referenceValue;\n\n      case 8 /* TypeOrder.GeoPointValue */ :\n        return function(t, e) {\n            return Ft(t.geoPointValue.latitude) === Ft(e.geoPointValue.latitude) && Ft(t.geoPointValue.longitude) === Ft(e.geoPointValue.longitude);\n        }(t, e);\n\n      case 2 /* TypeOrder.NumberValue */ :\n        return function(t, e) {\n            if (\"integerValue\" in t && \"integerValue\" in e) return Ft(t.integerValue) === Ft(e.integerValue);\n            if (\"doubleValue\" in t && \"doubleValue\" in e) {\n                const n = Ft(t.doubleValue), r = Ft(e.doubleValue);\n                return n === r ? dt(n) === dt(r) : isNaN(n) && isNaN(r);\n            }\n            return !1;\n        }(t, e);\n\n      case 9 /* TypeOrder.ArrayValue */ :\n        return Tt(t.arrayValue.values || [], e.arrayValue.values || [], Mt);\n\n      case 10 /* TypeOrder.ObjectValue */ :\n        return function(t, e) {\n            const n = t.mapValue.fields || {}, r = e.mapValue.fields || {};\n            if (Rt(n) !== Rt(r)) return !1;\n            for (const t in n) if (n.hasOwnProperty(t) && (void 0 === r[t] || !Mt(n[t], r[t]))) return !1;\n            return !0;\n        }\n        /** Returns true if the ArrayValue contains the specified element. */ (t, e);\n\n      default:\n        return b();\n    }\n}\n\nfunction Ut(t, e) {\n    return void 0 !== (t.values || []).find((t => Mt(t, e)));\n}\n\nfunction jt(t, e) {\n    if (t === e) return 0;\n    const n = Lt(t), r = Lt(e);\n    if (n !== r) return It(n, r);\n    switch (n) {\n      case 0 /* TypeOrder.NullValue */ :\n      case 9007199254740991 /* TypeOrder.MaxValue */ :\n        return 0;\n\n      case 1 /* TypeOrder.BooleanValue */ :\n        return It(t.booleanValue, e.booleanValue);\n\n      case 2 /* TypeOrder.NumberValue */ :\n        return function(t, e) {\n            const n = Ft(t.integerValue || t.doubleValue), r = Ft(e.integerValue || e.doubleValue);\n            return n < r ? -1 : n > r ? 1 : n === r ? 0 : \n            // one or both are NaN.\n            isNaN(n) ? isNaN(r) ? 0 : -1 : 1;\n        }(t, e);\n\n      case 3 /* TypeOrder.TimestampValue */ :\n        return Bt(t.timestampValue, e.timestampValue);\n\n      case 4 /* TypeOrder.ServerTimestampValue */ :\n        return Bt(kt(t), kt(e));\n\n      case 5 /* TypeOrder.StringValue */ :\n        return It(t.stringValue, e.stringValue);\n\n      case 6 /* TypeOrder.BlobValue */ :\n        return function(t, e) {\n            const n = xt(t), r = xt(e);\n            return n.compareTo(r);\n        }(t.bytesValue, e.bytesValue);\n\n      case 7 /* TypeOrder.RefValue */ :\n        return function(t, e) {\n            const n = t.split(\"/\"), r = e.split(\"/\");\n            for (let t = 0; t < n.length && t < r.length; t++) {\n                const e = It(n[t], r[t]);\n                if (0 !== e) return e;\n            }\n            return It(n.length, r.length);\n        }(t.referenceValue, e.referenceValue);\n\n      case 8 /* TypeOrder.GeoPointValue */ :\n        return function(t, e) {\n            const n = It(Ft(t.latitude), Ft(e.latitude));\n            if (0 !== n) return n;\n            return It(Ft(t.longitude), Ft(e.longitude));\n        }(t.geoPointValue, e.geoPointValue);\n\n      case 9 /* TypeOrder.ArrayValue */ :\n        return function(t, e) {\n            const n = t.values || [], r = e.values || [];\n            for (let t = 0; t < n.length && t < r.length; ++t) {\n                const e = jt(n[t], r[t]);\n                if (e) return e;\n            }\n            return It(n.length, r.length);\n        }(t.arrayValue, e.arrayValue);\n\n      case 10 /* TypeOrder.ObjectValue */ :\n        return function(t, e) {\n            if (t === Ct && e === Ct) return 0;\n            if (t === Ct) return 1;\n            if (e === Ct) return -1;\n            const n = t.fields || {}, r = Object.keys(n), s = e.fields || {}, i = Object.keys(s);\n            // Even though MapValues are likely sorted correctly based on their insertion\n            // order (e.g. when received from the backend), local modifications can bring\n            // elements out of order. We need to re-sort the elements to ensure that\n            // canonical IDs are independent of insertion order.\n            r.sort(), i.sort();\n            for (let t = 0; t < r.length && t < i.length; ++t) {\n                const e = It(r[t], i[t]);\n                if (0 !== e) return e;\n                const o = jt(n[r[t]], s[i[t]]);\n                if (0 !== o) return o;\n            }\n            return It(r.length, i.length);\n        }\n        /** Returns a reference value for the provided database and key. */ (t.mapValue, e.mapValue);\n\n      default:\n        throw b();\n    }\n}\n\nfunction Bt(t, e) {\n    if (\"string\" == typeof t && \"string\" == typeof e && t.length === e.length) return It(t, e);\n    const n = Nt(t), r = Nt(e), s = It(n.seconds, r.seconds);\n    return 0 !== s ? s : It(n.nanos, r.nanos);\n}\n\nfunction zt(t, e) {\n    return {\n        referenceValue: `projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`\n    };\n}\n\n/** Returns true if `value` is an ArrayValue. */ function Qt(t) {\n    return !!t && \"arrayValue\" in t;\n}\n\n/** Returns true if `value` is a NullValue. */ function Wt(t) {\n    return !!t && \"nullValue\" in t;\n}\n\n/** Returns true if `value` is NaN. */ function Gt(t) {\n    return !!t && \"doubleValue\" in t && isNaN(Number(t.doubleValue));\n}\n\n/** Returns true if `value` is a MapValue. */ function Kt(t) {\n    return !!t && \"mapValue\" in t;\n}\n\n/** Creates a deep copy of `source`. */ function Yt(t) {\n    if (t.geoPointValue) return {\n        geoPointValue: Object.assign({}, t.geoPointValue)\n    };\n    if (t.timestampValue && \"object\" == typeof t.timestampValue) return {\n        timestampValue: Object.assign({}, t.timestampValue)\n    };\n    if (t.mapValue) {\n        const e = {\n            mapValue: {\n                fields: {}\n            }\n        };\n        return Pt(t.mapValue.fields, ((t, n) => e.mapValue.fields[t] = Yt(n))), e;\n    }\n    if (t.arrayValue) {\n        const e = {\n            arrayValue: {\n                values: []\n            }\n        };\n        for (let n = 0; n < (t.arrayValue.values || []).length; ++n) e.arrayValue.values[n] = Yt(t.arrayValue.values[n]);\n        return e;\n    }\n    return Object.assign({}, t);\n}\n\nclass Ht {\n    constructor(t, e) {\n        this.position = t, this.inclusive = e;\n    }\n}\n\nfunction Zt(t, e) {\n    if (null === t) return null === e;\n    if (null === e) return !1;\n    if (t.inclusive !== e.inclusive || t.position.length !== e.position.length) return !1;\n    for (let n = 0; n < t.position.length; n++) {\n        if (!Mt(t.position[n], e.position[n])) return !1;\n    }\n    return !0;\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class Jt {}\n\nclass Xt extends Jt {\n    constructor(t, e, n) {\n        super(), this.field = t, this.op = e, this.value = n;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e, n) {\n        return t.isKeyField() ? \"in\" /* Operator.IN */ === e || \"not-in\" /* Operator.NOT_IN */ === e ? this.createKeyFieldInFilter(t, e, n) : new ne(t, e, n) : \"array-contains\" /* Operator.ARRAY_CONTAINS */ === e ? new oe(t, n) : \"in\" /* Operator.IN */ === e ? new ue(t, n) : \"not-in\" /* Operator.NOT_IN */ === e ? new ce(t, n) : \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === e ? new ae(t, n) : new Xt(t, e, n);\n    }\n    static createKeyFieldInFilter(t, e, n) {\n        return \"in\" /* Operator.IN */ === e ? new re(t, n) : new se(t, n);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        // Types do not have to match in NOT_EQUAL filters.\n                return \"!=\" /* Operator.NOT_EQUAL */ === this.op ? null !== e && this.matchesComparison(jt(e, this.value)) : null !== e && Lt(this.value) === Lt(e) && this.matchesComparison(jt(e, this.value));\n        // Only compare types with matching backend order (such as double and int).\n        }\n    matchesComparison(t) {\n        switch (this.op) {\n          case \"<\" /* Operator.LESS_THAN */ :\n            return t < 0;\n\n          case \"<=\" /* Operator.LESS_THAN_OR_EQUAL */ :\n            return t <= 0;\n\n          case \"==\" /* Operator.EQUAL */ :\n            return 0 === t;\n\n          case \"!=\" /* Operator.NOT_EQUAL */ :\n            return 0 !== t;\n\n          case \">\" /* Operator.GREATER_THAN */ :\n            return t > 0;\n\n          case \">=\" /* Operator.GREATER_THAN_OR_EQUAL */ :\n            return t >= 0;\n\n          default:\n            return b();\n        }\n    }\n    isInequality() {\n        return [ \"<\" /* Operator.LESS_THAN */ , \"<=\" /* Operator.LESS_THAN_OR_EQUAL */ , \">\" /* Operator.GREATER_THAN */ , \">=\" /* Operator.GREATER_THAN_OR_EQUAL */ , \"!=\" /* Operator.NOT_EQUAL */ , \"not-in\" /* Operator.NOT_IN */ ].indexOf(this.op) >= 0;\n    }\n    getFlattenedFilters() {\n        return [ this ];\n    }\n    getFilters() {\n        return [ this ];\n    }\n    getFirstInequalityField() {\n        return this.isInequality() ? this.field : null;\n    }\n}\n\nclass te extends Jt {\n    constructor(t, e) {\n        super(), this.filters = t, this.op = e, this.S = null;\n    }\n    /**\n     * Creates a filter based on the provided arguments.\n     */    static create(t, e) {\n        return new te(t, e);\n    }\n    matches(t) {\n        return \"and\" /* CompositeOperator.AND */ === this.op ? void 0 === this.filters.find((e => !e.matches(t))) : void 0 !== this.filters.find((e => e.matches(t)));\n    }\n    getFlattenedFilters() {\n        return null !== this.S || (this.S = this.filters.reduce(((t, e) => t.concat(e.getFlattenedFilters())), [])), \n        this.S;\n    }\n    // Returns a mutable copy of `this.filters`\n    getFilters() {\n        return Object.assign([], this.filters);\n    }\n    getFirstInequalityField() {\n        const t = this.q((t => t.isInequality()));\n        return null !== t ? t.field : null;\n    }\n    // Performs a depth-first search to find and return the first FieldFilter in the composite filter\n    // that satisfies the predicate. Returns `null` if none of the FieldFilters satisfy the\n    // predicate.\n    q(t) {\n        for (const e of this.getFlattenedFilters()) if (t(e)) return e;\n        return null;\n    }\n}\n\nfunction ee(t, e) {\n    return t instanceof Xt ? function(t, e) {\n        return e instanceof Xt && t.op === e.op && t.field.isEqual(e.field) && Mt(t.value, e.value);\n    }(t, e) : t instanceof te ? function(t, e) {\n        if (e instanceof te && t.op === e.op && t.filters.length === e.filters.length) {\n            return t.filters.reduce(((t, n, r) => t && ee(n, e.filters[r])), !0);\n        }\n        return !1;\n    }\n    /** Filter that matches on key fields (i.e. '__name__'). */ (t, e) : void b();\n}\n\nclass ne extends Xt {\n    constructor(t, e, n) {\n        super(t, e, n), this.key = rt.fromName(n.referenceValue);\n    }\n    matches(t) {\n        const e = rt.comparator(t.key, this.key);\n        return this.matchesComparison(e);\n    }\n}\n\n/** Filter that matches on key fields within an array. */ class re extends Xt {\n    constructor(t, e) {\n        super(t, \"in\" /* Operator.IN */ , e), this.keys = ie(\"in\" /* Operator.IN */ , e);\n    }\n    matches(t) {\n        return this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\n/** Filter that matches on key fields not present within an array. */ class se extends Xt {\n    constructor(t, e) {\n        super(t, \"not-in\" /* Operator.NOT_IN */ , e), this.keys = ie(\"not-in\" /* Operator.NOT_IN */ , e);\n    }\n    matches(t) {\n        return !this.keys.some((e => e.isEqual(t.key)));\n    }\n}\n\nfunction ie(t, e) {\n    var n;\n    return ((null === (n = e.arrayValue) || void 0 === n ? void 0 : n.values) || []).map((t => rt.fromName(t.referenceValue)));\n}\n\n/** A Filter that implements the array-contains operator. */ class oe extends Xt {\n    constructor(t, e) {\n        super(t, \"array-contains\" /* Operator.ARRAY_CONTAINS */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return Qt(e) && Ut(e.arrayValue, this.value);\n    }\n}\n\n/** A Filter that implements the IN operator. */ class ue extends Xt {\n    constructor(t, e) {\n        super(t, \"in\" /* Operator.IN */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return null !== e && Ut(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the not-in operator. */ class ce extends Xt {\n    constructor(t, e) {\n        super(t, \"not-in\" /* Operator.NOT_IN */ , e);\n    }\n    matches(t) {\n        if (Ut(this.value.arrayValue, {\n            nullValue: \"NULL_VALUE\"\n        })) return !1;\n        const e = t.data.field(this.field);\n        return null !== e && !Ut(this.value.arrayValue, e);\n    }\n}\n\n/** A Filter that implements the array-contains-any operator. */ class ae extends Xt {\n    constructor(t, e) {\n        super(t, \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ , e);\n    }\n    matches(t) {\n        const e = t.data.field(this.field);\n        return !(!Qt(e) || !e.arrayValue.values) && e.arrayValue.values.some((t => Ut(this.value.arrayValue, t)));\n    }\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ordering on a field, in some Direction. Direction defaults to ASCENDING.\n */ class he {\n    constructor(t, e = \"asc\" /* Direction.ASCENDING */) {\n        this.field = t, this.dir = e;\n    }\n}\n\nfunction le(t, e) {\n    return t.dir === e.dir && t.field.isEqual(e.field);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A version of a document in Firestore. This corresponds to the version\n * timestamp, such as update_time or read_time.\n */ class fe {\n    constructor(t) {\n        this.timestamp = t;\n    }\n    static fromTimestamp(t) {\n        return new fe(t);\n    }\n    static min() {\n        return new fe(new St(0, 0));\n    }\n    static max() {\n        return new fe(new St(253402300799, 999999999));\n    }\n    compareTo(t) {\n        return this.timestamp._compareTo(t.timestamp);\n    }\n    isEqual(t) {\n        return this.timestamp.isEqual(t.timestamp);\n    }\n    /** Returns a number representation of the version for use in spec tests. */    toMicroseconds() {\n        // Convert to microseconds.\n        return 1e6 * this.timestamp.seconds + this.timestamp.nanoseconds / 1e3;\n    }\n    toString() {\n        return \"SnapshotVersion(\" + this.timestamp.toString() + \")\";\n    }\n    toTimestamp() {\n        return this.timestamp;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// An immutable sorted map implementation, based on a Left-leaning Red-Black\n// tree.\nclass de {\n    constructor(t, e) {\n        this.comparator = t, this.root = e || me.EMPTY;\n    }\n    // Returns a copy of the map, with the specified key/value added or replaced.\n    insert(t, e) {\n        return new de(this.comparator, this.root.insert(t, e, this.comparator).copy(null, null, me.BLACK, null, null));\n    }\n    // Returns a copy of the map, with the specified key removed.\n    remove(t) {\n        return new de(this.comparator, this.root.remove(t, this.comparator).copy(null, null, me.BLACK, null, null));\n    }\n    // Returns the value of the node with the given key, or null.\n    get(t) {\n        let e = this.root;\n        for (;!e.isEmpty(); ) {\n            const n = this.comparator(t, e.key);\n            if (0 === n) return e.value;\n            n < 0 ? e = e.left : n > 0 && (e = e.right);\n        }\n        return null;\n    }\n    // Returns the index of the element in this sorted map, or -1 if it doesn't\n    // exist.\n    indexOf(t) {\n        // Number of nodes that were pruned when descending right\n        let e = 0, n = this.root;\n        for (;!n.isEmpty(); ) {\n            const r = this.comparator(t, n.key);\n            if (0 === r) return e + n.left.size;\n            r < 0 ? n = n.left : (\n            // Count all nodes left of the node plus the node itself\n            e += n.left.size + 1, n = n.right);\n        }\n        // Node not found\n                return -1;\n    }\n    isEmpty() {\n        return this.root.isEmpty();\n    }\n    // Returns the total number of nodes in the map.\n    get size() {\n        return this.root.size;\n    }\n    // Returns the minimum key in the map.\n    minKey() {\n        return this.root.minKey();\n    }\n    // Returns the maximum key in the map.\n    maxKey() {\n        return this.root.maxKey();\n    }\n    // Traverses the map in key order and calls the specified action function\n    // for each key/value pair. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.root.inorderTraversal(t);\n    }\n    forEach(t) {\n        this.inorderTraversal(((e, n) => (t(e, n), !1)));\n    }\n    toString() {\n        const t = [];\n        return this.inorderTraversal(((e, n) => (t.push(`${e}:${n}`), !1))), `{${t.join(\", \")}}`;\n    }\n    // Traverses the map in reverse key order and calls the specified action\n    // function for each key/value pair. If action returns true, traversal is\n    // aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.root.reverseTraversal(t);\n    }\n    // Returns an iterator over the SortedMap.\n    getIterator() {\n        return new we(this.root, null, this.comparator, !1);\n    }\n    getIteratorFrom(t) {\n        return new we(this.root, t, this.comparator, !1);\n    }\n    getReverseIterator() {\n        return new we(this.root, null, this.comparator, !0);\n    }\n    getReverseIteratorFrom(t) {\n        return new we(this.root, t, this.comparator, !0);\n    }\n}\n\n // end SortedMap\n// An iterator over an LLRBNode.\nclass we {\n    constructor(t, e, n, r) {\n        this.isReverse = r, this.nodeStack = [];\n        let s = 1;\n        for (;!t.isEmpty(); ) if (s = e ? n(t.key, e) : 1, \n        // flip the comparison if we're going in reverse\n        e && r && (s *= -1), s < 0) \n        // This node is less than our start key. ignore it\n        t = this.isReverse ? t.left : t.right; else {\n            if (0 === s) {\n                // This node is exactly equal to our start key. Push it on the stack,\n                // but stop iterating;\n                this.nodeStack.push(t);\n                break;\n            }\n            // This node is greater than our start key, add it to the stack and move\n            // to the next one\n            this.nodeStack.push(t), t = this.isReverse ? t.right : t.left;\n        }\n    }\n    getNext() {\n        let t = this.nodeStack.pop();\n        const e = {\n            key: t.key,\n            value: t.value\n        };\n        if (this.isReverse) for (t = t.left; !t.isEmpty(); ) this.nodeStack.push(t), t = t.right; else for (t = t.right; !t.isEmpty(); ) this.nodeStack.push(t), \n        t = t.left;\n        return e;\n    }\n    hasNext() {\n        return this.nodeStack.length > 0;\n    }\n    peek() {\n        if (0 === this.nodeStack.length) return null;\n        const t = this.nodeStack[this.nodeStack.length - 1];\n        return {\n            key: t.key,\n            value: t.value\n        };\n    }\n}\n\n // end SortedMapIterator\n// Represents a node in a Left-leaning Red-Black tree.\nclass me {\n    constructor(t, e, n, r, s) {\n        this.key = t, this.value = e, this.color = null != n ? n : me.RED, this.left = null != r ? r : me.EMPTY, \n        this.right = null != s ? s : me.EMPTY, this.size = this.left.size + 1 + this.right.size;\n    }\n    // Returns a copy of the current node, optionally replacing pieces of it.\n    copy(t, e, n, r, s) {\n        return new me(null != t ? t : this.key, null != e ? e : this.value, null != n ? n : this.color, null != r ? r : this.left, null != s ? s : this.right);\n    }\n    isEmpty() {\n        return !1;\n    }\n    // Traverses the tree in key order and calls the specified action function\n    // for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    inorderTraversal(t) {\n        return this.left.inorderTraversal(t) || t(this.key, this.value) || this.right.inorderTraversal(t);\n    }\n    // Traverses the tree in reverse key order and calls the specified action\n    // function for each node. If action returns true, traversal is aborted.\n    // Returns the first truthy value returned by action, or the last falsey\n    // value returned by action.\n    reverseTraversal(t) {\n        return this.right.reverseTraversal(t) || t(this.key, this.value) || this.left.reverseTraversal(t);\n    }\n    // Returns the minimum node in the tree.\n    min() {\n        return this.left.isEmpty() ? this : this.left.min();\n    }\n    // Returns the maximum key in the tree.\n    minKey() {\n        return this.min().key;\n    }\n    // Returns the maximum key in the tree.\n    maxKey() {\n        return this.right.isEmpty() ? this.key : this.right.maxKey();\n    }\n    // Returns new tree, with the key/value added.\n    insert(t, e, n) {\n        let r = this;\n        const s = n(t, r.key);\n        return r = s < 0 ? r.copy(null, null, null, r.left.insert(t, e, n), null) : 0 === s ? r.copy(null, e, null, null, null) : r.copy(null, null, null, null, r.right.insert(t, e, n)), \n        r.fixUp();\n    }\n    removeMin() {\n        if (this.left.isEmpty()) return me.EMPTY;\n        let t = this;\n        return t.left.isRed() || t.left.left.isRed() || (t = t.moveRedLeft()), t = t.copy(null, null, null, t.left.removeMin(), null), \n        t.fixUp();\n    }\n    // Returns new tree, with the specified item removed.\n    remove(t, e) {\n        let n, r = this;\n        if (e(t, r.key) < 0) r.left.isEmpty() || r.left.isRed() || r.left.left.isRed() || (r = r.moveRedLeft()), \n        r = r.copy(null, null, null, r.left.remove(t, e), null); else {\n            if (r.left.isRed() && (r = r.rotateRight()), r.right.isEmpty() || r.right.isRed() || r.right.left.isRed() || (r = r.moveRedRight()), \n            0 === e(t, r.key)) {\n                if (r.right.isEmpty()) return me.EMPTY;\n                n = r.right.min(), r = r.copy(n.key, n.value, null, null, r.right.removeMin());\n            }\n            r = r.copy(null, null, null, null, r.right.remove(t, e));\n        }\n        return r.fixUp();\n    }\n    isRed() {\n        return this.color;\n    }\n    // Returns new tree after performing any needed rotations.\n    fixUp() {\n        let t = this;\n        return t.right.isRed() && !t.left.isRed() && (t = t.rotateLeft()), t.left.isRed() && t.left.left.isRed() && (t = t.rotateRight()), \n        t.left.isRed() && t.right.isRed() && (t = t.colorFlip()), t;\n    }\n    moveRedLeft() {\n        let t = this.colorFlip();\n        return t.right.left.isRed() && (t = t.copy(null, null, null, null, t.right.rotateRight()), \n        t = t.rotateLeft(), t = t.colorFlip()), t;\n    }\n    moveRedRight() {\n        let t = this.colorFlip();\n        return t.left.left.isRed() && (t = t.rotateRight(), t = t.colorFlip()), t;\n    }\n    rotateLeft() {\n        const t = this.copy(null, null, me.RED, null, this.right.left);\n        return this.right.copy(null, null, this.color, t, null);\n    }\n    rotateRight() {\n        const t = this.copy(null, null, me.RED, this.left.right, null);\n        return this.left.copy(null, null, this.color, null, t);\n    }\n    colorFlip() {\n        const t = this.left.copy(null, null, !this.left.color, null, null), e = this.right.copy(null, null, !this.right.color, null, null);\n        return this.copy(null, null, !this.color, t, e);\n    }\n    // For testing.\n    checkMaxDepth() {\n        const t = this.check();\n        return Math.pow(2, t) <= this.size + 1;\n    }\n    // In a balanced RB tree, the black-depth (number of black nodes) from root to\n    // leaves is equal on both sides.  This function verifies that or asserts.\n    check() {\n        if (this.isRed() && this.left.isRed()) throw b();\n        if (this.right.isRed()) throw b();\n        const t = this.left.check();\n        if (t !== this.right.check()) throw b();\n        return t + (this.isRed() ? 0 : 1);\n    }\n}\n\n // end LLRBNode\n// Empty node is shared between all LLRB trees.\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nme.EMPTY = null, me.RED = !0, me.BLACK = !1;\n\n// end LLRBEmptyNode\nme.EMPTY = new \n// Represents an empty node (a leaf node in the Red-Black Tree).\nclass {\n    constructor() {\n        this.size = 0;\n    }\n    get key() {\n        throw b();\n    }\n    get value() {\n        throw b();\n    }\n    get color() {\n        throw b();\n    }\n    get left() {\n        throw b();\n    }\n    get right() {\n        throw b();\n    }\n    // Returns a copy of the current node.\n    copy(t, e, n, r, s) {\n        return this;\n    }\n    // Returns a copy of the tree, with the specified key/value added.\n    insert(t, e, n) {\n        return new me(t, e);\n    }\n    // Returns a copy of the tree, with the specified key removed.\n    remove(t, e) {\n        return this;\n    }\n    isEmpty() {\n        return !0;\n    }\n    inorderTraversal(t) {\n        return !1;\n    }\n    reverseTraversal(t) {\n        return !1;\n    }\n    minKey() {\n        return null;\n    }\n    maxKey() {\n        return null;\n    }\n    isRed() {\n        return !1;\n    }\n    // For testing.\n    checkMaxDepth() {\n        return !0;\n    }\n    check() {\n        return 0;\n    }\n};\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * SortedSet is an immutable (copy-on-write) collection that holds elements\n * in order specified by the provided comparator.\n *\n * NOTE: if provided comparator returns 0 for two elements, we consider them to\n * be equal!\n */\nclass pe {\n    constructor(t) {\n        this.comparator = t, this.data = new de(this.comparator);\n    }\n    has(t) {\n        return null !== this.data.get(t);\n    }\n    first() {\n        return this.data.minKey();\n    }\n    last() {\n        return this.data.maxKey();\n    }\n    get size() {\n        return this.data.size;\n    }\n    indexOf(t) {\n        return this.data.indexOf(t);\n    }\n    /** Iterates elements in order defined by \"comparator\" */    forEach(t) {\n        this.data.inorderTraversal(((e, n) => (t(e), !1)));\n    }\n    /** Iterates over `elem`s such that: range[0] &lt;= elem &lt; range[1]. */    forEachInRange(t, e) {\n        const n = this.data.getIteratorFrom(t[0]);\n        for (;n.hasNext(); ) {\n            const r = n.getNext();\n            if (this.comparator(r.key, t[1]) >= 0) return;\n            e(r.key);\n        }\n    }\n    /**\n     * Iterates over `elem`s such that: start &lt;= elem until false is returned.\n     */    forEachWhile(t, e) {\n        let n;\n        for (n = void 0 !== e ? this.data.getIteratorFrom(e) : this.data.getIterator(); n.hasNext(); ) {\n            if (!t(n.getNext().key)) return;\n        }\n    }\n    /** Finds the least element greater than or equal to `elem`. */    firstAfterOrEqual(t) {\n        const e = this.data.getIteratorFrom(t);\n        return e.hasNext() ? e.getNext().key : null;\n    }\n    getIterator() {\n        return new ye(this.data.getIterator());\n    }\n    getIteratorFrom(t) {\n        return new ye(this.data.getIteratorFrom(t));\n    }\n    /** Inserts or updates an element */    add(t) {\n        return this.copy(this.data.remove(t).insert(t, !0));\n    }\n    /** Deletes an element */    delete(t) {\n        return this.has(t) ? this.copy(this.data.remove(t)) : this;\n    }\n    isEmpty() {\n        return this.data.isEmpty();\n    }\n    unionWith(t) {\n        let e = this;\n        // Make sure `result` always refers to the larger one of the two sets.\n                return e.size < t.size && (e = t, t = this), t.forEach((t => {\n            e = e.add(t);\n        })), e;\n    }\n    isEqual(t) {\n        if (!(t instanceof pe)) return !1;\n        if (this.size !== t.size) return !1;\n        const e = this.data.getIterator(), n = t.data.getIterator();\n        for (;e.hasNext(); ) {\n            const t = e.getNext().key, r = n.getNext().key;\n            if (0 !== this.comparator(t, r)) return !1;\n        }\n        return !0;\n    }\n    toArray() {\n        const t = [];\n        return this.forEach((e => {\n            t.push(e);\n        })), t;\n    }\n    toString() {\n        const t = [];\n        return this.forEach((e => t.push(e))), \"SortedSet(\" + t.toString() + \")\";\n    }\n    copy(t) {\n        const e = new pe(this.comparator);\n        return e.data = t, e;\n    }\n}\n\nclass ye {\n    constructor(t) {\n        this.iter = t;\n    }\n    getNext() {\n        return this.iter.getNext().key;\n    }\n    hasNext() {\n        return this.iter.hasNext();\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Provides a set of fields that can be used to partially patch a document.\n * FieldMask is used in conjunction with ObjectValue.\n * Examples:\n *   foo - Overwrites foo entirely with the provided value. If foo is not\n *         present in the companion ObjectValue, the field is deleted.\n *   foo.bar - Overwrites only the field bar of the object foo.\n *             If foo is not an object, foo is replaced with an object\n *             containing foo\n */ class ge {\n    constructor(t) {\n        this.fields = t, \n        // TODO(dimond): validation of FieldMask\n        // Sort the field mask to support `FieldMask.isEqual()` and assert below.\n        t.sort(nt.comparator);\n    }\n    static empty() {\n        return new ge([]);\n    }\n    /**\n     * Returns a new FieldMask object that is the result of adding all the given\n     * fields paths to this field mask.\n     */    unionWith(t) {\n        let e = new pe(nt.comparator);\n        for (const t of this.fields) e = e.add(t);\n        for (const n of t) e = e.add(n);\n        return new ge(e.toArray());\n    }\n    /**\n     * Verifies that `fieldPath` is included by at least one field in this field\n     * mask.\n     *\n     * This is an O(n) operation, where `n` is the size of the field mask.\n     */    covers(t) {\n        for (const e of this.fields) if (e.isPrefixOf(t)) return !0;\n        return !1;\n    }\n    isEqual(t) {\n        return Tt(this.fields, t.fields, ((t, e) => t.isEqual(e)));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An ObjectValue represents a MapValue in the Firestore Proto and offers the\n * ability to add and remove fields (via the ObjectValueBuilder).\n */ class _e {\n    constructor(t) {\n        this.value = t;\n    }\n    static empty() {\n        return new _e({\n            mapValue: {}\n        });\n    }\n    /**\n     * Returns the value at the given path or null.\n     *\n     * @param path - the path to search\n     * @returns The value at the path or null if the path is not set.\n     */    field(t) {\n        if (t.isEmpty()) return this.value;\n        {\n            let e = this.value;\n            for (let n = 0; n < t.length - 1; ++n) if (e = (e.mapValue.fields || {})[t.get(n)], \n            !Kt(e)) return null;\n            return e = (e.mapValue.fields || {})[t.lastSegment()], e || null;\n        }\n    }\n    /**\n     * Sets the field to the provided value.\n     *\n     * @param path - The field path to set.\n     * @param value - The value to set.\n     */    set(t, e) {\n        this.getFieldsMap(t.popLast())[t.lastSegment()] = Yt(e);\n    }\n    /**\n     * Sets the provided fields to the provided values.\n     *\n     * @param data - A map of fields to values (or null for deletes).\n     */    setAll(t) {\n        let e = nt.emptyPath(), n = {}, r = [];\n        t.forEach(((t, s) => {\n            if (!e.isImmediateParentOf(s)) {\n                // Insert the accumulated changes at this parent location\n                const t = this.getFieldsMap(e);\n                this.applyChanges(t, n, r), n = {}, r = [], e = s.popLast();\n            }\n            t ? n[s.lastSegment()] = Yt(t) : r.push(s.lastSegment());\n        }));\n        const s = this.getFieldsMap(e);\n        this.applyChanges(s, n, r);\n    }\n    /**\n     * Removes the field at the specified path. If there is no field at the\n     * specified path, nothing is changed.\n     *\n     * @param path - The field path to remove.\n     */    delete(t) {\n        const e = this.field(t.popLast());\n        Kt(e) && e.mapValue.fields && delete e.mapValue.fields[t.lastSegment()];\n    }\n    isEqual(t) {\n        return Mt(this.value, t.value);\n    }\n    /**\n     * Returns the map that contains the leaf element of `path`. If the parent\n     * entry does not yet exist, or if it is not a map, a new map will be created.\n     */    getFieldsMap(t) {\n        let e = this.value;\n        e.mapValue.fields || (e.mapValue = {\n            fields: {}\n        });\n        for (let n = 0; n < t.length; ++n) {\n            let r = e.mapValue.fields[t.get(n)];\n            Kt(r) && r.mapValue.fields || (r = {\n                mapValue: {\n                    fields: {}\n                }\n            }, e.mapValue.fields[t.get(n)] = r), e = r;\n        }\n        return e.mapValue.fields;\n    }\n    /**\n     * Modifies `fieldsMap` by adding, replacing or deleting the specified\n     * entries.\n     */    applyChanges(t, e, n) {\n        Pt(e, ((e, n) => t[e] = n));\n        for (const e of n) delete t[e];\n    }\n    clone() {\n        return new _e(Yt(this.value));\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents a document in Firestore with a key, version, data and whether it\n * has local mutations applied to it.\n *\n * Documents can transition between states via `convertToFoundDocument()`,\n * `convertToNoDocument()` and `convertToUnknownDocument()`. If a document does\n * not transition to one of these states even after all mutations have been\n * applied, `isValidDocument()` returns false and the document should be removed\n * from all views.\n */ class ve {\n    constructor(t, e, n, r, s, i, o) {\n        this.key = t, this.documentType = e, this.version = n, this.readTime = r, this.createTime = s, \n        this.data = i, this.documentState = o;\n    }\n    /**\n     * Creates a document with no known version or data, but which can serve as\n     * base document for mutations.\n     */    static newInvalidDocument(t) {\n        return new ve(t, 0 /* DocumentType.INVALID */ , \n        /* version */ fe.min(), \n        /* readTime */ fe.min(), \n        /* createTime */ fe.min(), _e.empty(), 0 /* DocumentState.SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist with the given data at the\n     * given version.\n     */    static newFoundDocument(t, e, n, r) {\n        return new ve(t, 1 /* DocumentType.FOUND_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ fe.min(), \n        /* createTime */ n, r, 0 /* DocumentState.SYNCED */);\n    }\n    /** Creates a new document that is known to not exist at the given version. */    static newNoDocument(t, e) {\n        return new ve(t, 2 /* DocumentType.NO_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ fe.min(), \n        /* createTime */ fe.min(), _e.empty(), 0 /* DocumentState.SYNCED */);\n    }\n    /**\n     * Creates a new document that is known to exist at the given version but\n     * whose data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    static newUnknownDocument(t, e) {\n        return new ve(t, 3 /* DocumentType.UNKNOWN_DOCUMENT */ , \n        /* version */ e, \n        /* readTime */ fe.min(), \n        /* createTime */ fe.min(), _e.empty(), 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */);\n    }\n    /**\n     * Changes the document type to indicate that it exists and that its version\n     * and data are known.\n     */    convertToFoundDocument(t, e) {\n        // If a document is switching state from being an invalid or deleted\n        // document to a valid (FOUND_DOCUMENT) document, either due to receiving an\n        // update from Watch or due to applying a local set mutation on top\n        // of a deleted document, our best guess about its createTime would be the\n        // version at which the document transitioned to a FOUND_DOCUMENT.\n        return !this.createTime.isEqual(fe.min()) || 2 /* DocumentType.NO_DOCUMENT */ !== this.documentType && 0 /* DocumentType.INVALID */ !== this.documentType || (this.createTime = t), \n        this.version = t, this.documentType = 1 /* DocumentType.FOUND_DOCUMENT */ , this.data = e, \n        this.documentState = 0 /* DocumentState.SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it doesn't exist at the given\n     * version.\n     */    convertToNoDocument(t) {\n        return this.version = t, this.documentType = 2 /* DocumentType.NO_DOCUMENT */ , \n        this.data = _e.empty(), this.documentState = 0 /* DocumentState.SYNCED */ , this;\n    }\n    /**\n     * Changes the document type to indicate that it exists at a given version but\n     * that its data is not known (e.g. a document that was updated without a known\n     * base document).\n     */    convertToUnknownDocument(t) {\n        return this.version = t, this.documentType = 3 /* DocumentType.UNKNOWN_DOCUMENT */ , \n        this.data = _e.empty(), this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , \n        this;\n    }\n    setHasCommittedMutations() {\n        return this.documentState = 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ , this;\n    }\n    setHasLocalMutations() {\n        return this.documentState = 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ , this.version = fe.min(), \n        this;\n    }\n    setReadTime(t) {\n        return this.readTime = t, this;\n    }\n    get hasLocalMutations() {\n        return 1 /* DocumentState.HAS_LOCAL_MUTATIONS */ === this.documentState;\n    }\n    get hasCommittedMutations() {\n        return 2 /* DocumentState.HAS_COMMITTED_MUTATIONS */ === this.documentState;\n    }\n    get hasPendingWrites() {\n        return this.hasLocalMutations || this.hasCommittedMutations;\n    }\n    isValidDocument() {\n        return 0 /* DocumentType.INVALID */ !== this.documentType;\n    }\n    isFoundDocument() {\n        return 1 /* DocumentType.FOUND_DOCUMENT */ === this.documentType;\n    }\n    isNoDocument() {\n        return 2 /* DocumentType.NO_DOCUMENT */ === this.documentType;\n    }\n    isUnknownDocument() {\n        return 3 /* DocumentType.UNKNOWN_DOCUMENT */ === this.documentType;\n    }\n    isEqual(t) {\n        return t instanceof ve && this.key.isEqual(t.key) && this.version.isEqual(t.version) && this.documentType === t.documentType && this.documentState === t.documentState && this.data.isEqual(t.data);\n    }\n    mutableCopy() {\n        return new ve(this.key, this.documentType, this.version, this.readTime, this.createTime, this.data.clone(), this.documentState);\n    }\n    toString() {\n        return `Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {createTime: ${this.createTime}}), {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`;\n    }\n}\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Visible for testing\nclass be {\n    constructor(t, e = null, n = [], r = [], s = null, i = null, o = null) {\n        this.path = t, this.collectionGroup = e, this.orderBy = n, this.filters = r, this.limit = s, \n        this.startAt = i, this.endAt = o, this.O = null;\n    }\n}\n\n/**\n * Initializes a Target with a path and optional additional query constraints.\n * Path must currently be empty if this is a collection group query.\n *\n * NOTE: you should always construct `Target` from `Query.toTarget` instead of\n * using this factory method, because `Query` provides an implicit `orderBy`\n * property.\n */ function Ee(t, e = null, n = [], r = [], s = null, i = null, o = null) {\n    return new be(t, e, n, r, s, i, o);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Query encapsulates all the query attributes we support in the SDK. It can\n * be run against the LocalStore, as well as be converted to a `Target` to\n * query the RemoteStore results.\n *\n * Visible for testing.\n */\nclass Ae {\n    /**\n     * Initializes a Query with a path and optional additional query constraints.\n     * Path must currently be empty if this is a collection group query.\n     */\n    constructor(t, e = null, n = [], r = [], s = null, i = \"F\" /* LimitType.First */ , o = null, u = null) {\n        this.path = t, this.collectionGroup = e, this.explicitOrderBy = n, this.filters = r, \n        this.limit = s, this.limitType = i, this.startAt = o, this.endAt = u, this.k = null, \n        // The corresponding `Target` of this `Query` instance.\n        this.C = null, this.startAt, this.endAt;\n    }\n}\n\n/** Creates a new Query for a query that matches all documents at `path` */ function Ie(t) {\n    return t.explicitOrderBy.length > 0 ? t.explicitOrderBy[0].field : null;\n}\n\nfunction Te(t) {\n    for (const e of t.filters) {\n        const t = e.getFirstInequalityField();\n        if (null !== t) return t;\n    }\n    return null;\n}\n\n/**\n * Creates a new Query for a collection group query that matches all documents\n * within the provided collection group.\n */\n/**\n * Returns whether the query matches a collection group rather than a specific\n * collection.\n */\nfunction Re(t) {\n    return null !== t.collectionGroup;\n}\n\n/**\n * Returns the implicit order by constraint that is used to execute the Query,\n * which can be different from the order by constraints the user provided (e.g.\n * the SDK and backend always orders by `__name__`).\n */ function Pe(t) {\n    const e = A(t);\n    if (null === e.k) {\n        e.k = [];\n        const t = Te(e), n = Ie(e);\n        if (null !== t && null === n) \n        // In order to implicitly add key ordering, we must also add the\n        // inequality filter field for it to be a valid query.\n        // Note that the default inequality field and key ordering is ascending.\n        t.isKeyField() || e.k.push(new he(t)), e.k.push(new he(nt.keyField(), \"asc\" /* Direction.ASCENDING */)); else {\n            let t = !1;\n            for (const n of e.explicitOrderBy) e.k.push(n), n.field.isKeyField() && (t = !0);\n            if (!t) {\n                // The order of the implicit key ordering always matches the last\n                // explicit order by\n                const t = e.explicitOrderBy.length > 0 ? e.explicitOrderBy[e.explicitOrderBy.length - 1].dir : \"asc\" /* Direction.ASCENDING */;\n                e.k.push(new he(nt.keyField(), t));\n            }\n        }\n    }\n    return e.k;\n}\n\n/**\n * Converts this `Query` instance to it's corresponding `Target` representation.\n */ function Ve(t) {\n    const e = A(t);\n    if (!e.C) if (\"F\" /* LimitType.First */ === e.limitType) e.C = Ee(e.path, e.collectionGroup, Pe(e), e.filters, e.limit, e.startAt, e.endAt); else {\n        // Flip the orderBy directions since we want the last results\n        const t = [];\n        for (const n of Pe(e)) {\n            const e = \"desc\" /* Direction.DESCENDING */ === n.dir ? \"asc\" /* Direction.ASCENDING */ : \"desc\" /* Direction.DESCENDING */;\n            t.push(new he(n.field, e));\n        }\n        // We need to swap the cursors to match the now-flipped query ordering.\n                const n = e.endAt ? new Ht(e.endAt.position, e.endAt.inclusive) : null, r = e.startAt ? new Ht(e.startAt.position, e.startAt.inclusive) : null;\n        // Now return as a LimitType.First query.\n        e.C = Ee(e.path, e.collectionGroup, t, e.filters, e.limit, n, r);\n    }\n    return e.C;\n}\n\nfunction $e(t, e) {\n    e.getFirstInequalityField(), Te(t);\n    const n = t.filters.concat([ e ]);\n    return new Ae(t.path, t.collectionGroup, t.explicitOrderBy.slice(), n, t.limit, t.limitType, t.startAt, t.endAt);\n}\n\nfunction De(t, e) {\n    return function(t, e) {\n        if (t.limit !== e.limit) return !1;\n        if (t.orderBy.length !== e.orderBy.length) return !1;\n        for (let n = 0; n < t.orderBy.length; n++) if (!le(t.orderBy[n], e.orderBy[n])) return !1;\n        if (t.filters.length !== e.filters.length) return !1;\n        for (let n = 0; n < t.filters.length; n++) if (!ee(t.filters[n], e.filters[n])) return !1;\n        return t.collectionGroup === e.collectionGroup && !!t.path.isEqual(e.path) && !!Zt(t.startAt, e.startAt) && Zt(t.endAt, e.endAt);\n    }(Ve(t), Ve(e)) && t.limitType === e.limitType;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns an DoubleValue for `value` that is encoded based the serializer's\n * `useProto3Json` setting.\n */\n/**\n * Returns a value for a number that's appropriate to put into a proto.\n * The return value is an IntegerValue if it can safely represent the value,\n * otherwise a DoubleValue is returned.\n */\nfunction Ne(t, e) {\n    return function(t) {\n        return \"number\" == typeof t && Number.isInteger(t) && !dt(t) && t <= Number.MAX_SAFE_INTEGER && t >= Number.MIN_SAFE_INTEGER;\n    }(e) ? \n    /**\n * Returns an IntegerValue for `value`.\n */\n    function(t) {\n        return {\n            integerValue: \"\" + t\n        };\n    }(e) : function(t, e) {\n        if (t.L) {\n            if (isNaN(e)) return {\n                doubleValue: \"NaN\"\n            };\n            if (e === 1 / 0) return {\n                doubleValue: \"Infinity\"\n            };\n            if (e === -1 / 0) return {\n                doubleValue: \"-Infinity\"\n            };\n        }\n        return {\n            doubleValue: dt(e) ? \"-0\" : e\n        };\n    }(t, e);\n}\n\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** Used to represent a field transform on a mutation. */ class Fe {\n    constructor() {\n        // Make sure that the structural type of `TransformOperation` is unique.\n        // See https://github.com/microsoft/TypeScript/issues/5451\n        this._ = void 0;\n    }\n}\n\n/** Transforms a value into a server-generated timestamp. */ class xe extends Fe {}\n\n/** Transforms an array value via a union operation. */ class Se extends Fe {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/** Transforms an array value via a remove operation. */ class qe extends Fe {\n    constructor(t) {\n        super(), this.elements = t;\n    }\n}\n\n/**\n * Implements the backend semantics for locally computed NUMERIC_ADD (increment)\n * transforms. Converts all field values to integers or doubles, but unlike the\n * backend does not cap integer values at 2^63. Instead, JavaScript number\n * arithmetic is used and precision loss can occur for values greater than 2^53.\n */ class Oe extends Fe {\n    constructor(t, e) {\n        super(), this.M = t, this.U = e;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** A field path and the TransformOperation to perform upon it. */ class ke {\n    constructor(t, e) {\n        this.field = t, this.transform = e;\n    }\n}\n\n/**\n * Encodes a precondition for a mutation. This follows the model that the\n * backend accepts with the special case of an explicit \"empty\" precondition\n * (meaning no precondition).\n */ class Ce {\n    constructor(t, e) {\n        this.updateTime = t, this.exists = e;\n    }\n    /** Creates a new empty Precondition. */    static none() {\n        return new Ce;\n    }\n    /** Creates a new Precondition with an exists flag. */    static exists(t) {\n        return new Ce(void 0, t);\n    }\n    /** Creates a new Precondition based on a version a document exists at. */    static updateTime(t) {\n        return new Ce(t);\n    }\n    /** Returns whether this Precondition is empty. */    get isNone() {\n        return void 0 === this.updateTime && void 0 === this.exists;\n    }\n    isEqual(t) {\n        return this.exists === t.exists && (this.updateTime ? !!t.updateTime && this.updateTime.isEqual(t.updateTime) : !t.updateTime);\n    }\n}\n\n/**\n * A mutation describes a self-contained change to a document. Mutations can\n * create, replace, delete, and update subsets of documents.\n *\n * Mutations not only act on the value of the document but also its version.\n *\n * For local mutations (mutations that haven't been committed yet), we preserve\n * the existing version for Set and Patch mutations. For Delete mutations, we\n * reset the version to 0.\n *\n * Here's the expected transition table.\n *\n * MUTATION           APPLIED TO            RESULTS IN\n *\n * SetMutation        Document(v3)          Document(v3)\n * SetMutation        NoDocument(v3)        Document(v0)\n * SetMutation        InvalidDocument(v0)   Document(v0)\n * PatchMutation      Document(v3)          Document(v3)\n * PatchMutation      NoDocument(v3)        NoDocument(v3)\n * PatchMutation      InvalidDocument(v0)   UnknownDocument(v3)\n * DeleteMutation     Document(v3)          NoDocument(v0)\n * DeleteMutation     NoDocument(v3)        NoDocument(v0)\n * DeleteMutation     InvalidDocument(v0)   NoDocument(v0)\n *\n * For acknowledged mutations, we use the updateTime of the WriteResponse as\n * the resulting version for Set and Patch mutations. As deletes have no\n * explicit update time, we use the commitTime of the WriteResponse for\n * Delete mutations.\n *\n * If a mutation is acknowledged by the backend but fails the precondition check\n * locally, we transition to an `UnknownDocument` and rely on Watch to send us\n * the updated version.\n *\n * Field transforms are used only with Patch and Set Mutations. We use the\n * `updateTransforms` message to store transforms, rather than the `transforms`s\n * messages.\n *\n * ## Subclassing Notes\n *\n * Every type of mutation needs to implement its own applyToRemoteDocument() and\n * applyToLocalView() to implement the actual behavior of applying the mutation\n * to some source document (see `setMutationApplyToRemoteDocument()` for an\n * example).\n */ class Le {}\n\n/**\n * A mutation that creates or replaces the document at the given key with the\n * object value contents.\n */ class Me extends Le {\n    constructor(t, e, n, r = []) {\n        super(), this.key = t, this.value = e, this.precondition = n, this.fieldTransforms = r, \n        this.type = 0 /* MutationType.Set */;\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that modifies fields of the document at the given key with the\n * given values. The values are applied through a field mask:\n *\n *  * When a field is in both the mask and the values, the corresponding field\n *    is updated.\n *  * When a field is in neither the mask nor the values, the corresponding\n *    field is unmodified.\n *  * When a field is in the mask but not in the values, the corresponding field\n *    is deleted.\n *  * When a field is not in the mask but is in the values, the values map is\n *    ignored.\n */ class Ue extends Le {\n    constructor(t, e, n, r, s = []) {\n        super(), this.key = t, this.data = e, this.fieldMask = n, this.precondition = r, \n        this.fieldTransforms = s, this.type = 1 /* MutationType.Patch */;\n    }\n    getFieldMask() {\n        return this.fieldMask;\n    }\n}\n\n/** A mutation that deletes the document at the given key. */ class je extends Le {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 2 /* MutationType.Delete */ , \n        this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * A mutation that verifies the existence of the document at the given key with\n * the provided precondition.\n *\n * The `verify` operation is only used in Transactions, and this class serves\n * primarily to facilitate serialization into protos.\n */ class Be extends Le {\n    constructor(t, e) {\n        super(), this.key = t, this.precondition = e, this.type = 3 /* MutationType.Verify */ , \n        this.fieldTransforms = [];\n    }\n    getFieldMask() {\n        return null;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const ze = (() => {\n    const t = {\n        asc: \"ASCENDING\",\n        desc: \"DESCENDING\"\n    };\n    return t;\n})(), Qe = (() => {\n    const t = {\n        \"<\": \"LESS_THAN\",\n        \"<=\": \"LESS_THAN_OR_EQUAL\",\n        \">\": \"GREATER_THAN\",\n        \">=\": \"GREATER_THAN_OR_EQUAL\",\n        \"==\": \"EQUAL\",\n        \"!=\": \"NOT_EQUAL\",\n        \"array-contains\": \"ARRAY_CONTAINS\",\n        in: \"IN\",\n        \"not-in\": \"NOT_IN\",\n        \"array-contains-any\": \"ARRAY_CONTAINS_ANY\"\n    };\n    return t;\n})(), We = (() => {\n    const t = {\n        and: \"AND\",\n        or: \"OR\"\n    };\n    return t;\n})();\n\n/**\n * This class generates JsonObject values for the Datastore API suitable for\n * sending to either GRPC stub methods or via the JSON/HTTP REST API.\n *\n * The serializer supports both Protobuf.js and Proto3 JSON formats. By\n * setting `useProto3Json` to true, the serializer will use the Proto3 JSON\n * format.\n *\n * For a description of the Proto3 JSON format check\n * https://developers.google.com/protocol-buffers/docs/proto3#json\n *\n * TODO(klimt): We can remove the databaseId argument if we keep the full\n * resource name in documents.\n */\nclass Ge {\n    constructor(t, e) {\n        this.databaseId = t, this.L = e;\n    }\n}\n\n/**\n * Returns a value for a number (or null) that's appropriate to put into\n * a google.protobuf.Int32Value proto.\n * DO NOT USE THIS FOR ANYTHING ELSE.\n * This method cheats. It's typed as returning \"number\" because that's what\n * our generated proto interfaces say Int32Value must be. But GRPC actually\n * expects a { value: <number> } struct.\n */\n/**\n * Returns a value for a Date that's appropriate to put into a proto.\n */\nfunction Ke(t, e) {\n    if (t.L) {\n        return `${new Date(1e3 * e.seconds).toISOString().replace(/\\.\\d*/, \"\").replace(\"Z\", \"\")}.${(\"000000000\" + e.nanoseconds).slice(-9)}Z`;\n    }\n    return {\n        seconds: \"\" + e.seconds,\n        nanos: e.nanoseconds\n    };\n}\n\n/**\n * Returns a value for bytes that's appropriate to put in a proto.\n *\n * Visible for testing.\n */\nfunction Ye(t, e) {\n    return t.L ? e.toBase64() : e.toUint8Array();\n}\n\nfunction He(t, e) {\n    return Ke(t, e.toTimestamp());\n}\n\nfunction Ze(t) {\n    return E(!!t), fe.fromTimestamp(function(t) {\n        const e = Nt(t);\n        return new St(e.seconds, e.nanos);\n    }(t));\n}\n\nfunction Je(t, e) {\n    return function(t) {\n        return new tt([ \"projects\", t.projectId, \"databases\", t.database ]);\n    }(t).child(\"documents\").child(e).canonicalString();\n}\n\nfunction Xe(t, e) {\n    return Je(t.databaseId, e.path);\n}\n\nfunction tn(t, e) {\n    const n = function(t) {\n        const e = tt.fromString(t);\n        return E(wn(e)), e;\n    }(e);\n    if (n.get(1) !== t.databaseId.projectId) throw new U(P, \"Tried to deserialize key from different project: \" + n.get(1) + \" vs \" + t.databaseId.projectId);\n    if (n.get(3) !== t.databaseId.database) throw new U(P, \"Tried to deserialize key from different database: \" + n.get(3) + \" vs \" + t.databaseId.database);\n    return new rt((E((r = n).length > 4 && \"documents\" === r.get(4)), r.popFirst(5)));\n    var r;\n    /** Creates a Document proto from key and fields (but no create/update time) */}\n\nfunction en(t, e) {\n    return Je(t.databaseId, e);\n}\n\nfunction nn(t) {\n    return new tt([ \"projects\", t.databaseId.projectId, \"databases\", t.databaseId.database ]).canonicalString();\n}\n\nfunction rn(t, e, n) {\n    return {\n        name: Xe(t, e),\n        fields: n.value.mapValue.fields\n    };\n}\n\nfunction sn(t, e) {\n    return \"found\" in e ? function(t, e) {\n        E(!!e.found), e.found.name, e.found.updateTime;\n        const n = tn(t, e.found.name), r = Ze(e.found.updateTime), s = e.found.createTime ? Ze(e.found.createTime) : fe.min(), i = new _e({\n            mapValue: {\n                fields: e.found.fields\n            }\n        });\n        return ve.newFoundDocument(n, r, s, i);\n    }(t, e) : \"missing\" in e ? function(t, e) {\n        E(!!e.missing), E(!!e.readTime);\n        const n = tn(t, e.missing), r = Ze(e.readTime);\n        return ve.newNoDocument(n, r);\n    }(t, e) : b();\n}\n\nfunction on(t, e) {\n    let n;\n    if (e instanceof Me) n = {\n        update: rn(t, e.key, e.value)\n    }; else if (e instanceof je) n = {\n        delete: Xe(t, e.key)\n    }; else if (e instanceof Ue) n = {\n        update: rn(t, e.key, e.data),\n        updateMask: dn(e.fieldMask)\n    }; else {\n        if (!(e instanceof Be)) return b();\n        n = {\n            verify: Xe(t, e.key)\n        };\n    }\n    return e.fieldTransforms.length > 0 && (n.updateTransforms = e.fieldTransforms.map((t => function(t, e) {\n        const n = e.transform;\n        if (n instanceof xe) return {\n            fieldPath: e.field.canonicalString(),\n            setToServerValue: \"REQUEST_TIME\"\n        };\n        if (n instanceof Se) return {\n            fieldPath: e.field.canonicalString(),\n            appendMissingElements: {\n                values: n.elements\n            }\n        };\n        if (n instanceof qe) return {\n            fieldPath: e.field.canonicalString(),\n            removeAllFromArray: {\n                values: n.elements\n            }\n        };\n        if (n instanceof Oe) return {\n            fieldPath: e.field.canonicalString(),\n            increment: n.U\n        };\n        throw b();\n    }(0, t)))), e.precondition.isNone || (n.currentDocument = function(t, e) {\n        return void 0 !== e.updateTime ? {\n            updateTime: He(t, e.updateTime)\n        } : void 0 !== e.exists ? {\n            exists: e.exists\n        } : b();\n    }(t, e.precondition)), n;\n}\n\nfunction un(t, e) {\n    // Dissect the path into parent, collectionId, and optional key filter.\n    const n = {\n        structuredQuery: {}\n    }, r = e.path;\n    null !== e.collectionGroup ? (n.parent = en(t, r), n.structuredQuery.from = [ {\n        collectionId: e.collectionGroup,\n        allDescendants: !0\n    } ]) : (n.parent = en(t, r.popLast()), n.structuredQuery.from = [ {\n        collectionId: r.lastSegment()\n    } ]);\n    const s = function(t) {\n        if (0 === t.length) return;\n        return fn(te.create(t, \"and\" /* CompositeOperator.AND */));\n    }(e.filters);\n    s && (n.structuredQuery.where = s);\n    const i = function(t) {\n        if (0 === t.length) return;\n        return t.map((t => \n        // visible for testing\n        function(t) {\n            return {\n                field: ln(t.field),\n                direction: cn(t.dir)\n            };\n        }\n        // visible for testing\n        (t)));\n    }(e.orderBy);\n    i && (n.structuredQuery.orderBy = i);\n    const o = function(t, e) {\n        return t.L || ft(e) ? e : {\n            value: e\n        };\n    }(t, e.limit);\n    var u;\n    return null !== o && (n.structuredQuery.limit = o), e.startAt && (n.structuredQuery.startAt = {\n        before: (u = e.startAt).inclusive,\n        values: u.position\n    }), e.endAt && (n.structuredQuery.endAt = function(t) {\n        return {\n            before: !t.inclusive,\n            values: t.position\n        };\n    }\n    // visible for testing\n    (e.endAt)), n;\n}\n\nfunction cn(t) {\n    return ze[t];\n}\n\n// visible for testing\nfunction an(t) {\n    return Qe[t];\n}\n\nfunction hn(t) {\n    return We[t];\n}\n\nfunction ln(t) {\n    return {\n        fieldPath: t.canonicalString()\n    };\n}\n\nfunction fn(t) {\n    return t instanceof Xt ? function(t) {\n        if (\"==\" /* Operator.EQUAL */ === t.op) {\n            if (Gt(t.value)) return {\n                unaryFilter: {\n                    field: ln(t.field),\n                    op: \"IS_NAN\"\n                }\n            };\n            if (Wt(t.value)) return {\n                unaryFilter: {\n                    field: ln(t.field),\n                    op: \"IS_NULL\"\n                }\n            };\n        } else if (\"!=\" /* Operator.NOT_EQUAL */ === t.op) {\n            if (Gt(t.value)) return {\n                unaryFilter: {\n                    field: ln(t.field),\n                    op: \"IS_NOT_NAN\"\n                }\n            };\n            if (Wt(t.value)) return {\n                unaryFilter: {\n                    field: ln(t.field),\n                    op: \"IS_NOT_NULL\"\n                }\n            };\n        }\n        return {\n            fieldFilter: {\n                field: ln(t.field),\n                op: an(t.op),\n                value: t.value\n            }\n        };\n    }(t) : t instanceof te ? function(t) {\n        const e = t.getFilters().map((t => fn(t)));\n        if (1 === e.length) return e[0];\n        return {\n            compositeFilter: {\n                op: hn(t.op),\n                filters: e\n            }\n        };\n    }(t) : b();\n}\n\nfunction dn(t) {\n    const e = [];\n    return t.fields.forEach((t => e.push(t.canonicalString()))), {\n        fieldPaths: e\n    };\n}\n\nfunction wn(t) {\n    // Resource names have at least 4 components (project ID, database ID)\n    return t.length >= 4 && \"projects\" === t.get(0) && \"databases\" === t.get(2);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ function mn(t) {\n    return new Ge(t, /* useProto3Json= */ !0);\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a +/- 50% \"jitter\" that is calculated and added to the\n * base delay. This prevents clients from accidentally synchronizing their\n * delays causing spikes of load to the backend.\n */\nclass pn {\n    constructor(\n    /**\n     * The AsyncQueue to run backoff operations on.\n     */\n    t, \n    /**\n     * The ID to use when scheduling backoff operations on the AsyncQueue.\n     */\n    e, \n    /**\n     * The initial delay (used as the base delay on the first retry attempt).\n     * Note that jitter will still be applied, so the actual delay could be as\n     * little as 0.5*initialDelayMs.\n     */\n    n = 1e3\n    /**\n     * The multiplier to use to determine the extended base delay after each\n     * attempt.\n     */ , r = 1.5\n    /**\n     * The maximum base delay after which no further backoff is performed.\n     * Note that jitter will still be applied, so the actual delay could be as\n     * much as 1.5*maxDelayMs.\n     */ , s = 6e4) {\n        this.j = t, this.timerId = e, this.B = n, this.W = r, this.G = s, this.K = 0, this.Y = null, \n        /** The last backoff attempt, as epoch milliseconds. */\n        this.H = Date.now(), this.reset();\n    }\n    /**\n     * Resets the backoff delay.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     */    reset() {\n        this.K = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     */    Z() {\n        this.K = this.G;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts. If there was a pending backoff operation\n     * already, it will be canceled.\n     */    J(t) {\n        // Cancel any pending backoff operation.\n        this.cancel();\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        const e = Math.floor(this.K + this.X()), n = Math.max(0, Date.now() - this.H), r = Math.max(0, e - n);\n        // Guard against lastAttemptTime being in the future due to a clock change.\n                r > 0 && y(\"ExponentialBackoff\", `Backing off for ${r} ms (base delay: ${this.K} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`), \n        this.Y = this.j.enqueueAfterDelay(this.timerId, r, (() => (this.H = Date.now(), \n        t()))), \n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.K *= this.W, this.K < this.B && (this.K = this.B), this.K > this.G && (this.K = this.G);\n    }\n    tt() {\n        null !== this.Y && (this.Y.skipDelay(), this.Y = null);\n    }\n    cancel() {\n        null !== this.Y && (this.Y.cancel(), this.Y = null);\n    }\n    /** Returns a random value in the range [-currentBaseMs/2, currentBaseMs/2] */    X() {\n        return (Math.random() - .5) * this.K;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Datastore and its related methods are a wrapper around the external Google\n * Cloud Datastore grpc API, which provides an interface that is more convenient\n * for the rest of the client SDK architecture to consume.\n */\n/**\n * An implementation of Datastore that exposes additional state for internal\n * consumption.\n */\nclass yn extends class {} {\n    constructor(t, e, n, r) {\n        super(), this.authCredentials = t, this.appCheckCredentials = e, this.connection = n, \n        this.M = r, this.et = !1;\n    }\n    nt() {\n        if (this.et) throw new U(S, \"The client has already been terminated.\");\n    }\n    /** Invokes the provided RPC with auth and AppCheck tokens. */    A(t, e, n) {\n        return this.nt(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([r, s]) => this.connection.A(t, e, n, r, s))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === F && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new U(R, t.toString());\n        }));\n    }\n    /** Invokes the provided RPC with streamed results with auth and AppCheck tokens. */    P(t, e, n, r) {\n        return this.nt(), Promise.all([ this.authCredentials.getToken(), this.appCheckCredentials.getToken() ]).then((([s, i]) => this.connection.P(t, e, n, s, i, r))).catch((t => {\n            throw \"FirebaseError\" === t.name ? (t.code === F && (this.authCredentials.invalidateToken(), \n            this.appCheckCredentials.invalidateToken()), t) : new U(R, t.toString());\n        }));\n    }\n    terminate() {\n        this.et = !0;\n    }\n}\n\n// TODO(firestorexp): Make sure there is only one Datastore instance per\n// firestore-exp client.\nasync function gn(t, e) {\n    const n = A(t), r = nn(n.M) + \"/documents\", s = {\n        writes: e.map((t => on(n.M, t)))\n    };\n    await n.A(\"Commit\", r, s);\n}\n\nasync function _n(t, e) {\n    const n = A(t), r = nn(n.M) + \"/documents\", s = {\n        documents: e.map((t => Xe(n.M, t)))\n    }, i = await n.P(\"BatchGetDocuments\", r, s, e.length), o = new Map;\n    i.forEach((t => {\n        const e = sn(n.M, t);\n        o.set(e.key.toString(), e);\n    }));\n    const u = [];\n    return e.forEach((t => {\n        const e = o.get(t.toString());\n        E(!!e), u.push(e);\n    })), u;\n}\n\nasync function vn(t, e) {\n    const n = A(t), r = un(n.M, Ve(e));\n    return (await n.P(\"RunQuery\", r.parent, {\n        structuredQuery: r.structuredQuery\n    })).filter((t => !!t.document)).map((t => function(t, e, n) {\n        const r = tn(t, e.name), s = Ze(e.updateTime), i = e.createTime ? Ze(e.createTime) : fe.min(), o = new _e({\n            mapValue: {\n                fields: e.fields\n            }\n        }), u = ve.newFoundDocument(r, s, i, o);\n        return n && u.setHasCommittedMutations(), n ? u.setHasCommittedMutations() : u;\n    }(n.M, t.document, void 0)));\n}\n\nasync function bn(t, e, n) {\n    const r = A(t), s = function(t, e, n) {\n        const r = un(t, e), s = [];\n        return n.forEach((t => {\n            \"count\" === t.N ? s.push({\n                alias: t.alias.canonicalString(),\n                count: {}\n            }) : \"avg\" === t.N ? s.push({\n                alias: t.alias.canonicalString(),\n                avg: {\n                    field: ln(t.fieldPath)\n                }\n            }) : \"sum\" === t.N && s.push({\n                alias: t.alias.canonicalString(),\n                sum: {\n                    field: ln(t.fieldPath)\n                }\n            });\n        })), {\n            structuredAggregationQuery: {\n                aggregations: s,\n                structuredQuery: r.structuredQuery\n            },\n            parent: r.parent\n        };\n    }(r.M, Ve(e), n), i = s.parent;\n    r.connection.v || delete s.parent;\n    const o = (await r.P(\"RunAggregationQuery\", i, s, /*expectedResponseCount=*/ 1)).filter((t => !!t.result));\n    // Omit RunAggregationQueryResponse that only contain readTimes.\n        return E(1 === o.length), (u = o[0]).result, u.result.aggregateFields, new _e({\n        mapValue: {\n            fields: null === (c = u.result) || void 0 === c ? void 0 : c.aggregateFields\n        }\n    });\n    var u, c;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const En = new Map;\n\n/**\n * An instance map that ensures only one Datastore exists per Firestore\n * instance.\n */\n/**\n * Returns an initialized and started Datastore for the given Firestore\n * instance. Callers must invoke removeComponents() when the Firestore\n * instance is terminated.\n */\nfunction An(t) {\n    if (t._terminated) throw new U(S, \"The client has already been terminated.\");\n    if (!En.has(t)) {\n        y(\"ComponentProvider\", \"Initializing Datastore\");\n        const i = function(t) {\n            return new gt(t, fetch.bind(null));\n        }((e = t._databaseId, n = t.app.options.appId || \"\", r = t._persistenceKey, s = t._freezeSettings(), \n        new Z(e, n, r, s.host, s.ssl, s.experimentalForceLongPolling, s.experimentalAutoDetectLongPolling, s.useFetchStreams))), o = mn(t._databaseId), u = function(t, e, n, r) {\n            return new yn(t, e, n, r);\n        }(t._authCredentials, t._appCheckCredentials, i, o);\n        En.set(t, u);\n    }\n    var e, n, r, s;\n    /**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */    return En.get(t);\n}\n\n/**\n * Removes all components associated with the provided instance. Must be called\n * when the `Firestore` instance is terminated.\n */\n/**\n * A concrete type describing all the values that can be applied via a\n * user-supplied `FirestoreSettings` object. This is a separate type so that\n * defaults can be supplied and the value can be checked for equality.\n */\nclass In {\n    constructor(t) {\n        var e;\n        if (void 0 === t.host) {\n            if (void 0 !== t.ssl) throw new U(P, \"Can't provide ssl option if host option is not set\");\n            this.host = \"firestore.googleapis.com\", this.ssl = true;\n        } else this.host = t.host, this.ssl = null === (e = t.ssl) || void 0 === e || e;\n        if (this.credentials = t.credentials, this.ignoreUndefinedProperties = !!t.ignoreUndefinedProperties, \n        void 0 === t.cacheSizeBytes) this.cacheSizeBytes = 41943040; else {\n            if (-1 !== t.cacheSizeBytes && t.cacheSizeBytes < 1048576) throw new U(P, \"cacheSizeBytes must be at least 1048576\");\n            this.cacheSizeBytes = t.cacheSizeBytes;\n        }\n        this.experimentalForceLongPolling = !!t.experimentalForceLongPolling, this.experimentalAutoDetectLongPolling = !!t.experimentalAutoDetectLongPolling, \n        this.useFetchStreams = !!t.useFetchStreams, function(t, e, n, r) {\n            if (!0 === e && !0 === r) throw new U(P, `${t} and ${n} cannot be used together.`);\n        }(\"experimentalForceLongPolling\", t.experimentalForceLongPolling, \"experimentalAutoDetectLongPolling\", t.experimentalAutoDetectLongPolling);\n    }\n    isEqual(t) {\n        return this.host === t.host && this.ssl === t.ssl && this.credentials === t.credentials && this.cacheSizeBytes === t.cacheSizeBytes && this.experimentalForceLongPolling === t.experimentalForceLongPolling && this.experimentalAutoDetectLongPolling === t.experimentalAutoDetectLongPolling && this.ignoreUndefinedProperties === t.ignoreUndefinedProperties && this.useFetchStreams === t.useFetchStreams;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * The Cloud Firestore service interface.\n *\n * Do not call this constructor directly. Instead, use {@link (getFirestore:1)}.\n */ class Tn {\n    /** @hideconstructor */\n    constructor(t, e, n, r) {\n        this._authCredentials = t, this._appCheckCredentials = e, this._databaseId = n, \n        this._app = r, \n        /**\n         * Whether it's a Firestore or Firestore Lite instance.\n         */\n        this.type = \"firestore-lite\", this._persistenceKey = \"(lite)\", this._settings = new In({}), \n        this._settingsFrozen = !1;\n    }\n    /**\n     * The {@link @firebase/app#FirebaseApp} associated with this `Firestore` service\n     * instance.\n     */    get app() {\n        if (!this._app) throw new U(S, \"Firestore was not initialized using the Firebase SDK. 'app' is not available\");\n        return this._app;\n    }\n    get _initialized() {\n        return this._settingsFrozen;\n    }\n    get _terminated() {\n        return void 0 !== this._terminateTask;\n    }\n    _setSettings(t) {\n        if (this._settingsFrozen) throw new U(S, \"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.\");\n        this._settings = new In(t), void 0 !== t.credentials && (this._authCredentials = function(t) {\n            if (!t) return new z;\n            switch (t.type) {\n              case \"gapi\":\n                const e = t.client;\n                return new K(e, t.sessionIndex || \"0\", t.iamToken || null, t.authTokenFactory || null);\n\n              case \"provider\":\n                return t.client;\n\n              default:\n                throw new U(P, \"makeAuthCredentialsProvider failed due to invalid credential type\");\n            }\n        }(t.credentials));\n    }\n    _getSettings() {\n        return this._settings;\n    }\n    _freezeSettings() {\n        return this._settingsFrozen = !0, this._settings;\n    }\n    _delete() {\n        return this._terminateTask || (this._terminateTask = this._terminate()), this._terminateTask;\n    }\n    /** Returns a JSON-serializable representation of this `Firestore` instance. */    toJSON() {\n        return {\n            app: this._app,\n            databaseId: this._databaseId,\n            settings: this._settings\n        };\n    }\n    /**\n     * Terminates all components used by this client. Subclasses can override\n     * this method to clean up their own dependencies, but must also call this\n     * method.\n     *\n     * Only ever called once.\n     */    _terminate() {\n        return function(t) {\n            const e = En.get(t);\n            e && (y(\"ComponentProvider\", \"Removing Datastore\"), En.delete(t), e.terminate());\n        }(this), Promise.resolve();\n    }\n}\n\nfunction Rn(t, e, n) {\n    n || (n = \"(default)\");\n    const r = _getProvider(t, \"firestore/lite\");\n    if (r.isInitialized(n)) throw new U(S, \"Firestore can only be initialized once per app.\");\n    return r.initialize({\n        options: e,\n        instanceIdentifier: n\n    });\n}\n\nfunction Pn(e, n) {\n    const r = \"object\" == typeof e ? e : t(), s = \"string\" == typeof e ? e : n || \"(default)\", i = _getProvider(r, \"firestore/lite\").getImmediate({\n        identifier: s\n    });\n    if (!i._initialized) {\n        const t = a(\"firestore\");\n        t && Vn(i, ...t);\n    }\n    return i;\n}\n\n/**\n * Modify this instance to communicate with the Cloud Firestore emulator.\n *\n * Note: This must be called before this instance has been used to do any\n * operations.\n *\n * @param firestore - The `Firestore` instance to configure to connect to the\n * emulator.\n * @param host - the emulator host (ex: localhost).\n * @param port - the emulator port (ex: 9000).\n * @param options.mockUserToken - the mock auth token to use for unit testing\n * Security Rules.\n */ function Vn(t, e, n, r = {}) {\n    var s;\n    const i = (t = ct(t, Tn))._getSettings();\n    if (\"firestore.googleapis.com\" !== i.host && i.host !== e && _(\"Host has been set in both settings() and useEmulator(), emulator host will be used\"), \n    t._setSettings(Object.assign(Object.assign({}, i), {\n        host: `${e}:${n}`,\n        ssl: !1\n    })), r.mockUserToken) {\n        let e, n;\n        if (\"string\" == typeof r.mockUserToken) e = r.mockUserToken, n = d.MOCK_USER; else {\n            // Let createMockUserToken validate first (catches common mistakes like\n            // invalid field \"uid\" and missing field \"sub\" / \"user_id\".)\n            e = h(r.mockUserToken, null === (s = t._app) || void 0 === s ? void 0 : s.options.projectId);\n            const i = r.mockUserToken.sub || r.mockUserToken.user_id;\n            if (!i) throw new U(P, \"mockUserToken must contain 'sub' or 'user_id' field!\");\n            n = new d(i);\n        }\n        t._authCredentials = new Q(new B(e, n));\n    }\n}\n\n/**\n * Terminates the provided `Firestore` instance.\n *\n * After calling `terminate()` only the `clearIndexedDbPersistence()` functions\n * may be used. Any other function will throw a `FirestoreError`. Termination\n * does not cancel any pending writes, and any promises that are awaiting a\n * response from the server will not be resolved.\n *\n * To restart after termination, create a new instance of `Firestore` with\n * {@link (getFirestore:1)}.\n *\n * Note: Under normal circumstances, calling `terminate()` is not required. This\n * function is useful only when you want to force this instance to release all of\n * its resources or in combination with {@link clearIndexedDbPersistence} to\n * ensure that all local state is destroyed between test runs.\n *\n * @param firestore - The `Firestore` instance to terminate.\n * @returns A `Promise` that is resolved when the instance has been successfully\n * terminated.\n */ function $n(t) {\n    return t = ct(t, Tn), e(t.app, \"firestore/lite\"), t._delete();\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an aggregation that can be performed by Firestore.\n */\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nclass Dn {\n    /**\n     * Create a new AggregateField<T>\n     * @param _aggregateType Specifies the type of aggregation operation to perform.\n     * @param _internalFieldPath Optionally specifies the field that is aggregated.\n     * @internal\n     */\n    constructor(\n    // TODO (sum/avg) make aggregateType public when the feature is supported\n    t = \"count\", e) {\n        this._aggregateType = t, this._internalFieldPath = e, \n        /** A type string to uniquely identify instances of this class. */\n        this.type = \"AggregateField\";\n    }\n}\n\n/**\n * The results of executing an aggregation query.\n */ class Nn {\n    /** @hideconstructor */\n    constructor(t, e, n) {\n        this._userDataWriter = e, this._data = n, \n        /** A type string to uniquely identify instances of this class. */\n        this.type = \"AggregateQuerySnapshot\", this.query = t;\n    }\n    /**\n     * Returns the results of the aggregations performed over the underlying\n     * query.\n     *\n     * The keys of the returned object will be the same as those of the\n     * `AggregateSpec` object specified to the aggregation method, and the values\n     * will be the corresponding aggregation result.\n     *\n     * @returns The results of the aggregations performed over the underlying\n     * query.\n     */    data() {\n        return this._userDataWriter.convertValue(this._data.value);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentReference` refers to a document location in a Firestore database\n * and can be used to write, read, or listen to the location. The document at\n * the referenced location may or may not exist.\n */ class Fn {\n    /** @hideconstructor */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, n) {\n        this.converter = e, this._key = n, \n        /** The type of this Firestore reference. */\n        this.type = \"document\", this.firestore = t;\n    }\n    get _path() {\n        return this._key.path;\n    }\n    /**\n     * The document's identifier within its collection.\n     */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced document (relative\n     * to the root of the database).\n     */    get path() {\n        return this._key.path.canonicalString();\n    }\n    /**\n     * The collection this `DocumentReference` belongs to.\n     */    get parent() {\n        return new Sn(this.firestore, this.converter, this._key.path.popLast());\n    }\n    withConverter(t) {\n        return new Fn(this.firestore, t, this._key);\n    }\n}\n\n/**\n * A `Query` refers to a query which you can read or listen to. You can also\n * construct refined `Query` objects by adding filters and ordering.\n */ class xn {\n    // This is the lite version of the Query class in the main SDK.\n    /** @hideconstructor protected */\n    constructor(t, \n    /**\n     * If provided, the `FirestoreDataConverter` associated with this instance.\n     */\n    e, n) {\n        this.converter = e, this._query = n, \n        /** The type of this Firestore reference. */\n        this.type = \"query\", this.firestore = t;\n    }\n    withConverter(t) {\n        return new xn(this.firestore, t, this._query);\n    }\n}\n\n/**\n * A `CollectionReference` object can be used for adding documents, getting\n * document references, and querying for documents (using {@link (query:1)}).\n */ class Sn extends xn {\n    /** @hideconstructor */\n    constructor(t, e, n) {\n        super(t, e, new Ae(n)), this._path = n, \n        /** The type of this Firestore reference. */\n        this.type = \"collection\";\n    }\n    /** The collection's identifier. */    get id() {\n        return this._query.path.lastSegment();\n    }\n    /**\n     * A string representing the path of the referenced collection (relative\n     * to the root of the database).\n     */    get path() {\n        return this._query.path.canonicalString();\n    }\n    /**\n     * A reference to the containing `DocumentReference` if this is a\n     * subcollection. If this isn't a subcollection, the reference is null.\n     */    get parent() {\n        const t = this._path.popLast();\n        return t.isEmpty() ? null : new Fn(this.firestore, \n        /* converter= */ null, new rt(t));\n    }\n    withConverter(t) {\n        return new Sn(this.firestore, t, this._path);\n    }\n}\n\nfunction qn(t, e, ...n) {\n    if (t = l(t), st(\"collection\", \"path\", e), t instanceof Tn) {\n        const r = tt.fromString(e, ...n);\n        return ot(r), new Sn(t, /* converter= */ null, r);\n    }\n    {\n        if (!(t instanceof Fn || t instanceof Sn)) throw new U(P, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const r = t._path.child(tt.fromString(e, ...n));\n        return ot(r), new Sn(t.firestore, \n        /* converter= */ null, r);\n    }\n}\n\n// TODO(firestorelite): Consider using ErrorFactory -\n// https://github.com/firebase/firebase-js-sdk/blob/0131e1f/packages/util/src/errors.ts#L106\n/**\n * Creates and returns a new `Query` instance that includes all documents in the\n * database that are contained in a collection or subcollection with the\n * given `collectionId`.\n *\n * @param firestore - A reference to the root `Firestore` instance.\n * @param collectionId - Identifies the collections to query over. Every\n * collection or subcollection with this ID as the last segment of its path\n * will be included. Cannot contain a slash.\n * @returns The created `Query`.\n */ function On(t, e) {\n    if (t = ct(t, Tn), st(\"collectionGroup\", \"collection id\", e), e.indexOf(\"/\") >= 0) throw new U(P, `Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);\n    return new xn(t, \n    /* converter= */ null, function(t) {\n        return new Ae(tt.emptyPath(), t);\n    }(e));\n}\n\nfunction kn(t, e, ...n) {\n    if (t = l(t), \n    // We allow omission of 'pathString' but explicitly prohibit passing in both\n    // 'undefined' and 'null'.\n    1 === arguments.length && (e = At.F()), st(\"doc\", \"path\", e), t instanceof Tn) {\n        const r = tt.fromString(e, ...n);\n        return it(r), new Fn(t, \n        /* converter= */ null, new rt(r));\n    }\n    {\n        if (!(t instanceof Fn || t instanceof Sn)) throw new U(P, \"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore\");\n        const r = t._path.child(tt.fromString(e, ...n));\n        return it(r), new Fn(t.firestore, t instanceof Sn ? t.converter : null, new rt(r));\n    }\n}\n\n/**\n * Returns true if the provided references are equal.\n *\n * @param left - A reference to compare.\n * @param right - A reference to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function Cn(t, e) {\n    return t = l(t), e = l(e), (t instanceof Fn || t instanceof Sn) && (e instanceof Fn || e instanceof Sn) && (t.firestore === e.firestore && t.path === e.path && t.converter === e.converter);\n}\n\n/**\n * Returns true if the provided queries point to the same collection and apply\n * the same constraints.\n *\n * @param left - A `Query` to compare.\n * @param right - A `Query` to compare.\n * @returns true if the references point to the same location in the same\n * Firestore database.\n */ function Ln(t, e) {\n    return t = l(t), e = l(e), t instanceof xn && e instanceof xn && (t.firestore === e.firestore && De(t._query, e._query) && t.converter === e.converter);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing an array of bytes.\n */ class Mn {\n    /** @hideconstructor */\n    constructor(t) {\n        this._byteString = t;\n    }\n    /**\n     * Creates a new `Bytes` object from the given Base64 string, converting it to\n     * bytes.\n     *\n     * @param base64 - The Base64 string used to create the `Bytes` object.\n     */    static fromBase64String(t) {\n        try {\n            return new Mn($t.fromBase64String(t));\n        } catch (t) {\n            throw new U(P, \"Failed to construct data from Base64 string: \" + t);\n        }\n    }\n    /**\n     * Creates a new `Bytes` object from the given Uint8Array.\n     *\n     * @param array - The Uint8Array used to create the `Bytes` object.\n     */    static fromUint8Array(t) {\n        return new Mn($t.fromUint8Array(t));\n    }\n    /**\n     * Returns the underlying bytes as a Base64-encoded string.\n     *\n     * @returns The Base64-encoded string created from the `Bytes` object.\n     */    toBase64() {\n        return this._byteString.toBase64();\n    }\n    /**\n     * Returns the underlying bytes in a new `Uint8Array`.\n     *\n     * @returns The Uint8Array created from the `Bytes` object.\n     */    toUint8Array() {\n        return this._byteString.toUint8Array();\n    }\n    /**\n     * Returns a string representation of the `Bytes` object.\n     *\n     * @returns A string representation of the `Bytes` object.\n     */    toString() {\n        return \"Bytes(base64: \" + this.toBase64() + \")\";\n    }\n    /**\n     * Returns true if this `Bytes` object is equal to the provided one.\n     *\n     * @param other - The `Bytes` object to compare against.\n     * @returns true if this `Bytes` object is equal to the provided one.\n     */    isEqual(t) {\n        return this._byteString.isEqual(t._byteString);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `FieldPath` refers to a field in a document. The path may consist of a\n * single field name (referring to a top-level field in the document), or a\n * list of field names (referring to a nested field in the document).\n *\n * Create a `FieldPath` by providing field names. If more than one field\n * name is provided, the path will point to a nested field in a document.\n */ class Un {\n    /**\n     * Creates a `FieldPath` from the provided field names. If more than one field\n     * name is provided, the path will point to a nested field in a document.\n     *\n     * @param fieldNames - A list of field names.\n     */\n    constructor(...t) {\n        for (let e = 0; e < t.length; ++e) if (0 === t[e].length) throw new U(P, \"Invalid field name at argument $(i + 1). Field names must not be empty.\");\n        this._internalPath = new nt(t);\n    }\n    /**\n     * Returns true if this `FieldPath` is equal to the provided one.\n     *\n     * @param other - The `FieldPath` to compare against.\n     * @returns true if this `FieldPath` is equal to the provided one.\n     */    isEqual(t) {\n        return this._internalPath.isEqual(t._internalPath);\n    }\n}\n\n/**\n * Returns a special sentinel `FieldPath` to refer to the ID of a document.\n * It can be used in queries to sort or filter by the document ID.\n */ function jn() {\n    return new Un(\"__name__\");\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Sentinel values that can be used when writing document fields with `set()`\n * or `update()`.\n */ class Bn {\n    /**\n     * @param _methodName - The public API endpoint that returns this class.\n     * @hideconstructor\n     */\n    constructor(t) {\n        this._methodName = t;\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An immutable object representing a geographic location in Firestore. The\n * location is represented as latitude/longitude pair.\n *\n * Latitude values are in the range of [-90, 90].\n * Longitude values are in the range of [-180, 180].\n */ class zn {\n    /**\n     * Creates a new immutable `GeoPoint` object with the provided latitude and\n     * longitude values.\n     * @param latitude - The latitude as number between -90 and 90.\n     * @param longitude - The longitude as number between -180 and 180.\n     */\n    constructor(t, e) {\n        if (!isFinite(t) || t < -90 || t > 90) throw new U(P, \"Latitude must be a number between -90 and 90, but was: \" + t);\n        if (!isFinite(e) || e < -180 || e > 180) throw new U(P, \"Longitude must be a number between -180 and 180, but was: \" + e);\n        this._lat = t, this._long = e;\n    }\n    /**\n     * The latitude of this `GeoPoint` instance.\n     */    get latitude() {\n        return this._lat;\n    }\n    /**\n     * The longitude of this `GeoPoint` instance.\n     */    get longitude() {\n        return this._long;\n    }\n    /**\n     * Returns true if this `GeoPoint` is equal to the provided one.\n     *\n     * @param other - The `GeoPoint` to compare against.\n     * @returns true if this `GeoPoint` is equal to the provided one.\n     */    isEqual(t) {\n        return this._lat === t._lat && this._long === t._long;\n    }\n    /** Returns a JSON-serializable representation of this GeoPoint. */    toJSON() {\n        return {\n            latitude: this._lat,\n            longitude: this._long\n        };\n    }\n    /**\n     * Actually private to JS consumers of our API, so this function is prefixed\n     * with an underscore.\n     */    _compareTo(t) {\n        return It(this._lat, t._lat) || It(this._long, t._long);\n    }\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const Qn = /^__.*__$/;\n\n/** The result of parsing document data (e.g. for a setData call). */ class Wn {\n    constructor(t, e, n) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n    }\n    toMutation(t, e) {\n        return null !== this.fieldMask ? new Ue(t, this.data, this.fieldMask, e, this.fieldTransforms) : new Me(t, this.data, e, this.fieldTransforms);\n    }\n}\n\n/** The result of parsing \"update\" data (i.e. for an updateData call). */ class Gn {\n    constructor(t, \n    // The fieldMask does not include document transforms.\n    e, n) {\n        this.data = t, this.fieldMask = e, this.fieldTransforms = n;\n    }\n    toMutation(t, e) {\n        return new Ue(t, this.data, this.fieldMask, e, this.fieldTransforms);\n    }\n}\n\nfunction Kn(t) {\n    switch (t) {\n      case 0 /* UserDataSource.Set */ :\n // fall through\n              case 2 /* UserDataSource.MergeSet */ :\n // fall through\n              case 1 /* UserDataSource.Update */ :\n        return !0;\n\n      case 3 /* UserDataSource.Argument */ :\n      case 4 /* UserDataSource.ArrayArgument */ :\n        return !1;\n\n      default:\n        throw b();\n    }\n}\n\n/** A \"context\" object passed around while parsing user data. */ class Yn {\n    /**\n     * Initializes a ParseContext with the given source and path.\n     *\n     * @param settings - The settings for the parser.\n     * @param databaseId - The database ID of the Firestore instance.\n     * @param serializer - The serializer to use to generate the Value proto.\n     * @param ignoreUndefinedProperties - Whether to ignore undefined properties\n     * rather than throw.\n     * @param fieldTransforms - A mutable list of field transforms encountered\n     * while parsing the data.\n     * @param fieldMask - A mutable list of field paths encountered while parsing\n     * the data.\n     *\n     * TODO(b/34871131): We don't support array paths right now, so path can be\n     * null to indicate the context represents any location within an array (in\n     * which case certain features will not work and errors will be somewhat\n     * compromised).\n     */\n    constructor(t, e, n, r, s, i) {\n        this.settings = t, this.databaseId = e, this.M = n, this.ignoreUndefinedProperties = r, \n        // Minor hack: If fieldTransforms is undefined, we assume this is an\n        // external call and we need to validate the entire path.\n        void 0 === s && this.rt(), this.fieldTransforms = s || [], this.fieldMask = i || [];\n    }\n    get path() {\n        return this.settings.path;\n    }\n    get st() {\n        return this.settings.st;\n    }\n    /** Returns a new context with the specified settings overwritten. */    it(t) {\n        return new Yn(Object.assign(Object.assign({}, this.settings), t), this.databaseId, this.M, this.ignoreUndefinedProperties, this.fieldTransforms, this.fieldMask);\n    }\n    ot(t) {\n        var e;\n        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.it({\n            path: n,\n            ut: !1\n        });\n        return r.ct(t), r;\n    }\n    at(t) {\n        var e;\n        const n = null === (e = this.path) || void 0 === e ? void 0 : e.child(t), r = this.it({\n            path: n,\n            ut: !1\n        });\n        return r.rt(), r;\n    }\n    ht(t) {\n        // TODO(b/34871131): We don't support array paths right now; so make path\n        // undefined.\n        return this.it({\n            path: void 0,\n            ut: !0\n        });\n    }\n    lt(t) {\n        return mr(t, this.settings.methodName, this.settings.ft || !1, this.path, this.settings.dt);\n    }\n    /** Returns 'true' if 'fieldPath' was traversed when creating this context. */    contains(t) {\n        return void 0 !== this.fieldMask.find((e => t.isPrefixOf(e))) || void 0 !== this.fieldTransforms.find((e => t.isPrefixOf(e.field)));\n    }\n    rt() {\n        // TODO(b/34871131): Remove null check once we have proper paths for fields\n        // within arrays.\n        if (this.path) for (let t = 0; t < this.path.length; t++) this.ct(this.path.get(t));\n    }\n    ct(t) {\n        if (0 === t.length) throw this.lt(\"Document fields must not be empty\");\n        if (Kn(this.st) && Qn.test(t)) throw this.lt('Document fields cannot begin and end with \"__\"');\n    }\n}\n\n/**\n * Helper for parsing raw user input (provided via the API) into internal model\n * classes.\n */ class Hn {\n    constructor(t, e, n) {\n        this.databaseId = t, this.ignoreUndefinedProperties = e, this.M = n || mn(t);\n    }\n    /** Creates a new top-level parse context. */    wt(t, e, n, r = !1) {\n        return new Yn({\n            st: t,\n            methodName: e,\n            dt: n,\n            path: nt.emptyPath(),\n            ut: !1,\n            ft: r\n        }, this.databaseId, this.M, this.ignoreUndefinedProperties);\n    }\n}\n\nfunction Zn(t) {\n    const e = t._freezeSettings(), n = mn(t._databaseId);\n    return new Hn(t._databaseId, !!e.ignoreUndefinedProperties, n);\n}\n\n/** Parse document data from a set() call. */ function Jn(t, e, n, r, s, i = {}) {\n    const o = t.wt(i.merge || i.mergeFields ? 2 /* UserDataSource.MergeSet */ : 0 /* UserDataSource.Set */ , e, n, s);\n    lr(\"Data must be an object, but it was:\", o, r);\n    const u = ar(r, o);\n    let c, a;\n    if (i.merge) c = new ge(o.fieldMask), a = o.fieldTransforms; else if (i.mergeFields) {\n        const t = [];\n        for (const r of i.mergeFields) {\n            const s = fr(e, r, n);\n            if (!o.contains(s)) throw new U(P, `Field '${s}' is specified in your field mask but missing from your input data.`);\n            pr(t, s) || t.push(s);\n        }\n        c = new ge(t), a = o.fieldTransforms.filter((t => c.covers(t.field)));\n    } else c = null, a = o.fieldTransforms;\n    return new Wn(new _e(u), c, a);\n}\n\nclass Xn extends Bn {\n    _toFieldTransform(t) {\n        if (2 /* UserDataSource.MergeSet */ !== t.st) throw 1 /* UserDataSource.Update */ === t.st ? t.lt(`${this._methodName}() can only appear at the top level of your update data`) : t.lt(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);\n        // No transform to add for a delete, but we need to add it to our\n        // fieldMask so it gets deleted.\n        return t.fieldMask.push(t.path), null;\n    }\n    isEqual(t) {\n        return t instanceof Xn;\n    }\n}\n\n/**\n * Creates a child context for parsing SerializableFieldValues.\n *\n * This is different than calling `ParseContext.contextWith` because it keeps\n * the fieldTransforms and fieldMask separate.\n *\n * The created context has its `dataSource` set to `UserDataSource.Argument`.\n * Although these values are used with writes, any elements in these FieldValues\n * are not considered writes since they cannot contain any FieldValue sentinels,\n * etc.\n *\n * @param fieldValue - The sentinel FieldValue for which to create a child\n *     context.\n * @param context - The parent context.\n * @param arrayElement - Whether or not the FieldValue has an array.\n */ function tr(t, e, n) {\n    return new Yn({\n        st: 3 /* UserDataSource.Argument */ ,\n        dt: e.settings.dt,\n        methodName: t._methodName,\n        ut: n\n    }, e.databaseId, e.M, e.ignoreUndefinedProperties);\n}\n\nclass er extends Bn {\n    _toFieldTransform(t) {\n        return new ke(t.path, new xe);\n    }\n    isEqual(t) {\n        return t instanceof er;\n    }\n}\n\nclass nr extends Bn {\n    constructor(t, e) {\n        super(t), this.yt = e;\n    }\n    _toFieldTransform(t) {\n        const e = tr(this, t, \n        /*array=*/ !0), n = this.yt.map((t => cr(t, e))), r = new Se(n);\n        return new ke(t.path, r);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\nclass rr extends Bn {\n    constructor(t, e) {\n        super(t), this.yt = e;\n    }\n    _toFieldTransform(t) {\n        const e = tr(this, t, \n        /*array=*/ !0), n = this.yt.map((t => cr(t, e))), r = new qe(n);\n        return new ke(t.path, r);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\nclass sr extends Bn {\n    constructor(t, e) {\n        super(t), this.gt = e;\n    }\n    _toFieldTransform(t) {\n        const e = new Oe(t.M, Ne(t.M, this.gt));\n        return new ke(t.path, e);\n    }\n    isEqual(t) {\n        // TODO(mrschmidt): Implement isEquals\n        return this === t;\n    }\n}\n\n/** Parse update data from an update() call. */ function ir(t, e, n, r) {\n    const s = t.wt(1 /* UserDataSource.Update */ , e, n);\n    lr(\"Data must be an object, but it was:\", s, r);\n    const i = [], o = _e.empty();\n    Pt(r, ((t, r) => {\n        const u = wr(e, t, n);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                r = l(r);\n        const c = s.at(u);\n        if (r instanceof Xn) \n        // Add it to the field mask, but don't add anything to updateData.\n        i.push(u); else {\n            const t = cr(r, c);\n            null != t && (i.push(u), o.set(u, t));\n        }\n    }));\n    const u = new ge(i);\n    return new Gn(o, u, s.fieldTransforms);\n}\n\n/** Parse update data from a list of field/value arguments. */ function or(t, e, n, r, s, i) {\n    const o = t.wt(1 /* UserDataSource.Update */ , e, n), u = [ fr(e, r, n) ], c = [ s ];\n    if (i.length % 2 != 0) throw new U(P, `Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);\n    for (let t = 0; t < i.length; t += 2) u.push(fr(e, i[t])), c.push(i[t + 1]);\n    const a = [], h = _e.empty();\n    // We iterate in reverse order to pick the last value for a field if the\n    // user specified the field multiple times.\n    for (let t = u.length - 1; t >= 0; --t) if (!pr(a, u[t])) {\n        const e = u[t];\n        let n = c[t];\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                n = l(n);\n        const r = o.at(e);\n        if (n instanceof Xn) \n        // Add it to the field mask, but don't add anything to updateData.\n        a.push(e); else {\n            const t = cr(n, r);\n            null != t && (a.push(e), h.set(e, t));\n        }\n    }\n    const f = new ge(a);\n    return new Gn(h, f, o.fieldTransforms);\n}\n\n/**\n * Parse a \"query value\" (e.g. value in a where filter or a value in a cursor\n * bound).\n *\n * @param allowArrays - Whether the query value is an array that may directly\n * contain additional arrays (e.g. the operand of an `in` query).\n */ function ur(t, e, n, r = !1) {\n    return cr(n, t.wt(r ? 4 /* UserDataSource.ArrayArgument */ : 3 /* UserDataSource.Argument */ , e));\n}\n\n/**\n * Parses user data to Protobuf Values.\n *\n * @param input - Data to be parsed.\n * @param context - A context object representing the current path being parsed,\n * the source of the data being parsed, etc.\n * @returns The parsed value, or null if the value was a FieldValue sentinel\n * that should not be included in the resulting parsed data.\n */ function cr(t, e) {\n    if (hr(\n    // Unwrap the API type from the Compat SDK. This will return the API type\n    // from firestore-exp.\n    t = l(t))) return lr(\"Unsupported field value:\", e, t), ar(t, e);\n    if (t instanceof Bn) \n    // FieldValues usually parse into transforms (except deleteField())\n    // in which case we do not want to include this field in our parsed data\n    // (as doing so will overwrite the field directly prior to the transform\n    // trying to transform it). So we don't add this location to\n    // context.fieldMask and we return null as our parsing result.\n    /**\n * \"Parses\" the provided FieldValueImpl, adding any necessary transforms to\n * context.fieldTransforms.\n */\n    return function(t, e) {\n        // Sentinels are only supported with writes, and not within arrays.\n        if (!Kn(e.st)) throw e.lt(`${t._methodName}() can only be used with update() and set()`);\n        if (!e.path) throw e.lt(`${t._methodName}() is not currently supported inside arrays`);\n        const n = t._toFieldTransform(e);\n        n && e.fieldTransforms.push(n);\n    }\n    /**\n * Helper to parse a scalar value (i.e. not an Object, Array, or FieldValue)\n *\n * @returns The parsed value\n */ (t, e), null;\n    if (void 0 === t && e.ignoreUndefinedProperties) \n    // If the input is undefined it can never participate in the fieldMask, so\n    // don't handle this below. If `ignoreUndefinedProperties` is false,\n    // `parseScalarValue` will reject an undefined value.\n    return null;\n    if (\n    // If context.path is null we are inside an array and we don't support\n    // field mask paths more granular than the top-level array.\n    e.path && e.fieldMask.push(e.path), t instanceof Array) {\n        // TODO(b/34871131): Include the path containing the array in the error\n        // message.\n        // In the case of IN queries, the parsed data is an array (representing\n        // the set of values to be included for the IN query) that may directly\n        // contain additional arrays (each representing an individual field\n        // value), so we disable this validation.\n        if (e.settings.ut && 4 /* UserDataSource.ArrayArgument */ !== e.st) throw e.lt(\"Nested arrays are not supported\");\n        return function(t, e) {\n            const n = [];\n            let r = 0;\n            for (const s of t) {\n                let t = cr(s, e.ht(r));\n                null == t && (\n                // Just include nulls in the array for fields being replaced with a\n                // sentinel.\n                t = {\n                    nullValue: \"NULL_VALUE\"\n                }), n.push(t), r++;\n            }\n            return {\n                arrayValue: {\n                    values: n\n                }\n            };\n        }(t, e);\n    }\n    return function(t, e) {\n        if (null === (t = l(t))) return {\n            nullValue: \"NULL_VALUE\"\n        };\n        if (\"number\" == typeof t) return Ne(e.M, t);\n        if (\"boolean\" == typeof t) return {\n            booleanValue: t\n        };\n        if (\"string\" == typeof t) return {\n            stringValue: t\n        };\n        if (t instanceof Date) {\n            const n = St.fromDate(t);\n            return {\n                timestampValue: Ke(e.M, n)\n            };\n        }\n        if (t instanceof St) {\n            // Firestore backend truncates precision down to microseconds. To ensure\n            // offline mode works the same with regards to truncation, perform the\n            // truncation immediately without waiting for the backend to do that.\n            const n = new St(t.seconds, 1e3 * Math.floor(t.nanoseconds / 1e3));\n            return {\n                timestampValue: Ke(e.M, n)\n            };\n        }\n        if (t instanceof zn) return {\n            geoPointValue: {\n                latitude: t.latitude,\n                longitude: t.longitude\n            }\n        };\n        if (t instanceof Mn) return {\n            bytesValue: Ye(e.M, t._byteString)\n        };\n        if (t instanceof Fn) {\n            const n = e.databaseId, r = t.firestore._databaseId;\n            if (!r.isEqual(n)) throw e.lt(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);\n            return {\n                referenceValue: Je(t.firestore._databaseId || e.databaseId, t._key.path)\n            };\n        }\n        throw e.lt(`Unsupported field value: ${ut(t)}`);\n    }\n    /**\n * Checks whether an object looks like a JSON object that should be converted\n * into a struct. Normal class/prototype instances are considered to look like\n * JSON objects since they should be converted to a struct value. Arrays, Dates,\n * GeoPoints, etc. are not considered to look like JSON objects since they map\n * to specific FieldValue types other than ObjectValue.\n */ (t, e);\n}\n\nfunction ar(t, e) {\n    const n = {};\n    return !function(t) {\n        for (const e in t) if (Object.prototype.hasOwnProperty.call(t, e)) return !1;\n        return !0;\n    }(t) ? Pt(t, ((t, r) => {\n        const s = cr(r, e.ot(t));\n        null != s && (n[t] = s);\n    })) : \n    // If we encounter an empty object, we explicitly add it to the update\n    // mask to ensure that the server creates a map entry.\n    e.path && e.path.length > 0 && e.fieldMask.push(e.path), {\n        mapValue: {\n            fields: n\n        }\n    };\n}\n\nfunction hr(t) {\n    return !(\"object\" != typeof t || null === t || t instanceof Array || t instanceof Date || t instanceof St || t instanceof zn || t instanceof Mn || t instanceof Fn || t instanceof Bn);\n}\n\nfunction lr(t, e, n) {\n    if (!hr(n) || !function(t) {\n        return \"object\" == typeof t && null !== t && (Object.getPrototypeOf(t) === Object.prototype || null === Object.getPrototypeOf(t));\n    }(n)) {\n        const r = ut(n);\n        throw \"an object\" === r ? e.lt(t + \" a custom object\") : e.lt(t + \" \" + r);\n    }\n}\n\n/**\n * Helper that calls fromDotSeparatedString() but wraps any error thrown.\n */ function fr(t, e, n) {\n    if ((\n    // If required, replace the FieldPath Compat class with with the firestore-exp\n    // FieldPath.\n    e = l(e)) instanceof Un) return e._internalPath;\n    if (\"string\" == typeof e) return wr(t, e);\n    throw mr(\"Field path arguments must be of type string or \", t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, n);\n}\n\n/**\n * Matches any characters in a field path string that are reserved.\n */ const dr = new RegExp(\"[~\\\\*/\\\\[\\\\]]\");\n\n/**\n * Wraps fromDotSeparatedString with an error message about the method that\n * was thrown.\n * @param methodName - The publicly visible method name\n * @param path - The dot-separated string form of a field path which will be\n * split on dots.\n * @param targetDoc - The document against which the field path will be\n * evaluated.\n */ function wr(t, e, n) {\n    if (e.search(dr) >= 0) throw mr(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`, t, \n    /* hasConverter= */ !1, \n    /* path= */ void 0, n);\n    try {\n        return new Un(...e.split(\".\"))._internalPath;\n    } catch (r) {\n        throw mr(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`, t, \n        /* hasConverter= */ !1, \n        /* path= */ void 0, n);\n    }\n}\n\nfunction mr(t, e, n, r, s) {\n    const i = r && !r.isEmpty(), o = void 0 !== s;\n    let u = `Function ${e}() called with invalid data`;\n    n && (u += \" (via `toFirestore()`)\"), u += \". \";\n    let c = \"\";\n    return (i || o) && (c += \" (found\", i && (c += ` in field ${r}`), o && (c += ` in document ${s}`), \n    c += \")\"), new U(P, u + t + c);\n}\n\n/** Checks `haystack` if FieldPath `needle` is present. Runs in O(n). */ function pr(t, e) {\n    return t.some((t => t.isEqual(e)));\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A `DocumentSnapshot` contains data read from a document in your Firestore\n * database. The data can be extracted with `.data()` or `.get(<field>)` to\n * get a specific field.\n *\n * For a `DocumentSnapshot` that points to a non-existing document, any data\n * access will return 'undefined'. You can use the `exists()` method to\n * explicitly verify a document's existence.\n */ class yr {\n    // Note: This class is stripped down version of the DocumentSnapshot in\n    // the legacy SDK. The changes are:\n    // - No support for SnapshotMetadata.\n    // - No support for SnapshotOptions.\n    /** @hideconstructor protected */\n    constructor(t, e, n, r, s) {\n        this._firestore = t, this._userDataWriter = e, this._key = n, this._document = r, \n        this._converter = s;\n    }\n    /** Property of the `DocumentSnapshot` that provides the document's ID. */    get id() {\n        return this._key.path.lastSegment();\n    }\n    /**\n     * The `DocumentReference` for the document included in the `DocumentSnapshot`.\n     */    get ref() {\n        return new Fn(this._firestore, this._converter, this._key);\n    }\n    /**\n     * Signals whether or not the document at the snapshot's location exists.\n     *\n     * @returns true if the document exists.\n     */    exists() {\n        return null !== this._document;\n    }\n    /**\n     * Retrieves all fields in the document as an `Object`. Returns `undefined` if\n     * the document doesn't exist.\n     *\n     * @returns An `Object` containing all fields in the document or `undefined`\n     * if the document doesn't exist.\n     */    data() {\n        if (this._document) {\n            if (this._converter) {\n                // We only want to use the converter and create a new DocumentSnapshot\n                // if a converter has been provided.\n                const t = new gr(this._firestore, this._userDataWriter, this._key, this._document, \n                /* converter= */ null);\n                return this._converter.fromFirestore(t);\n            }\n            return this._userDataWriter.convertValue(this._document.data.value);\n        }\n    }\n    /**\n     * Retrieves the field specified by `fieldPath`. Returns `undefined` if the\n     * document or field doesn't exist.\n     *\n     * @param fieldPath - The path (for example 'foo' or 'foo.bar') to a specific\n     * field.\n     * @returns The data at the specified field location or undefined if no such\n     * field exists in the document.\n     */\n    // We are using `any` here to avoid an explicit cast by our users.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    get(t) {\n        if (this._document) {\n            const e = this._document.data.field(br(\"DocumentSnapshot.get\", t));\n            if (null !== e) return this._userDataWriter.convertValue(e);\n        }\n    }\n}\n\n/**\n * A `QueryDocumentSnapshot` contains data read from a document in your\n * Firestore database as part of a query. The document is guaranteed to exist\n * and its data can be extracted with `.data()` or `.get(<field>)` to get a\n * specific field.\n *\n * A `QueryDocumentSnapshot` offers the same API surface as a\n * `DocumentSnapshot`. Since query results contain only existing documents, the\n * `exists` property will always be true and `data()` will never return\n * 'undefined'.\n */ class gr extends yr {\n    /**\n     * Retrieves all fields in the document as an `Object`.\n     *\n     * @override\n     * @returns An `Object` containing all fields in the document.\n     */\n    data() {\n        return super.data();\n    }\n}\n\n/**\n * A `QuerySnapshot` contains zero or more `DocumentSnapshot` objects\n * representing the results of a query. The documents can be accessed as an\n * array via the `docs` property or enumerated using the `forEach` method. The\n * number of documents can be determined via the `empty` and `size`\n * properties.\n */ class _r {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._docs = e, this.query = t;\n    }\n    /** An array of all the documents in the `QuerySnapshot`. */    get docs() {\n        return [ ...this._docs ];\n    }\n    /** The number of documents in the `QuerySnapshot`. */    get size() {\n        return this.docs.length;\n    }\n    /** True if there are no documents in the `QuerySnapshot`. */    get empty() {\n        return 0 === this.docs.length;\n    }\n    /**\n     * Enumerates all of the documents in the `QuerySnapshot`.\n     *\n     * @param callback - A callback to be called with a `QueryDocumentSnapshot` for\n     * each document in the snapshot.\n     * @param thisArg - The `this` binding for the callback.\n     */    forEach(t, e) {\n        this._docs.forEach(t, e);\n    }\n}\n\n/**\n * Returns true if the provided snapshots are equal.\n *\n * @param left - A snapshot to compare.\n * @param right - A snapshot to compare.\n * @returns true if the snapshots are equal.\n */ function vr(t, e) {\n    return t = l(t), e = l(e), t instanceof yr && e instanceof yr ? t._firestore === e._firestore && t._key.isEqual(e._key) && (null === t._document ? null === e._document : t._document.isEqual(e._document)) && t._converter === e._converter : t instanceof _r && e instanceof _r && (Ln(t.query, e.query) && Tt(t.docs, e.docs, vr));\n}\n\n/**\n * Helper that calls `fromDotSeparatedString()` but wraps any error thrown.\n */ function br(t, e) {\n    return \"string\" == typeof e ? wr(t, e) : e instanceof Un ? e._internalPath : e._delegate._internalPath;\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * An `AppliableConstraint` is an abstraction of a constraint that can be applied\n * to a Firestore query.\n */\nclass Er {}\n\n/**\n * A `QueryConstraint` is used to narrow the set of documents returned by a\n * Firestore query. `QueryConstraint`s are created by invoking {@link where},\n * {@link orderBy}, {@link (startAt:1)}, {@link (startAfter:1)}, {@link\n * (endBefore:1)}, {@link (endAt:1)}, {@link limit}, {@link limitToLast} and\n * can then be passed to {@link (query:1)} to create a new query instance that\n * also contains this `QueryConstraint`.\n */ class Ar extends Er {}\n\nfunction Ir(t, e, ...n) {\n    let r = [];\n    e instanceof Er && r.push(e), r = r.concat(n), function(t) {\n        const e = t.filter((t => t instanceof Pr)).length, n = t.filter((t => t instanceof Tr)).length;\n        if (e > 1 || e > 0 && n > 0) throw new U(P, \"InvalidQuery. When using composite filters, you cannot use more than one filter at the top level. Consider nesting the multiple filters within an `and(...)` statement. For example: change `query(query, where(...), or(...))` to `query(query, and(where(...), or(...)))`.\");\n    }\n    /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n    /**\n * Converts Firestore's internal types to the JavaScript types that we expose\n * to the user.\n *\n * @internal\n */ (r);\n    for (const e of r) t = e._apply(t);\n    return t;\n}\n\n/**\n * A `QueryFieldFilterConstraint` is used to narrow the set of documents returned by\n * a Firestore query by filtering on one or more document fields.\n * `QueryFieldFilterConstraint`s are created by invoking {@link where} and can then\n * be passed to {@link (query:1)} to create a new query instance that also contains\n * this `QueryFieldFilterConstraint`.\n */ class Tr extends Ar {\n    /**\n     * @internal\n     */\n    constructor(t, e, n) {\n        super(), this._field = t, this._op = e, this._value = n, \n        /** The type of this query constraint */\n        this.type = \"where\";\n    }\n    static _create(t, e, n) {\n        return new Tr(t, e, n);\n    }\n    _apply(t) {\n        const e = this._parse(t);\n        return zr(t._query, e), new xn(t.firestore, t.converter, $e(t._query, e));\n    }\n    _parse(t) {\n        const e = Zn(t.firestore), n = function(t, e, n, r, s, i, o) {\n            let u;\n            if (s.isKeyField()) {\n                if (\"array-contains\" /* Operator.ARRAY_CONTAINS */ === i || \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ === i) throw new U(P, `Invalid Query. You can't perform '${i}' queries on documentId().`);\n                if (\"in\" /* Operator.IN */ === i || \"not-in\" /* Operator.NOT_IN */ === i) {\n                    Br(o, i);\n                    const e = [];\n                    for (const n of o) e.push(jr(r, t, n));\n                    u = {\n                        arrayValue: {\n                            values: e\n                        }\n                    };\n                } else u = jr(r, t, o);\n            } else \"in\" /* Operator.IN */ !== i && \"not-in\" /* Operator.NOT_IN */ !== i && \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ !== i || Br(o, i), \n            u = ur(n, e, o, \n            /* allowArrays= */ \"in\" /* Operator.IN */ === i || \"not-in\" /* Operator.NOT_IN */ === i);\n            return Xt.create(s, i, u);\n        }(t._query, \"where\", e, t.firestore._databaseId, this._field, this._op, this._value);\n        return n;\n    }\n}\n\n/**\n * Creates a {@link QueryFieldFilterConstraint} that enforces that documents\n * must contain the specified field and that the value should satisfy the\n * relation constraint provided.\n *\n * @param fieldPath - The path to compare\n * @param opStr - The operation string (e.g \"&lt;\", \"&lt;=\", \"==\", \"&lt;\",\n *   \"&lt;=\", \"!=\").\n * @param value - The value for comparison\n * @returns The created {@link QueryFieldFilterConstraint}.\n */ function Rr(t, e, n) {\n    const r = e, s = br(\"where\", t);\n    return Tr._create(s, r, n);\n}\n\n/**\n * A `QueryCompositeFilterConstraint` is used to narrow the set of documents\n * returned by a Firestore query by performing the logical OR or AND of multiple\n * {@link QueryFieldFilterConstraint}s or {@link QueryCompositeFilterConstraint}s.\n * `QueryCompositeFilterConstraint`s are created by invoking {@link or} or\n * {@link and} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains the `QueryCompositeFilterConstraint`.\n */ class Pr extends Er {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e) {\n        super(), this.type = t, this._queryConstraints = e;\n    }\n    static _create(t, e) {\n        return new Pr(t, e);\n    }\n    _parse(t) {\n        const e = this._queryConstraints.map((e => e._parse(t))).filter((t => t.getFilters().length > 0));\n        return 1 === e.length ? e[0] : te.create(e, this._getOperator());\n    }\n    _apply(t) {\n        const e = this._parse(t);\n        return 0 === e.getFilters().length ? t : (function(t, e) {\n            let n = t;\n            const r = e.getFlattenedFilters();\n            for (const t of r) zr(n, t), n = $e(n, t);\n        }\n        // Checks if any of the provided filter operators are included in the given list of filters and\n        // returns the first one that is, or null if none are.\n        (t._query, e), new xn(t.firestore, t.converter, $e(t._query, e)));\n    }\n    _getQueryConstraints() {\n        return this._queryConstraints;\n    }\n    _getOperator() {\n        return \"and\" === this.type ? \"and\" /* CompositeOperator.AND */ : \"or\" /* CompositeOperator.OR */;\n    }\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a disjunction of\n * the given filter constraints. A disjunction filter includes a document if it\n * satisfies any of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a disjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */ function Vr(...t) {\n    // Only support QueryFilterConstraints\n    return t.forEach((t => Wr(\"or\", t))), Pr._create(\"or\" /* CompositeOperator.OR */ , t);\n}\n\n/**\n * Creates a new {@link QueryCompositeFilterConstraint} that is a conjunction of\n * the given filter constraints. A conjunction filter includes a document if it\n * satisfies all of the given filters.\n *\n * @param queryConstraints - Optional. The list of\n * {@link QueryFilterConstraint}s to perform a conjunction for. These must be\n * created with calls to {@link where}, {@link or}, or {@link and}.\n * @returns The newly created {@link QueryCompositeFilterConstraint}.\n */ function $r(...t) {\n    // Only support QueryFilterConstraints\n    return t.forEach((t => Wr(\"and\", t))), Pr._create(\"and\" /* CompositeOperator.AND */ , t);\n}\n\n/**\n * A `QueryOrderByConstraint` is used to sort the set of documents returned by a\n * Firestore query. `QueryOrderByConstraint`s are created by invoking\n * {@link orderBy} and can then be passed to {@link (query:1)} to create a new query\n * instance that also contains this `QueryOrderByConstraint`.\n *\n * Note: Documents that do not contain the orderBy field will not be present in\n * the query result.\n */ class Dr extends Ar {\n    /**\n     * @internal\n     */\n    constructor(t, e) {\n        super(), this._field = t, this._direction = e, \n        /** The type of this query constraint */\n        this.type = \"orderBy\";\n    }\n    static _create(t, e) {\n        return new Dr(t, e);\n    }\n    _apply(t) {\n        const e = function(t, e, n) {\n            if (null !== t.startAt) throw new U(P, \"Invalid query. You must not call startAt() or startAfter() before calling orderBy().\");\n            if (null !== t.endAt) throw new U(P, \"Invalid query. You must not call endAt() or endBefore() before calling orderBy().\");\n            const r = new he(e, n);\n            return function(t, e) {\n                if (null === Ie(t)) {\n                    // This is the first order by. It must match any inequality.\n                    const n = Te(t);\n                    null !== n && Qr(t, n, e.field);\n                }\n            }(t, r), r;\n        }\n        /**\n * Create a `Bound` from a query and a document.\n *\n * Note that the `Bound` will always include the key of the document\n * and so only the provided document will compare equal to the returned\n * position.\n *\n * Will throw if the document does not contain all fields of the order by\n * of the query or if any of the fields in the order by are an uncommitted\n * server timestamp.\n */ (t._query, this._field, this._direction);\n        return new xn(t.firestore, t.converter, function(t, e) {\n            // TODO(dimond): validate that orderBy does not list the same key twice.\n            const n = t.explicitOrderBy.concat([ e ]);\n            return new Ae(t.path, t.collectionGroup, n, t.filters.slice(), t.limit, t.limitType, t.startAt, t.endAt);\n        }(t._query, e));\n    }\n}\n\n/**\n * Creates a {@link QueryOrderByConstraint} that sorts the query result by the\n * specified field, optionally in descending order instead of ascending.\n *\n * Note: Documents that do not contain the specified field will not be present\n * in the query result.\n *\n * @param fieldPath - The field to sort by.\n * @param directionStr - Optional direction to sort by ('asc' or 'desc'). If\n * not specified, order will be ascending.\n * @returns The created {@link QueryOrderByConstraint}.\n */ function Nr(t, e = \"asc\") {\n    const n = e, r = br(\"orderBy\", t);\n    return Dr._create(r, n);\n}\n\n/**\n * A `QueryLimitConstraint` is used to limit the number of documents returned by\n * a Firestore query.\n * `QueryLimitConstraint`s are created by invoking {@link limit} or\n * {@link limitToLast} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryLimitConstraint`.\n */ class Fr extends Ar {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, n) {\n        super(), this.type = t, this._limit = e, this._limitType = n;\n    }\n    static _create(t, e, n) {\n        return new Fr(t, e, n);\n    }\n    _apply(t) {\n        return new xn(t.firestore, t.converter, function(t, e, n) {\n            return new Ae(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), e, n, t.startAt, t.endAt);\n        }(t._query, this._limit, this._limitType));\n    }\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the first matching\n * documents.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */ function xr(t) {\n    return at(\"limit\", t), Fr._create(\"limit\", t, \"F\" /* LimitType.First */);\n}\n\n/**\n * Creates a {@link QueryLimitConstraint} that only returns the last matching\n * documents.\n *\n * You must specify at least one `orderBy` clause for `limitToLast` queries,\n * otherwise an exception will be thrown during execution.\n *\n * @param limit - The maximum number of items to return.\n * @returns The created {@link QueryLimitConstraint}.\n */ function Sr(t) {\n    return at(\"limitToLast\", t), Fr._create(\"limitToLast\", t, \"L\" /* LimitType.Last */);\n}\n\n/**\n * A `QueryStartAtConstraint` is used to exclude documents from the start of a\n * result set returned by a Firestore query.\n * `QueryStartAtConstraint`s are created by invoking {@link (startAt:1)} or\n * {@link (startAfter:1)} and can then be passed to {@link (query:1)} to create a\n * new query instance that also contains this `QueryStartAtConstraint`.\n */ class qr extends Ar {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, n) {\n        super(), this.type = t, this._docOrFields = e, this._inclusive = n;\n    }\n    static _create(t, e, n) {\n        return new qr(t, e, n);\n    }\n    _apply(t) {\n        const e = Ur(t, this.type, this._docOrFields, this._inclusive);\n        return new xn(t.firestore, t.converter, function(t, e) {\n            return new Ae(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, e, t.endAt);\n        }(t._query, e));\n    }\n}\n\nfunction Or(...t) {\n    return qr._create(\"startAt\", t, \n    /*inclusive=*/ !0);\n}\n\nfunction kr(...t) {\n    return qr._create(\"startAfter\", t, \n    /*inclusive=*/ !1);\n}\n\n/**\n * A `QueryEndAtConstraint` is used to exclude documents from the end of a\n * result set returned by a Firestore query.\n * `QueryEndAtConstraint`s are created by invoking {@link (endAt:1)} or\n * {@link (endBefore:1)} and can then be passed to {@link (query:1)} to create a new\n * query instance that also contains this `QueryEndAtConstraint`.\n */ class Cr extends Ar {\n    /**\n     * @internal\n     */\n    constructor(\n    /** The type of this query constraint */\n    t, e, n) {\n        super(), this.type = t, this._docOrFields = e, this._inclusive = n;\n    }\n    static _create(t, e, n) {\n        return new Cr(t, e, n);\n    }\n    _apply(t) {\n        const e = Ur(t, this.type, this._docOrFields, this._inclusive);\n        return new xn(t.firestore, t.converter, function(t, e) {\n            return new Ae(t.path, t.collectionGroup, t.explicitOrderBy.slice(), t.filters.slice(), t.limit, t.limitType, t.startAt, e);\n        }(t._query, e));\n    }\n}\n\nfunction Lr(...t) {\n    return Cr._create(\"endBefore\", t, \n    /*inclusive=*/ !1);\n}\n\nfunction Mr(...t) {\n    return Cr._create(\"endAt\", t, \n    /*inclusive=*/ !0);\n}\n\n/** Helper function to create a bound from a document or fields */ function Ur(t, e, n, r) {\n    if (n[0] = l(n[0]), n[0] instanceof yr) return function(t, e, n, r, s) {\n        if (!r) throw new U($, `Can't use a DocumentSnapshot that doesn't exist for ${n}().`);\n        const i = [];\n        // Because people expect to continue/end a query at the exact document\n        // provided, we need to use the implicit sort order rather than the explicit\n        // sort order, because it's guaranteed to contain the document key. That way\n        // the position becomes unambiguous and the query continues/ends exactly at\n        // the provided document. Without the key (by using the explicit sort\n        // orders), multiple documents could match the position, yielding duplicate\n        // results.\n                for (const n of Pe(t)) if (n.field.isKeyField()) i.push(zt(e, r.key)); else {\n            const t = r.data.field(n.field);\n            if (qt(t)) throw new U(P, 'Invalid query. You are trying to start or end a query using a document for which the field \"' + n.field + '\" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');\n            if (null === t) {\n                const t = n.field.canonicalString();\n                throw new U(P, `Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`);\n            }\n            i.push(t);\n        }\n        return new Ht(i, s);\n    }\n    /**\n * Converts a list of field values to a `Bound` for the given query.\n */ (t._query, t.firestore._databaseId, e, n[0]._document, r);\n    {\n        const s = Zn(t.firestore);\n        return function(t, e, n, r, s, i) {\n            // Use explicit order by's because it has to match the query the user made\n            const o = t.explicitOrderBy;\n            if (s.length > o.length) throw new U(P, `Too many arguments provided to ${r}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);\n            const u = [];\n            for (let i = 0; i < s.length; i++) {\n                const c = s[i];\n                if (o[i].field.isKeyField()) {\n                    if (\"string\" != typeof c) throw new U(P, `Invalid query. Expected a string for document ID in ${r}(), but got a ${typeof c}`);\n                    if (!Re(t) && -1 !== c.indexOf(\"/\")) throw new U(P, `Invalid query. When querying a collection and ordering by documentId(), the value passed to ${r}() must be a plain document ID, but '${c}' contains a slash.`);\n                    const n = t.path.child(tt.fromString(c));\n                    if (!rt.isDocumentKey(n)) throw new U(P, `Invalid query. When querying a collection group and ordering by documentId(), the value passed to ${r}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);\n                    const s = new rt(n);\n                    u.push(zt(e, s));\n                } else {\n                    const t = ur(n, r, c);\n                    u.push(t);\n                }\n            }\n            return new Ht(u, i);\n        }\n        /**\n * Parses the given `documentIdValue` into a `ReferenceValue`, throwing\n * appropriate errors if the value is anything other than a `DocumentReference`\n * or `string`, or if the string is malformed.\n */ (t._query, t.firestore._databaseId, s, e, n, r);\n    }\n}\n\nfunction jr(t, e, n) {\n    if (\"string\" == typeof (n = l(n))) {\n        if (\"\" === n) throw new U(P, \"Invalid query. When querying with documentId(), you must provide a valid document ID, but it was an empty string.\");\n        if (!Re(e) && -1 !== n.indexOf(\"/\")) throw new U(P, `Invalid query. When querying a collection by documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);\n        const r = e.path.child(tt.fromString(n));\n        if (!rt.isDocumentKey(r)) throw new U(P, `Invalid query. When querying a collection group by documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);\n        return zt(t, new rt(r));\n    }\n    if (n instanceof Fn) return zt(t, n._key);\n    throw new U(P, `Invalid query. When querying with documentId(), you must provide a valid string or a DocumentReference, but it was: ${ut(n)}.`);\n}\n\n/**\n * Validates that the value passed into a disjunctive filter satisfies all\n * array requirements.\n */ function Br(t, e) {\n    if (!Array.isArray(t) || 0 === t.length) throw new U(P, `Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);\n}\n\n/**\n * Given an operator, returns the set of operators that cannot be used with it.\n *\n * This is not a comprehensive check, and this function should be removed in the\n * long term. Validations should occur in the Firestore backend.\n *\n * Operators in a query must adhere to the following set of rules:\n * 1. Only one inequality per query.\n * 2. `NOT_IN` cannot be used with array, disjunctive, or `NOT_EQUAL` operators.\n */ function zr(t, e) {\n    if (e.isInequality()) {\n        const n = Te(t), r = e.field;\n        if (null !== n && !n.isEqual(r)) throw new U(P, `Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${r.toString()}'`);\n        const s = Ie(t);\n        null !== s && Qr(t, r, s);\n    }\n    const n = function(t, e) {\n        for (const n of t) for (const t of n.getFlattenedFilters()) if (e.indexOf(t.op) >= 0) return t.op;\n        return null;\n    }(t.filters, function(t) {\n        switch (t) {\n          case \"!=\" /* Operator.NOT_EQUAL */ :\n            return [ \"!=\" /* Operator.NOT_EQUAL */ , \"not-in\" /* Operator.NOT_IN */ ];\n\n          case \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ :\n          case \"in\" /* Operator.IN */ :\n            return [ \"not-in\" /* Operator.NOT_IN */ ];\n\n          case \"not-in\" /* Operator.NOT_IN */ :\n            return [ \"array-contains-any\" /* Operator.ARRAY_CONTAINS_ANY */ , \"in\" /* Operator.IN */ , \"not-in\" /* Operator.NOT_IN */ , \"!=\" /* Operator.NOT_EQUAL */ ];\n\n          default:\n            return [];\n        }\n    }(e.op));\n    if (null !== n) \n    // Special case when it's a duplicate op to give a slightly clearer error message.\n    throw n === e.op ? new U(P, `Invalid query. You cannot use more than one '${e.op.toString()}' filter.`) : new U(P, `Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`);\n}\n\nfunction Qr(t, e, n) {\n    if (!n.isEqual(e)) throw new U(P, `Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`);\n}\n\nfunction Wr(t, e) {\n    if (!(e instanceof Tr || e instanceof Pr)) throw new U(P, `Function ${t}() requires AppliableConstraints created with a call to 'where(...)', 'or(...)', or 'and(...)'.`);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Converts custom model object of type T into `DocumentData` by applying the\n * converter if it exists.\n *\n * This function is used when converting user objects to `DocumentData`\n * because we want to provide the user with a more specific error message if\n * their `set()` or fails due to invalid data originating from a `toFirestore()`\n * call.\n */\nfunction Gr(t, e, n) {\n    let r;\n    // Cast to `any` in order to satisfy the union type constraint on\n    // toFirestore().\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return r = t ? n && (n.merge || n.mergeFields) ? t.toFirestore(e, n) : t.toFirestore(e) : e, \n    r;\n}\n\nclass Kr extends class {\n    convertValue(t, e = \"none\") {\n        switch (Lt(t)) {\n          case 0 /* TypeOrder.NullValue */ :\n            return null;\n\n          case 1 /* TypeOrder.BooleanValue */ :\n            return t.booleanValue;\n\n          case 2 /* TypeOrder.NumberValue */ :\n            return Ft(t.integerValue || t.doubleValue);\n\n          case 3 /* TypeOrder.TimestampValue */ :\n            return this.convertTimestamp(t.timestampValue);\n\n          case 4 /* TypeOrder.ServerTimestampValue */ :\n            return this.convertServerTimestamp(t, e);\n\n          case 5 /* TypeOrder.StringValue */ :\n            return t.stringValue;\n\n          case 6 /* TypeOrder.BlobValue */ :\n            return this.convertBytes(xt(t.bytesValue));\n\n          case 7 /* TypeOrder.RefValue */ :\n            return this.convertReference(t.referenceValue);\n\n          case 8 /* TypeOrder.GeoPointValue */ :\n            return this.convertGeoPoint(t.geoPointValue);\n\n          case 9 /* TypeOrder.ArrayValue */ :\n            return this.convertArray(t.arrayValue, e);\n\n          case 10 /* TypeOrder.ObjectValue */ :\n            return this.convertObject(t.mapValue, e);\n\n          default:\n            throw b();\n        }\n    }\n    convertObject(t, e) {\n        const n = {};\n        return Pt(t.fields, ((t, r) => {\n            n[t] = this.convertValue(r, e);\n        })), n;\n    }\n    convertGeoPoint(t) {\n        return new zn(Ft(t.latitude), Ft(t.longitude));\n    }\n    convertArray(t, e) {\n        return (t.values || []).map((t => this.convertValue(t, e)));\n    }\n    convertServerTimestamp(t, e) {\n        switch (e) {\n          case \"previous\":\n            const n = Ot(t);\n            return null == n ? null : this.convertValue(n, e);\n\n          case \"estimate\":\n            return this.convertTimestamp(kt(t));\n\n          default:\n            return null;\n        }\n    }\n    convertTimestamp(t) {\n        const e = Nt(t);\n        return new St(e.seconds, e.nanos);\n    }\n    convertDocumentKey(t, e) {\n        const n = tt.fromString(t);\n        E(wn(n));\n        const r = new J(n.get(1), n.get(3)), s = new rt(n.popFirst(5));\n        return r.isEqual(e) || \n        // TODO(b/64130202): Somehow support foreign references.\n        g(`Document ${s} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`), \n        s;\n    }\n} {\n    constructor(t) {\n        super(), this.firestore = t;\n    }\n    convertBytes(t) {\n        return new Mn(t);\n    }\n    convertReference(t) {\n        const e = this.convertDocumentKey(t, this.firestore._databaseId);\n        return new Fn(this.firestore, /* converter= */ null, e);\n    }\n}\n\n/**\n * Reads the document referred to by the specified document reference.\n *\n * All documents are directly fetched from the server, even if the document was\n * previously read or modified. Recent modifications are only reflected in the\n * retrieved `DocumentSnapshot` if they have already been applied by the\n * backend. If the client is offline, the read fails. If you like to use\n * caching or see local modifications, please use the full Firestore SDK.\n *\n * @param reference - The reference of the document to fetch.\n * @returns A Promise resolved with a `DocumentSnapshot` containing the current\n * document contents.\n */ function Yr(t) {\n    const e = An((t = ct(t, Fn)).firestore), n = new Kr(t.firestore);\n    return _n(e, [ t._key ]).then((e => {\n        E(1 === e.length);\n        const r = e[0];\n        return new yr(t.firestore, n, t._key, r.isFoundDocument() ? r : null, t.converter);\n    }));\n}\n\n/**\n * Executes the query and returns the results as a {@link QuerySnapshot}.\n *\n * All queries are executed directly by the server, even if the the query was\n * previously executed. Recent modifications are only reflected in the retrieved\n * results if they have already been applied by the backend. If the client is\n * offline, the operation fails. To see previously cached result and local\n * modifications, use the full Firestore SDK.\n *\n * @param query - The `Query` to execute.\n * @returns A Promise that will be resolved with the results of the query.\n */ function Hr(t) {\n    !function(t) {\n        if (\"L\" /* LimitType.Last */ === t.limitType && 0 === t.explicitOrderBy.length) throw new U(k, \"limitToLast() queries require specifying at least one orderBy() clause\");\n    }((t = ct(t, xn))._query);\n    const e = An(t.firestore), n = new Kr(t.firestore);\n    return vn(e, t._query).then((e => {\n        const r = e.map((e => new gr(t.firestore, n, e.key, e, t.converter)));\n        return \"L\" /* LimitType.Last */ === t._query.limitType && \n        // Limit to last queries reverse the orderBy constraint that was\n        // specified by the user. As such, we need to reverse the order of the\n        // results to return the documents in the expected order.\n        r.reverse(), new _r(t, r);\n    }));\n}\n\nfunction Zr(t, e, n) {\n    const r = Gr((t = ct(t, Fn)).converter, e, n), s = Jn(Zn(t.firestore), \"setDoc\", t._key, r, null !== t.converter, n);\n    return gn(An(t.firestore), [ s.toMutation(t._key, Ce.none()) ]);\n}\n\nfunction Jr(t, e, n, ...r) {\n    const s = Zn((t = ct(t, Fn)).firestore);\n    // For Compat types, we have to \"extract\" the underlying types before\n    // performing validation.\n        let i;\n    i = \"string\" == typeof (e = l(e)) || e instanceof Un ? or(s, \"updateDoc\", t._key, e, n, r) : ir(s, \"updateDoc\", t._key, e);\n    return gn(An(t.firestore), [ i.toMutation(t._key, Ce.exists(!0)) ]);\n}\n\n/**\n * Deletes the document referred to by the specified `DocumentReference`.\n *\n * The deletion will only be reflected in document reads that occur after the\n * returned promise resolves. If the client is offline, the\n * delete fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the document to delete.\n * @returns A `Promise` resolved once the document has been successfully\n * deleted from the backend.\n */ function Xr(t) {\n    return gn(An((t = ct(t, Fn)).firestore), [ new je(t._key, Ce.none()) ]);\n}\n\n/**\n * Add a new document to specified `CollectionReference` with the given data,\n * assigning it a document ID automatically.\n *\n * The result of this write will only be reflected in document reads that occur\n * after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @param reference - A reference to the collection to add this document to.\n * @param data - An Object containing the data for the new document.\n * @throws Error - If the provided input is not a valid Firestore document.\n * @returns A `Promise` resolved with a `DocumentReference` pointing to the\n * newly created document after it has been written to the backend.\n */ function ts(t, e) {\n    const n = kn(t = ct(t, Sn)), r = Gr(t.converter, e), s = Jn(Zn(t.firestore), \"addDoc\", n._key, r, null !== n.converter, {});\n    return gn(An(t.firestore), [ s.toMutation(n._key, Ce.exists(!1)) ]).then((() => n));\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Calculates the number of documents in the result set of the given query,\n * without actually downloading the documents.\n *\n * Using this function to count the documents is efficient because only the\n * final count, not the documents' data, is downloaded. This function can even\n * count the documents if the result set would be prohibitively large to\n * download entirely (e.g. thousands of documents).\n *\n * @param query - The query whose result set size to calculate.\n * @returns A Promise that will be resolved with the count; the count can be\n * retrieved from `snapshot.data().count`, where `snapshot` is the\n * `AggregateQuerySnapshot` to which the returned Promise resolves.\n */ function es(t) {\n    return ns(t, {\n        count: is()\n    });\n}\n\n/**\n * Calculates the specified aggregations over the documents in the result\n * set of the given query, without actually downloading the documents.\n *\n * Using this function to perform aggregations is efficient because only the\n * final aggregation values, not the documents' data, is downloaded. This\n * function can even perform aggregations of the documents if the result set\n * would be prohibitively large to download entirely (e.g. thousands of documents).\n *\n * @param query The query whose result set to aggregate over.\n * @param aggregateSpec An `AggregateSpec` object that specifies the aggregates\n * to perform over the result set. The AggregateSpec specifies aliases for each\n * aggregate, which can be used to retrieve the aggregate result.\n * @example\n * ```typescript\n * const aggregateSnapshot = await getAggregate(query, {\n *   countOfDocs: count(),\n *   totalHours: sum('hours'),\n *   averageScore: average('score')\n * });\n *\n * const countOfDocs: number = aggregateSnapshot.data().countOfDocs;\n * const totalHours: number = aggregateSnapshot.data().totalHours;\n * const averageScore: number | null = aggregateSnapshot.data().averageScore;\n * ```\n * @internal TODO (sum/avg) remove when public\n */ function ns(t, e) {\n    const n = ct(t.firestore, Tn), r = An(n), s = function(t, e) {\n        const n = [];\n        for (const r in t) Object.prototype.hasOwnProperty.call(t, r) && n.push(e(t[r], r, t));\n        return n;\n    }(e, ((t, e) => new bt(new vt(e), t._aggregateType, t._internalFieldPath)));\n    // Run the aggregation and convert the results\n    return bn(r, t._query, s).then((e => function(t, e, n) {\n        const r = new Kr(t);\n        return new Nn(e, r, n);\n    }\n    /**\n * Create an AggregateField object that can be used to compute the sum of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to sum across the result set.\n * @internal TODO (sum/avg) remove when public\n */ (n, t, e)));\n}\n\nfunction rs(t) {\n    return new Dn(\"sum\", fr(\"sum\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the average of\n * a specified field over a range of documents in the result set of a query.\n * @param field Specifies the field to average across the result set.\n * @internal TODO (sum/avg) remove when public\n */ function ss(t) {\n    return new Dn(\"avg\", fr(\"average\", t));\n}\n\n/**\n * Create an AggregateField object that can be used to compute the count of\n * documents in the result set of a query.\n * @internal TODO (sum/avg) remove when public\n */ function is() {\n    return new Dn(\"count\");\n}\n\n/**\n * Compares two 'AggregateField` instances for equality.\n *\n * @param left Compare this AggregateField to the `right`.\n * @param right Compare this AggregateField to the `left`.\n * @internal TODO (sum/avg) remove when public\n */ function os(t, e) {\n    var n, r;\n    return t instanceof Dn && e instanceof Dn && t._aggregateType === e._aggregateType && (null === (n = t._internalFieldPath) || void 0 === n ? void 0 : n.canonicalString()) === (null === (r = e._internalFieldPath) || void 0 === r ? void 0 : r.canonicalString());\n}\n\n/**\n * Compares two `AggregateQuerySnapshot` instances for equality.\n *\n * Two `AggregateQuerySnapshot` instances are considered \"equal\" if they have\n * underlying queries that compare equal, and the same data.\n *\n * @param left - The first `AggregateQuerySnapshot` to compare.\n * @param right - The second `AggregateQuerySnapshot` to compare.\n *\n * @returns `true` if the objects are \"equal\", as defined above, or `false`\n * otherwise.\n */ function us(t, e) {\n    return Ln(t.query, e.query) && f(t.data(), e.data());\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Returns a sentinel for use with {@link @firebase/firestore/lite#(updateDoc:1)} or\n * {@link @firebase/firestore/lite#(setDoc:1)} with `{merge: true}` to mark a field for deletion.\n */ function cs() {\n    return new Xn(\"deleteField\");\n}\n\n/**\n * Returns a sentinel used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link @firebase/firestore/lite#(updateDoc:1)} to\n * include a server-generated timestamp in the written data.\n */ function as() {\n    return new er(\"serverTimestamp\");\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to union the given elements with any array\n * value that already exists on the server. Each specified element that doesn't\n * already exist in the array will be added to the end. If the field being\n * modified is not already an array it will be overwritten with an array\n * containing exactly the specified elements.\n *\n * @param elements - The elements to union into the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`.\n */ function hs(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new nr(\"arrayUnion\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link (setDoc:1)} or {@link\n * updateDoc:1} that tells the server to remove the given elements from any\n * array value that already exists on the server. All instances of each element\n * specified will be removed from the array. If the field being modified is not\n * already an array it will be overwritten with an empty array.\n *\n * @param elements - The elements to remove from the array.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function ls(...t) {\n    // NOTE: We don't actually parse the data until it's used in set() or\n    // update() since we'd need the Firestore instance to do this.\n    return new rr(\"arrayRemove\", t);\n}\n\n/**\n * Returns a special value that can be used with {@link @firebase/firestore/lite#(setDoc:1)} or {@link\n * @firebase/firestore/lite#(updateDoc:1)} that tells the server to increment the field's current value by\n * the given value.\n *\n * If either the operand or the current field value uses floating point\n * precision, all arithmetic follows IEEE 754 semantics. If both values are\n * integers, values outside of JavaScript's safe number range\n * (`Number.MIN_SAFE_INTEGER` to `Number.MAX_SAFE_INTEGER`) are also subject to\n * precision loss. Furthermore, once processed by the Firestore backend, all\n * integer operations are capped between -2^63 and 2^63-1.\n *\n * If the current field value is not of type `number`, or if the field does not\n * yet exist, the transformation sets the field to the given value.\n *\n * @param n - The value to increment by.\n * @returns The `FieldValue` sentinel for use in a call to `setDoc()` or\n * `updateDoc()`\n */ function fs(t) {\n    return new sr(\"increment\", t);\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A write batch, used to perform multiple writes as a single atomic unit.\n *\n * A `WriteBatch` object can be acquired by calling {@link writeBatch}. It\n * provides methods for adding writes to the write batch. None of the writes\n * will be committed (or visible locally) until {@link WriteBatch.commit} is\n * called.\n */ class ds {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._commitHandler = e, this._mutations = [], this._committed = !1, \n        this._dataReader = Zn(t);\n    }\n    set(t, e, n) {\n        this._verifyNotCommitted();\n        const r = ws(t, this._firestore), s = Gr(r.converter, e, n), i = Jn(this._dataReader, \"WriteBatch.set\", r._key, s, null !== r.converter, n);\n        return this._mutations.push(i.toMutation(r._key, Ce.none())), this;\n    }\n    update(t, e, n, ...r) {\n        this._verifyNotCommitted();\n        const s = ws(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let i;\n        return i = \"string\" == typeof (e = l(e)) || e instanceof Un ? or(this._dataReader, \"WriteBatch.update\", s._key, e, n, r) : ir(this._dataReader, \"WriteBatch.update\", s._key, e), \n        this._mutations.push(i.toMutation(s._key, Ce.exists(!0))), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `WriteBatch` instance. Used for chaining method calls.\n     */    delete(t) {\n        this._verifyNotCommitted();\n        const e = ws(t, this._firestore);\n        return this._mutations = this._mutations.concat(new je(e._key, Ce.none())), this;\n    }\n    /**\n     * Commits all of the writes in this write batch as a single atomic unit.\n     *\n     * The result of these writes will only be reflected in document reads that\n     * occur after the returned promise resolves. If the client is offline, the\n     * write fails. If you would like to see local modifications or buffer writes\n     * until the client is online, use the full Firestore SDK.\n     *\n     * @returns A `Promise` resolved once all of the writes in the batch have been\n     * successfully written to the backend as an atomic unit (note that it won't\n     * resolve while you're offline).\n     */    commit() {\n        return this._verifyNotCommitted(), this._committed = !0, this._mutations.length > 0 ? this._commitHandler(this._mutations) : Promise.resolve();\n    }\n    _verifyNotCommitted() {\n        if (this._committed) throw new U(S, \"A write batch can no longer be used after commit() has been called.\");\n    }\n}\n\nfunction ws(t, e) {\n    if ((t = l(t)).firestore !== e) throw new U(P, \"Provided document reference is from a different Firestore instance.\");\n    return t;\n}\n\n/**\n * Creates a write batch, used for performing multiple writes as a single\n * atomic operation. The maximum number of writes allowed in a single WriteBatch\n * is 500.\n *\n * The result of these writes will only be reflected in document reads that\n * occur after the returned promise resolves. If the client is offline, the\n * write fails. If you would like to see local modifications or buffer writes\n * until the client is online, use the full Firestore SDK.\n *\n * @returns A `WriteBatch` that can be used to atomically execute multiple\n * writes.\n */ function ms(t) {\n    const e = An(t = ct(t, Tn));\n    return new ds(t, (t => gn(e, t)));\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Internal transaction object responsible for accumulating the mutations to\n * perform and the base versions for any documents read.\n */ class ps {\n    constructor(t) {\n        this.datastore = t, \n        // The version of each document that was read during this transaction.\n        this.readVersions = new Map, this.mutations = [], this.committed = !1, \n        /**\n         * A deferred usage error that occurred previously in this transaction that\n         * will cause the transaction to fail once it actually commits.\n         */\n        this.lastWriteError = null, \n        /**\n         * Set of documents that have been written in the transaction.\n         *\n         * When there's more than one write to the same key in a transaction, any\n         * writes after the first are handled differently.\n         */\n        this.writtenDocs = new Set;\n    }\n    async lookup(t) {\n        if (this.ensureCommitNotCalled(), this.mutations.length > 0) throw new U(P, \"Firestore transactions require all reads to be executed before all writes.\");\n        const e = await _n(this.datastore, t);\n        return e.forEach((t => this.recordVersion(t))), e;\n    }\n    set(t, e) {\n        this.write(e.toMutation(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    update(t, e) {\n        try {\n            this.write(e.toMutation(t, this.preconditionForUpdate(t)));\n        } catch (t) {\n            this.lastWriteError = t;\n        }\n        this.writtenDocs.add(t.toString());\n    }\n    delete(t) {\n        this.write(new je(t, this.precondition(t))), this.writtenDocs.add(t.toString());\n    }\n    async commit() {\n        if (this.ensureCommitNotCalled(), this.lastWriteError) throw this.lastWriteError;\n        const t = this.readVersions;\n        // For each mutation, note that the doc was written.\n                this.mutations.forEach((e => {\n            t.delete(e.key.toString());\n        })), \n        // For each document that was read but not written to, we want to perform\n        // a `verify` operation.\n        t.forEach(((t, e) => {\n            const n = rt.fromPath(e);\n            this.mutations.push(new Be(n, this.precondition(n)));\n        })), await gn(this.datastore, this.mutations), this.committed = !0;\n    }\n    recordVersion(t) {\n        let e;\n        if (t.isFoundDocument()) e = t.version; else {\n            if (!t.isNoDocument()) throw b();\n            // Represent a deleted doc using SnapshotVersion.min().\n            e = fe.min();\n        }\n        const n = this.readVersions.get(t.key.toString());\n        if (n) {\n            if (!e.isEqual(n)) \n            // This transaction will fail no matter what.\n            throw new U(q, \"Document version changed between two reads.\");\n        } else this.readVersions.set(t.key.toString(), e);\n    }\n    /**\n     * Returns the version of this document when it was read in this transaction,\n     * as a precondition, or no precondition if it was not read.\n     */    precondition(t) {\n        const e = this.readVersions.get(t.toString());\n        return !this.writtenDocs.has(t.toString()) && e ? e.isEqual(fe.min()) ? Ce.exists(!1) : Ce.updateTime(e) : Ce.none();\n    }\n    /**\n     * Returns the precondition for a document if the operation is an update.\n     */    preconditionForUpdate(t) {\n        const e = this.readVersions.get(t.toString());\n        // The first time a document is written, we want to take into account the\n        // read time and existence\n                if (!this.writtenDocs.has(t.toString()) && e) {\n            if (e.isEqual(fe.min())) \n            // The document doesn't exist, so fail the transaction.\n            // This has to be validated locally because you can't send a\n            // precondition that a document does not exist without changing the\n            // semantics of the backend write to be an insert. This is the reverse\n            // of what we want, since we want to assert that the document doesn't\n            // exist but then send the update and have it fail. Since we can't\n            // express that to the backend, we have to validate locally.\n            // Note: this can change once we can send separate verify writes in the\n            // transaction.\n            throw new U(P, \"Can't update a document that doesn't exist.\");\n            // Document exists, base precondition on document update time.\n                        return Ce.updateTime(e);\n        }\n        // Document was not read, so we just use the preconditions for a blind\n        // update.\n        return Ce.exists(!0);\n    }\n    write(t) {\n        this.ensureCommitNotCalled(), this.mutations.push(t);\n    }\n    ensureCommitNotCalled() {}\n}\n\n/**\n * @license\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ const ys = {\n    maxAttempts: 5\n};\n\n/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * TransactionRunner encapsulates the logic needed to run and retry transactions\n * with backoff.\n */\nclass gs {\n    constructor(t, e, n, r, s) {\n        this.asyncQueue = t, this.datastore = e, this.options = n, this.updateFunction = r, \n        this.deferred = s, this._t = n.maxAttempts, this.vt = new pn(this.asyncQueue, \"transaction_retry\" /* TimerId.TransactionRetry */);\n    }\n    /** Runs the transaction and sets the result on deferred. */    run() {\n        this._t -= 1, this.bt();\n    }\n    bt() {\n        this.vt.J((async () => {\n            const t = new ps(this.datastore), e = this.Et(t);\n            e && e.then((e => {\n                this.asyncQueue.enqueueAndForget((() => t.commit().then((() => {\n                    this.deferred.resolve(e);\n                })).catch((t => {\n                    this.At(t);\n                }))));\n            })).catch((t => {\n                this.At(t);\n            }));\n        }));\n    }\n    Et(t) {\n        try {\n            const e = this.updateFunction(t);\n            return !ft(e) && e.catch && e.then ? e : (this.deferred.reject(Error(\"Transaction callback must return a Promise\")), \n            null);\n        } catch (t) {\n            // Do not retry errors thrown by user provided updateFunction.\n            return this.deferred.reject(t), null;\n        }\n    }\n    At(t) {\n        this._t > 0 && this.It(t) ? (this._t -= 1, this.asyncQueue.enqueueAndForget((() => (this.bt(), \n        Promise.resolve())))) : this.deferred.reject(t);\n    }\n    It(t) {\n        if (\"FirebaseError\" === t.name) {\n            // In transactions, the backend will fail outdated reads with FAILED_PRECONDITION and\n            // non-matching document versions with ABORTED. These errors should be retried.\n            const e = t.code;\n            return \"aborted\" === e || \"failed-precondition\" === e || \"already-exists\" === e || !\n            /**\n * Determines whether an error code represents a permanent error when received\n * in response to a non-write operation.\n *\n * See isPermanentWriteError for classifying write errors.\n */\n            function(t) {\n                switch (t) {\n                  default:\n                    return b();\n\n                  case T:\n                  case R:\n                  case V:\n                  case x:\n                  case C:\n                  case L:\n // Unauthenticated means something went wrong with our token and we need\n                    // to retry with new credentials which will happen automatically.\n                                      case F:\n                    return !1;\n\n                  case P:\n                  case $:\n                  case D:\n                  case N:\n                  case S:\n // Aborted might be retried in some scenarios, but that is dependant on\n                    // the context and should handled individually by the calling code.\n                    // See https://cloud.google.com/apis/design/errors.\n                                      case q:\n                  case O:\n                  case k:\n                  case M:\n                    return !0;\n                }\n            }(e);\n        }\n        return !1;\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Platform's 'document' implementation or null if not available. */ function _s() {\n    // `document` is not always available, e.g. in ReactNative and WebWorkers.\n    // eslint-disable-next-line no-restricted-globals\n    return \"undefined\" != typeof document ? document : null;\n}\n\n/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * Represents an operation scheduled to be run in the future on an AsyncQueue.\n *\n * It is created via DelayedOperation.createAndSchedule().\n *\n * Supports cancellation (via cancel()) and early execution (via skipDelay()).\n *\n * Note: We implement `PromiseLike` instead of `Promise`, as the `Promise` type\n * in newer versions of TypeScript defines `finally`, which is not available in\n * IE.\n */ class vs {\n    constructor(t, e, n, r, s) {\n        this.asyncQueue = t, this.timerId = e, this.targetTimeMs = n, this.op = r, this.removalCallback = s, \n        this.deferred = new j, this.then = this.deferred.promise.then.bind(this.deferred.promise), \n        // It's normal for the deferred promise to be canceled (due to cancellation)\n        // and so we attach a dummy catch callback to avoid\n        // 'UnhandledPromiseRejectionWarning' log spam.\n        this.deferred.promise.catch((t => {}));\n    }\n    /**\n     * Creates and returns a DelayedOperation that has been scheduled to be\n     * executed on the provided asyncQueue after the provided delayMs.\n     *\n     * @param asyncQueue - The queue to schedule the operation on.\n     * @param id - A Timer ID identifying the type of operation this is.\n     * @param delayMs - The delay (ms) before the operation should be scheduled.\n     * @param op - The operation to run.\n     * @param removalCallback - A callback to be called synchronously once the\n     *   operation is executed or canceled, notifying the AsyncQueue to remove it\n     *   from its delayedOperations list.\n     *   PORTING NOTE: This exists to prevent making removeDelayedOperation() and\n     *   the DelayedOperation class public.\n     */    static createAndSchedule(t, e, n, r, s) {\n        const i = Date.now() + n, o = new vs(t, e, i, r, s);\n        return o.start(n), o;\n    }\n    /**\n     * Starts the timer. This is called immediately after construction by\n     * createAndSchedule().\n     */    start(t) {\n        this.timerHandle = setTimeout((() => this.handleDelayElapsed()), t);\n    }\n    /**\n     * Queues the operation to run immediately (if it hasn't already been run or\n     * canceled).\n     */    skipDelay() {\n        return this.handleDelayElapsed();\n    }\n    /**\n     * Cancels the operation if it hasn't already been executed or canceled. The\n     * promise will be rejected.\n     *\n     * As long as the operation has not yet been run, calling cancel() provides a\n     * guarantee that the operation will not be run.\n     */    cancel(t) {\n        null !== this.timerHandle && (this.clearTimeout(), this.deferred.reject(new U(T, \"Operation cancelled\" + (t ? \": \" + t : \"\"))));\n    }\n    handleDelayElapsed() {\n        this.asyncQueue.enqueueAndForget((() => null !== this.timerHandle ? (this.clearTimeout(), \n        this.op().then((t => this.deferred.resolve(t)))) : Promise.resolve()));\n    }\n    clearTimeout() {\n        null !== this.timerHandle && (this.removalCallback(this), clearTimeout(this.timerHandle), \n        this.timerHandle = null);\n    }\n}\n\n/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ class bs {\n    constructor() {\n        // The last promise in the queue.\n        this.Tt = Promise.resolve(), \n        // A list of retryable operations. Retryable operations are run in order and\n        // retried with backoff.\n        this.Rt = [], \n        // Is this AsyncQueue being shut down? Once it is set to true, it will not\n        // be changed again.\n        this.Pt = !1, \n        // Operations scheduled to be queued in the future. Operations are\n        // automatically removed after they are run or canceled.\n        this.Vt = [], \n        // visible for testing\n        this.$t = null, \n        // Flag set while there's an outstanding AsyncQueue operation, used for\n        // assertion sanity-checks.\n        this.Dt = !1, \n        // Enabled during shutdown on Safari to prevent future access to IndexedDB.\n        this.Nt = !1, \n        // List of TimerIds to fast-forward delays for.\n        this.Ft = [], \n        // Backoff timer used to schedule retries for retryable operations\n        this.vt = new pn(this, \"async_queue_retry\" /* TimerId.AsyncQueueRetry */), \n        // Visibility handler that triggers an immediate retry of all retryable\n        // operations. Meant to speed up recovery when we regain file system access\n        // after page comes into foreground.\n        this.xt = () => {\n            const t = _s();\n            t && y(\"AsyncQueue\", \"Visibility state changed to \" + t.visibilityState), this.vt.tt();\n        };\n        const t = _s();\n        t && \"function\" == typeof t.addEventListener && t.addEventListener(\"visibilitychange\", this.xt);\n    }\n    get isShuttingDown() {\n        return this.Pt;\n    }\n    /**\n     * Adds a new operation to the queue without waiting for it to complete (i.e.\n     * we ignore the Promise result).\n     */    enqueueAndForget(t) {\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.enqueue(t);\n    }\n    enqueueAndForgetEvenWhileRestricted(t) {\n        this.St(), \n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.qt(t);\n    }\n    enterRestrictedMode(t) {\n        if (!this.Pt) {\n            this.Pt = !0, this.Nt = t || !1;\n            const e = _s();\n            e && \"function\" == typeof e.removeEventListener && e.removeEventListener(\"visibilitychange\", this.xt);\n        }\n    }\n    enqueue(t) {\n        if (this.St(), this.Pt) \n        // Return a Promise which never resolves.\n        return new Promise((() => {}));\n        // Create a deferred Promise that we can return to the callee. This\n        // allows us to return a \"hanging Promise\" only to the callee and still\n        // advance the queue even when the operation is not run.\n                const e = new j;\n        return this.qt((() => this.Pt && this.Nt ? Promise.resolve() : (t().then(e.resolve, e.reject), \n        e.promise))).then((() => e.promise));\n    }\n    enqueueRetryable(t) {\n        this.enqueueAndForget((() => (this.Rt.push(t), this.Ot())));\n    }\n    /**\n     * Runs the next operation from the retryable queue. If the operation fails,\n     * reschedules with backoff.\n     */    async Ot() {\n        if (0 !== this.Rt.length) {\n            try {\n                await this.Rt[0](), this.Rt.shift(), this.vt.reset();\n            } catch (t) {\n                if (!\n                /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n                /** Verifies whether `e` is an IndexedDbTransactionError. */\n                function(t) {\n                    // Use name equality, as instanceof checks on errors don't work with errors\n                    // that wrap other errors.\n                    return \"IndexedDbTransactionError\" === t.name;\n                }\n                /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (t)) throw t;\n // Failure will be handled by AsyncQueue\n                                y(\"AsyncQueue\", \"Operation failed with retryable error: \" + t);\n            }\n            this.Rt.length > 0 && \n            // If there are additional operations, we re-schedule `retryNextOp()`.\n            // This is necessary to run retryable operations that failed during\n            // their initial attempt since we don't know whether they are already\n            // enqueued. If, for example, `op1`, `op2`, `op3` are enqueued and `op1`\n            // needs to  be re-run, we will run `op1`, `op1`, `op2` using the\n            // already enqueued calls to `retryNextOp()`. `op3()` will then run in the\n            // call scheduled here.\n            // Since `backoffAndRun()` cancels an existing backoff and schedules a\n            // new backoff on every call, there is only ever a single additional\n            // operation in the queue.\n            this.vt.J((() => this.Ot()));\n        }\n    }\n    qt(t) {\n        const e = this.Tt.then((() => (this.Dt = !0, t().catch((t => {\n            this.$t = t, this.Dt = !1;\n            const e = \n            /**\n * Chrome includes Error.message in Error.stack. Other browsers do not.\n * This returns expected output of message + stack when available.\n * @param error - Error or FirestoreError\n */\n            function(t) {\n                let e = t.message || \"\";\n                t.stack && (e = t.stack.includes(t.message) ? t.stack : t.message + \"\\n\" + t.stack);\n                return e;\n            }\n            /**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n            // TODO(mrschmidt) Consider using `BaseTransaction` as the base class in the\n            // legacy SDK.\n            /**\n * A reference to a transaction.\n *\n * The `Transaction` object passed to a transaction's `updateFunction` provides\n * the methods to read and write data within the transaction context. See\n * {@link runTransaction}.\n */ (t);\n            // Re-throw the error so that this.tail becomes a rejected Promise and\n            // all further attempts to chain (via .then) will just short-circuit\n            // and return the rejected Promise.\n            throw g(\"INTERNAL UNHANDLED ERROR: \", e), t;\n        })).then((t => (this.Dt = !1, t))))));\n        return this.Tt = e, e;\n    }\n    enqueueAfterDelay(t, e, n) {\n        this.St(), \n        // Fast-forward delays for timerIds that have been overriden.\n        this.Ft.indexOf(t) > -1 && (e = 0);\n        const r = vs.createAndSchedule(this, t, e, n, (t => this.kt(t)));\n        return this.Vt.push(r), r;\n    }\n    St() {\n        this.$t && b();\n    }\n    verifyOperationInProgress() {}\n    /**\n     * Waits until all currently queued tasks are finished executing. Delayed\n     * operations are not run.\n     */    async Ct() {\n        // Operations in the queue prior to draining may have enqueued additional\n        // operations. Keep draining the queue until the tail is no longer advanced,\n        // which indicates that no more new operations were enqueued and that all\n        // operations were executed.\n        let t;\n        do {\n            t = this.Tt, await t;\n        } while (t !== this.Tt);\n    }\n    /**\n     * For Tests: Determine if a delayed operation with a particular TimerId\n     * exists.\n     */    Lt(t) {\n        for (const e of this.Vt) if (e.timerId === t) return !0;\n        return !1;\n    }\n    /**\n     * For Tests: Runs some or all delayed operations early.\n     *\n     * @param lastTimerId - Delayed operations up to and including this TimerId\n     * will be drained. Pass TimerId.All to run all delayed operations.\n     * @returns a Promise that resolves once all operations have been run.\n     */    Mt(t) {\n        // Note that draining may generate more delayed ops, so we do that first.\n        return this.Ct().then((() => {\n            // Run ops in the same order they'd run if they ran naturally.\n            this.Vt.sort(((t, e) => t.targetTimeMs - e.targetTimeMs));\n            for (const e of this.Vt) if (e.skipDelay(), \"all\" /* TimerId.All */ !== t && e.timerId === t) break;\n            return this.Ct();\n        }));\n    }\n    /**\n     * For Tests: Skip all subsequent delays for a timer id.\n     */    Ut(t) {\n        this.Ft.push(t);\n    }\n    /** Called once a DelayedOperation is run or canceled. */    kt(t) {\n        // NOTE: indexOf / slice are O(n), but delayedOperations is expected to be small.\n        const e = this.Vt.indexOf(t);\n        this.Vt.splice(e, 1);\n    }\n}\n\nclass Es {\n    /** @hideconstructor */\n    constructor(t, e) {\n        this._firestore = t, this._transaction = e, this._dataReader = Zn(t);\n    }\n    /**\n     * Reads the document referenced by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be read.\n     * @returns A `DocumentSnapshot` with the read data.\n     */    get(t) {\n        const e = ws(t, this._firestore), n = new Kr(this._firestore);\n        return this._transaction.lookup([ e._key ]).then((t => {\n            if (!t || 1 !== t.length) return b();\n            const r = t[0];\n            if (r.isFoundDocument()) return new yr(this._firestore, n, r.key, r, e.converter);\n            if (r.isNoDocument()) return new yr(this._firestore, n, e._key, null, e.converter);\n            throw b();\n        }));\n    }\n    set(t, e, n) {\n        const r = ws(t, this._firestore), s = Gr(r.converter, e, n), i = Jn(this._dataReader, \"Transaction.set\", r._key, s, null !== r.converter, n);\n        return this._transaction.set(r._key, i), this;\n    }\n    update(t, e, n, ...r) {\n        const s = ws(t, this._firestore);\n        // For Compat types, we have to \"extract\" the underlying types before\n        // performing validation.\n                let i;\n        return i = \"string\" == typeof (e = l(e)) || e instanceof Un ? or(this._dataReader, \"Transaction.update\", s._key, e, n, r) : ir(this._dataReader, \"Transaction.update\", s._key, e), \n        this._transaction.update(s._key, i), this;\n    }\n    /**\n     * Deletes the document referred to by the provided {@link DocumentReference}.\n     *\n     * @param documentRef - A reference to the document to be deleted.\n     * @returns This `Transaction` instance. Used for chaining method calls.\n     */    delete(t) {\n        const e = ws(t, this._firestore);\n        return this._transaction.delete(e._key), this;\n    }\n}\n\n/**\n * Executes the given `updateFunction` and then attempts to commit the changes\n * applied within the transaction. If any document read within the transaction\n * has changed, Cloud Firestore retries the `updateFunction`. If it fails to\n * commit after 5 attempts, the transaction fails.\n *\n * The maximum number of writes allowed in a single transaction is 500.\n *\n * @param firestore - A reference to the Firestore database to run this\n * transaction against.\n * @param updateFunction - The function to execute within the transaction\n * context.\n * @param options - An options object to configure maximum number of attempts to\n * commit.\n * @returns If the transaction completed successfully or was explicitly aborted\n * (the `updateFunction` returned a failed promise), the promise returned by the\n * `updateFunction `is returned here. Otherwise, if the transaction failed, a\n * rejected promise with the corresponding failure error is returned.\n */ function As(t, e, n) {\n    const r = An(t = ct(t, Tn)), s = Object.assign(Object.assign({}, ys), n);\n    !function(t) {\n        if (t.maxAttempts < 1) throw new U(P, \"Max attempts must be at least 1\");\n    }(s);\n    const i = new j;\n    return new gs(new bs, r, s, (n => e(new Es(t, n))), i).run(), i.promise;\n}\n\n/**\n * Firestore Lite\n *\n * @remarks Firestore Lite is a small online-only SDK that allows read\n * and write access to your Firestore database. All operations connect\n * directly to the backend, and `onSnapshot()` APIs are not supported.\n * @packageDocumentation\n */ !function(t) {\n    w = t;\n}(`${s}_lite`), n(new i(\"firestore/lite\", ((t, {instanceIdentifier: e, options: n}) => {\n    const r = t.getProvider(\"app\").getImmediate(), s = new Tn(new W(t.getProvider(\"auth-internal\")), new H(t.getProvider(\"app-check-internal\")), function(t, e) {\n        if (!Object.prototype.hasOwnProperty.apply(t.options, [ \"projectId\" ])) throw new U(P, '\"projectId\" not provided in firebase.initializeApp.');\n        return new J(t.options.projectId, e);\n    }\n    /**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */ (r, e), r);\n    return n && s._setSettings(n), s;\n}), \"PUBLIC\").setMultipleInstances(!0)), \n// RUNTIME_ENV and BUILD_TARGET are replaced by real values during the compilation\nr(\"firestore-lite\", \"3.9.0\", \"\"), r(\"firestore-lite\", \"3.9.0\", \"__BUILD_TARGET__\");\n\nexport { Dn as AggregateField, Nn as AggregateQuerySnapshot, Mn as Bytes, Sn as CollectionReference, Fn as DocumentReference, yr as DocumentSnapshot, Un as FieldPath, Bn as FieldValue, Tn as Firestore, U as FirestoreError, zn as GeoPoint, xn as Query, Pr as QueryCompositeFilterConstraint, Ar as QueryConstraint, gr as QueryDocumentSnapshot, Cr as QueryEndAtConstraint, Tr as QueryFieldFilterConstraint, Fr as QueryLimitConstraint, Dr as QueryOrderByConstraint, _r as QuerySnapshot, qr as QueryStartAtConstraint, St as Timestamp, Es as Transaction, ds as WriteBatch, ts as addDoc, os as aggregateFieldEqual, us as aggregateQuerySnapshotEqual, $r as and, ls as arrayRemove, hs as arrayUnion, ss as average, qn as collection, On as collectionGroup, Vn as connectFirestoreEmulator, is as count, Xr as deleteDoc, cs as deleteField, kn as doc, jn as documentId, Mr as endAt, Lr as endBefore, ns as getAggregate, es as getCount, Yr as getDoc, Hr as getDocs, Pn as getFirestore, fs as increment, Rn as initializeFirestore, xr as limit, Sr as limitToLast, Vr as or, Nr as orderBy, Ir as query, Ln as queryEqual, Cn as refEqual, As as runTransaction, as as serverTimestamp, Zr as setDoc, p as setLogLevel, vr as snapshotEqual, kr as startAfter, Or as startAt, rs as sum, $n as terminate, Jr as updateDoc, Rr as where, ms as writeBatch };\n//# sourceMappingURL=index.browser.esm2017.js.map\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AA4BA,IAAM,IAAN,MAAQ;EACJ,YAAY,GAAG;AACX,SAAK,MAAM;EACnB;EACI,kBAAkB;AACd,WAAO,QAAQ,KAAK;EAC5B;;;;;EAIW,QAAQ;AACX,WAAO,KAAK,gBAAe,IAAK,SAAS,KAAK,MAAM;EAC5D;EACI,QAAQ,GAAG;AACP,WAAO,EAAE,QAAQ,KAAK;EAC9B;AACA;AAE+B,EAAE,kBAAkB,IAAI,EAAE,IAAI;;AAG7D,EAAE,qBAAqB,IAAI,EAAE,wBAAwB,GAAG,EAAE,cAAc,IAAI,EAAE,iBAAiB,GAC/F,EAAE,YAAY,IAAI,EAAE,WAAW;AAkB/B,IAAI,IAAI;AAkBR,IAAM,IAAI,IAAIA,OAAE,qBAAqB;AAcjC,SAAS,EAAE,GAAG;AACd,IAAE,YAAY,CAAC;AACnB;AAEA,SAAS,EAAE,MAAM,GAAG;AAChB,MAAI,EAAE,YAAYC,SAAE,OAAO;AACvB,UAAM,IAAI,EAAE,IAAI,CAAC;AACjB,MAAE,MAAM,cAAc,OAAO,KAAK,GAAG,CAAC;EAC9C;AACA;AAEA,SAAS,EAAE,MAAM,GAAG;AAChB,MAAI,EAAE,YAAYA,SAAE,OAAO;AACvB,UAAM,IAAI,EAAE,IAAI,CAAC;AACjB,MAAE,MAAM,cAAc,OAAO,KAAK,GAAG,CAAC;EAC9C;AACA;AAII,SAAS,EAAE,MAAM,GAAG;AACpB,MAAI,EAAE,YAAYA,SAAE,MAAM;AACtB,UAAM,IAAI,EAAE,IAAI,CAAC;AACjB,MAAE,KAAK,cAAc,OAAO,KAAK,GAAG,CAAC;EAC7C;AACA;AAII,SAAS,EAAE,GAAG;AACd,MAAI,YAAY,OAAO;AAAG,WAAO;AACjC,MAAI;AACA,WAAO,IAAI,GAAG,KAAK,UAAU,CAAC;EACtC,SAAaC,IAAP;AAEE,WAAO;EACf;AAkBI,MAAI;AACR;AAyBI,SAAS,EAAE,IAAI,oBAAoB;AAGnC,QAAM,IAAI,cAAc,mCAAmC;AAI3D,QAAM,EAAE,CAAC,GAAG,IAAI,MAAM,CAAC;AAC3B;AAOI,SAAS,EAAE,GAAG,GAAG;AACjB,OAAK,EAAC;AACV;AAKI,SAAS,EAAE,GAEf,GAAG;AACC,SAAO;AACX;AAiBI,IAAM,IAAI;AAAV,IAAgB,IAAI;AAApB,IAAiC,IAAI;AAArC,IAAgD,IAAI;AAApD,IAAwE,IAAI;AAA5E,IAAiG,IAAI;AAArG,IAAkH,IAAI;AAAtH,IAAwI,IAAI;AAA5I,IAAiK,IAAI;AAArK,IAAwL,IAAI;AAA5L,IAAkN,IAAI;AAAtN,IAA6O,IAAI;AAAjP,IAA4P,IAAI;AAAhQ,IAAgR,IAAI;AAApR,IAAqS,IAAI;AAAzS,IAAqT,IAAI;AAAzT,IAAwU,IAAI;AAE7R,IAAM,IAAN,cAAgBC,cAAE;;EAEjE,YAIA,GAIA,GAAG;AACC,UAAM,GAAG,CAAC,GAAG,KAAK,OAAO,GAAG,KAAK,UAAU;;;IAI3C,KAAK,WAAW,MAAM,GAAG,KAAK,eAAe,KAAK,UAAU,KAAK;EACzE;AACA;AAiBI,IAAM,IAAN,MAAQ;EACR,cAAc;AACV,SAAK,UAAU,IAAI,QAAS,CAAC,GAAG,MAAM;AAClC,WAAK,UAAU,GAAG,KAAK,SAAS;IAC5C,CAAS;EACT;AACA;AAiBI,IAAM,IAAN,MAAQ;EACR,YAAY,GAAG,GAAG;AACd,SAAK,OAAO,GAAG,KAAK,OAAO,SAAS,KAAK,UAAU,oBAAI,OAAK,KAAK,QAAQ,IAAI,iBAAiB,UAAU,GAAG;EACnH;AACA;AAKI,IAAM,IAAN,MAAQ;EACR,WAAW;AACP,WAAO,QAAQ,QAAQ,IAAI;EACnC;EACI,kBAAkB;EAAA;EAClB,MAAM,GAAG,GAAG;AAER,MAAE,iBAAkB,MAAM,EAAE,EAAE,eAAe,CAAC;EACtD;EACI,WAAW;EAAA;AACf;AAKI,IAAM,IAAN,MAAQ;EACR,YAAY,GAAG;AACX,SAAK,QAAQ;;;;;IAMb,KAAK,iBAAiB;EAC9B;EACI,WAAW;AACP,WAAO,QAAQ,QAAQ,KAAK,KAAK;EACzC;EACI,kBAAkB;EAAA;EAClB,MAAM,GAAG,GAAG;AACR,SAAK,iBAAiB;IAEtB,EAAE,iBAAkB,MAAM,EAAE,KAAK,MAAM,IAAI,CAAC;EACpD;EACI,WAAW;AACP,SAAK,iBAAiB;EAC9B;AACA;AAE6C,IAAM,IAAN,MAAQ;EACjD,YAAY,GAAG;AACX,SAAK,OAAO,MAAM,EAAE,OAAQ,CAAAC,OAAK;AAC7B,WAAK,OAAOA;IACxB,CAAS;EACT;EACI,WAAW;AACP,WAAO,KAAK,OAAO,KAAK,KAAK,SAAQ,EAAG,KAAM,OAAK,KAAK,EAAE,YAAY,OAAO,EAAE,WAAW,GAC1F,IAAI,EAAE,EAAE,aAAa,IAAI,EAAE,KAAK,KAAK,OAAM,CAAE,CAAC,KAAK,IAAI,IAAK,QAAQ,QAAQ,IAAI;EACxF;EACI,kBAAkB;EAAA;EAClB,MAAM,GAAG,GAAG;EAAA;EACZ,WAAW;EAAA;AACf;AAQI,IAAM,IAAN,MAAQ;EACR,YAAY,GAAG,GAAG,GAAG,GAAG;AACpB,SAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,OAAO,cAAc,KAAK,OAAO,EAAE,aACxF,KAAK,IAAI,oBAAI;EACrB;;EACmH,IAAI;AAC/G,WAAO,KAAK,IAAI,KAAK,EAAC;;OAEtB,EAAE,EAAE,YAAY,OAAO,KAAK,KAAK,SAAS,KAAK,KAAK,CAAC,KAAK,EAAE,QAAQ,CAAC,KAAK,EAAE,KAAK,gCAAgC,GACjH,KAAK,EAAE,KAAK,gCAAgC,CAAA,CAAE;;EACtD;EACI,IAAI,UAAU;AACV,SAAK,EAAE,IAAI,mBAAmB,KAAK,CAAC;AAEpC,UAAM,IAAI,KAAK,EAAC;AAChB,WAAO,KAAK,KAAK,EAAE,IAAI,iBAAiB,CAAC,GAAG,KAAK,KAAK,KAAK,EAAE,IAAI,kCAAkC,KAAK,CAAC,GACzG,KAAK;EACb;AACA;AAMI,IAAM,IAAN,MAAQ;EACR,YAAY,GAAG,GAAG,GAAG,GAAG;AACpB,SAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI;EACrD;EACI,WAAW;AACP,WAAO,QAAQ,QAAQ,IAAI,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,CAAC,CAAC;EACpE;EACI,MAAM,GAAG,GAAG;AAER,MAAE,iBAAkB,MAAM,EAAE,EAAE,WAAW,CAAC;EAClD;EACI,WAAW;EAAA;EACX,kBAAkB;EAAA;AACtB;AAEA,IAAM,IAAN,MAAQ;EACJ,YAAY,GAAG;AACX,SAAK,QAAQ,GAAG,KAAK,OAAO,YAAY,KAAK,UAAU,oBAAI,OAAK,KAAK,EAAE,SAAS,KAAK,KAAK,QAAQ,IAAI,uBAAuB,KAAK,KAAK;EAC/I;AACA;AAEiD,IAAM,IAAN,MAAQ;EACrD,YAAY,GAAG;AACX,SAAK,IAAI,GAAG,KAAK,WAAW,MAAM,EAAE,OAAQ,CAAAA,OAAK;AAC7C,WAAK,WAAWA;IAC5B,CAAS;EACT;EACI,WAAW;AACP,WAAO,KAAK,WAAW,KAAK,SAAS,SAAQ,EAAG,KAAM,OAAK,KAAK,EAAE,YAAY,OAAO,EAAE,KAAK,GAC5F,IAAI,EAAE,EAAE,KAAK,KAAK,IAAI,IAAK,QAAQ,QAAQ,IAAI;EACvD;EACI,kBAAkB;EAAA;EAClB,MAAM,GAAG,GAAG;EAAA;EACZ,WAAW;EAAA;AACf;AAsBA,IAAM,IAAN,MAAQ;;;;;;;;;;;;;;;;;;EAkBJ,YAAY,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAChC,SAAK,aAAa,GAAG,KAAK,QAAQ,GAAG,KAAK,iBAAiB,GAAG,KAAK,OAAO,GAAG,KAAK,MAAM,GACxF,KAAK,mBAAmB,GAAG,KAAK,wBAAwB,GAAG,KAAK,kBAAkB;EAC1F;AACA;AAOA,IAAM,IAAN,MAAQ;EACJ,YAAY,GAAG,GAAG;AACd,SAAK,YAAY,GAAG,KAAK,WAAW,KAAK;EACjD;EACI,OAAO,QAAQ;AACX,WAAO,IAAI,EAAE,IAAI,EAAE;EAC3B;EACI,IAAI,oBAAoB;AACpB,WAAO,gBAAgB,KAAK;EACpC;EACI,QAAQ,GAAG;AACP,WAAO,aAAa,KAAK,EAAE,cAAc,KAAK,aAAa,EAAE,aAAa,KAAK;EACvF;AACA;AAKA,IAAM,IAAN,MAAQ;EACJ,YAAY,GAAG,GAAG,GAAG;AACjB,eAAW,IAAI,IAAI,IAAI,IAAI,EAAE,UAAU,EAAC,GAAI,WAAW,IAAI,IAAI,EAAE,SAAS,IAAI,IAAI,EAAE,SAAS,KAAK,EAAC,GACnG,KAAK,WAAW,GAAG,KAAK,SAAS,GAAG,KAAK,MAAM;EACvD;EACI,IAAI,SAAS;AACT,WAAO,KAAK;EACpB;EACI,QAAQ,GAAG;AACP,WAAO,MAAM,EAAE,WAAW,MAAM,CAAC;EACzC;EACI,MAAM,GAAG;AACL,UAAM,IAAI,KAAK,SAAS,MAAM,KAAK,QAAQ,KAAK,MAAK,CAAE;AACvD,WAAO,aAAa,IAAI,EAAE,QAAS,CAAAA,OAAK;AACpC,QAAE,KAAKA,EAAC;IACpB,CAAS,IAAK,EAAE,KAAK,CAAC,GAAG,KAAK,UAAU,CAAC;EACzC;;EACkE,QAAQ;AAClE,WAAO,KAAK,SAAS,KAAK;EAClC;EACI,SAAS,GAAG;AACR,WAAO,IAAI,WAAW,IAAI,IAAI,GAAG,KAAK,UAAU,KAAK,UAAU,KAAK,SAAS,GAAG,KAAK,SAAS,CAAC;EACvG;EACI,UAAU;AACN,WAAO,KAAK,UAAU,KAAK,UAAU,KAAK,QAAQ,KAAK,SAAS,CAAC;EACzE;EACI,eAAe;AACX,WAAO,KAAK,SAAS,KAAK,MAAM;EACxC;EACI,cAAc;AACV,WAAO,KAAK,IAAI,KAAK,SAAS,CAAC;EACvC;EACI,IAAI,GAAG;AACH,WAAO,KAAK,SAAS,KAAK,SAAS,CAAC;EAC5C;EACI,UAAU;AACN,WAAO,MAAM,KAAK;EAC1B;EACI,WAAW,GAAG;AACV,QAAI,EAAE,SAAS,KAAK;AAAQ,aAAO;AACnC,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ;AAAK,UAAI,KAAK,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC;AAAG,eAAO;AAC3E,WAAO;EACf;EACI,oBAAoB,GAAG;AACnB,QAAI,KAAK,SAAS,MAAM,EAAE;AAAQ,aAAO;AACzC,aAAS,IAAI,GAAG,IAAI,KAAK,QAAQ;AAAK,UAAI,KAAK,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC;AAAG,eAAO;AAC3E,WAAO;EACf;EACI,QAAQ,GAAG;AACP,aAAS,IAAI,KAAK,QAAQ,IAAI,KAAK,MAAK,GAAI,IAAI,GAAG;AAAK,QAAE,KAAK,SAAS,CAAC,CAAC;EAClF;EACI,UAAU;AACN,WAAO,KAAK,SAAS,MAAM,KAAK,QAAQ,KAAK,MAAK,CAAE;EAC5D;EACI,OAAO,WAAW,GAAG,GAAG;AACpB,UAAM,IAAI,KAAK,IAAI,EAAE,QAAQ,EAAE,MAAM;AACrC,aAAS,IAAI,GAAG,IAAI,GAAG,KAAK;AACxB,YAAMC,KAAI,EAAE,IAAI,CAAC,GAAG,IAAI,EAAE,IAAI,CAAC;AAC/B,UAAIA,KAAI;AAAG,eAAO;AAClB,UAAIA,KAAI;AAAG,eAAO;IAC9B;AACQ,WAAO,EAAE,SAAS,EAAE,SAAS,KAAK,EAAE,SAAS,EAAE,SAAS,IAAI;EACpE;AACA;AAOI,IAAM,KAAN,cAAiB,EAAE;EACnB,UAAU,GAAG,GAAG,GAAG;AACf,WAAO,IAAI,GAAG,GAAG,GAAG,CAAC;EAC7B;EACI,kBAAkB;AAId,WAAO,KAAK,QAAO,EAAG,KAAK,GAAG;EACtC;EACI,WAAW;AACP,WAAO,KAAK,gBAAe;EACnC;;;;;;EAKW,OAAO,cAAc,GAAG;AAI3B,UAAM,IAAI,CAAA;AACV,eAAW,KAAK,GAAG;AACf,UAAI,EAAE,QAAQ,IAAI,KAAK;AAAG,cAAM,IAAI,EAAE,GAAG,oBAAoB,wCAAwC;AAEzF,QAAE,KAAK,GAAG,EAAE,MAAM,GAAG,EAAE,OAAQ,CAAAD,OAAKA,GAAE,SAAS,CAAC,CAAE;IAC1E;AACQ,WAAO,IAAI,GAAG,CAAC;EACvB;EACI,OAAO,YAAY;AACf,WAAO,IAAI,GAAG,CAAA,CAAE;EACxB;AACA;AAEA,IAAM,KAAK;AAKP,IAAM,KAAN,cAAiB,EAAE;EACnB,UAAU,GAAG,GAAG,GAAG;AACf,WAAO,IAAI,GAAG,GAAG,GAAG,CAAC;EAC7B;;;;;EAIW,OAAO,kBAAkB,GAAG;AAC/B,WAAO,GAAG,KAAK,CAAC;EACxB;EACI,kBAAkB;AACd,WAAO,KAAK,QAAO,EAAG,IAAK,QAAM,IAAI,EAAE,QAAQ,OAAO,MAAM,EAAE,QAAQ,MAAM,KAAK,GACjF,GAAG,kBAAkB,CAAC,MAAM,IAAI,MAAM,IAAI,MAAM,EAAE,EAAG,KAAK,GAAG;EACrE;EACI,WAAW;AACP,WAAO,KAAK,gBAAe;EACnC;;;;EAGW,aAAa;AAChB,WAAO,MAAM,KAAK,UAAU,eAAe,KAAK,IAAI,CAAC;EAC7D;;;;EAGW,OAAO,WAAW;AACrB,WAAO,IAAI,GAAG,CAAE,UAAU,CAAE;EACpC;;;;;;;;;;;EAUW,OAAO,iBAAiB,GAAG;AAC9B,UAAM,IAAI,CAAA;AACV,QAAI,IAAI,IAAI,IAAI;AAChB,UAAM,IAAI,MAAM;AACZ,UAAI,MAAM,EAAE;AAAQ,cAAM,IAAI,EAAE,GAAG,uBAAuB,4EAA4E;AACtI,QAAE,KAAK,CAAC,GAAG,IAAI;IAC3B;AACQ,QAAI,IAAI;AACR,WAAM,IAAI,EAAE,UAAU;AAClB,YAAMF,KAAI,EAAE,CAAC;AACb,UAAI,SAASA,IAAG;AACZ,YAAI,IAAI,MAAM,EAAE;AAAQ,gBAAM,IAAI,EAAE,GAAG,yCAAyC,CAAC;AACjF,cAAMA,KAAI,EAAE,IAAI,CAAC;AACjB,YAAI,SAASA,MAAK,QAAQA,MAAK,QAAQA;AAAG,gBAAM,IAAI,EAAE,GAAG,uCAAuC,CAAC;AACjG,aAAKA,IAAG,KAAK;MAC7B;AAAmB,gBAAQA,MAAK,IAAI,CAAC,GAAG,OAAO,QAAQA,MAAK,KAAK,KAAKA,IAAG,QAAQ,EAAC,GAAI;IACtF;AACQ,QAAI,EAAC,GAAI;AAAG,YAAM,IAAI,EAAE,GAAG,6BAA6B,CAAC;AACzD,WAAO,IAAI,GAAG,CAAC;EACvB;EACI,OAAO,YAAY;AACf,WAAO,IAAI,GAAG,CAAA,CAAE;EACxB;AACA;AAoBI,IAAM,KAAN,MAAS;EACT,YAAY,GAAG;AACX,SAAK,OAAO;EACpB;EACI,OAAO,SAAS,GAAG;AACf,WAAO,IAAI,GAAG,GAAG,WAAW,CAAC,CAAC;EACtC;EACI,OAAO,SAAS,GAAG;AACf,WAAO,IAAI,GAAG,GAAG,WAAW,CAAC,EAAE,SAAS,CAAC,CAAC;EAClD;EACI,OAAO,QAAQ;AACX,WAAO,IAAI,GAAG,GAAG,UAAS,CAAE;EACpC;EACI,IAAI,kBAAkB;AAClB,WAAO,KAAK,KAAK,QAAO,EAAG,YAAW;EAC9C;;EAC6E,gBAAgB,GAAG;AACxF,WAAO,KAAK,KAAK,UAAU,KAAK,KAAK,KAAK,IAAI,KAAK,KAAK,SAAS,CAAC,MAAM;EAChF;;EACkG,qBAAqB;AAC/G,WAAO,KAAK,KAAK,IAAI,KAAK,KAAK,SAAS,CAAC;EACjD;;EACyE,oBAAoB;AACrF,WAAO,KAAK,KAAK,QAAO;EAChC;EACI,QAAQ,GAAG;AACP,WAAO,SAAS,KAAK,MAAM,GAAG,WAAW,KAAK,MAAM,EAAE,IAAI;EAClE;EACI,WAAW;AACP,WAAO,KAAK,KAAK,SAAQ;EACjC;EACI,OAAO,WAAW,GAAG,GAAG;AACpB,WAAO,GAAG,WAAW,EAAE,MAAM,EAAE,IAAI;EAC3C;EACI,OAAO,cAAc,GAAG;AACpB,WAAO,EAAE,SAAS,KAAK;EAC/B;;;;;;;EAMW,OAAO,aAAa,GAAG;AAC1B,WAAO,IAAI,GAAG,IAAI,GAAG,EAAE,MAAK,CAAE,CAAC;EACvC;AACA;AAiBI,SAAS,GAAG,GAAG,GAAG,GAAG;AACrB,MAAI,CAAC;AAAG,UAAM,IAAI,EAAE,GAAG,YAAY,sCAAsC,IAAI;AACjF;AAUA,SAAS,GAAG,GAAG;AACX,MAAI,CAAC,GAAG,cAAc,CAAC;AAAG,UAAM,IAAI,EAAE,GAAG,6FAA6F,SAAS,EAAE,SAAS;AAC9J;AAKI,SAAS,GAAG,GAAG;AACf,MAAI,GAAG,cAAc,CAAC;AAAG,UAAM,IAAI,EAAE,GAAG,gGAAgG,SAAS,EAAE,SAAS;AAChK;AAOA,SAAS,GAAG,GAAG;AACX,MAAI,WAAW;AAAG,WAAO;AACzB,MAAI,SAAS;AAAG,WAAO;AACvB,MAAI,YAAY,OAAO;AAAG,WAAO,EAAE,SAAS,OAAO,IAAI,GAAG,EAAE,UAAU,GAAG,EAAE,SAC3E,KAAK,UAAU,CAAC;AAChB,MAAI,YAAY,OAAO,KAAK,aAAa,OAAO;AAAG,WAAO,KAAK;AAC/D,MAAI,YAAY,OAAO,GAAG;AACtB,QAAI,aAAa;AAAO,aAAO;AAC/B;AACI,YAAM;;QAEN,SAASE,IAAG;AACR,cAAIA,GAAE;AAAa,mBAAOA,GAAE,YAAY;AACxC,iBAAO;QACvB,EAQK,CAAC;;AACM,aAAO,IAAI,YAAY,aAAa;IAChD;EACA;AACI,SAAO,cAAc,OAAO,IAAI,eAAe,EAAC;AACpD;AAEA,SAAS,GAAG,GAEZ,GAAG;AACC,MAAI,eAAe;;GAGnB,IAAI,EAAE,YAAY,EAAE,aAAa,IAAI;AACjC,QAAI,EAAE,SAAS,EAAE,YAAY;AAAM,YAAM,IAAI,EAAE,GAAG,qGAAqG;AACvJ;AACI,YAAM,IAAI,GAAG,CAAC;AACd,YAAM,IAAI,EAAE,GAAG,kBAAkB,EAAE,sBAAsB,GAAG;IACxE;EACA;AACI,SAAO;AACX;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,MAAI,KAAK;AAAG,UAAM,IAAI,EAAE,GAAG,YAAY,+CAA+C,IAAI;AAC9F;AAqBI,IAAI,KAAK;AAwBb,SAAS,KAAK;AACV,SAAO,SAAS,KAAK,KAAK,YAAY,KAAK,MAAM,aAAa,KAAK,OAAM,CAAE,IAAI,MAC/E,OAAO,GAAG,SAAS,EAAE;AACzB;AAoBI,SAAS,GAAG,GAAG;AACf,SAAO,QAAQ;AACnB;AAEgD,SAAS,GAAG,GAAG;AAG3D,SAAO,MAAM,KAAK,IAAI,KAAK,KAAK;AACpC;AAsBA,IAAM,KAAK;EACP,mBAAmB;EACnB,QAAQ;EACR,UAAU;EACV,qBAAqB;AACzB;AAiCA,IAAI;AAAJ,IAAQ;AASR,SAAS,GAAG,GAAG;AACX,MAAI,WAAW;AAAG,WAAO,EAAE,aAAa,0BAA0B,GAAG;AAOjE,UAAQ,GAAC;IACX,KAAK;AAEH,aAAO;IAET,KAAK;AAEH,aAAO;IAKD,KAAK;AAEX,aAAO;IAET,KAAK;AAEH,aAAO;IAET,KAAK;AAEH,aAAO;IAET,KAAK;AAEH,aAAO;IAID,KAAK;AAEX,aAAO;IAET,KAAK;AAEH,aAAO;IAET,KAAK;AAEH,aAAO;IAET,KAAK;AAEH,aAAO;IAKD,KAAK;AAEX,aAAO;IAET,KAAK;AAEH,aAAO;IAET,KAAK;AAEH,aAAO;IAET;AACE,aAAO,KAAK,OAAO,IAAI,MAAM,IAAI,KAAK,OAAO,IAAI,MAAM,IAAI,KAAK,OAAO,IAAI,MAAM,IAAI;EAC7F;AACA;CAqBK,KAAK,OAAO,KAAK,CAAA,IAAK,GAAG,KAAK,CAAC,IAAI,MAAM,GAAG,GAAG,YAAY,CAAC,IAAI,aACrE,GAAG,GAAG,UAAU,CAAC,IAAI,WAAW,GAAG,GAAG,mBAAmB,CAAC,IAAI,oBAC9D,GAAG,GAAG,oBAAoB,CAAC,IAAI,qBAAqB,GAAG,GAAG,YAAY,CAAC,IAAI,aAC3E,GAAG,GAAG,iBAAiB,CAAC,IAAI,kBAAkB,GAAG,GAAG,oBAAoB,CAAC,IAAI,qBAC7E,GAAG,GAAG,kBAAkB,EAAE,IAAI,mBAAmB,GAAG,GAAG,qBAAqB,CAAC,IAAI,sBACjF,GAAG,GAAG,sBAAsB,CAAC,IAAI,uBAAuB,GAAG,GAAG,UAAU,EAAE,IAAI,WAC9E,GAAG,GAAG,eAAe,EAAE,IAAI,gBAAgB,GAAG,GAAG,gBAAgB,EAAE,IAAI,iBACvE,GAAG,GAAG,WAAW,EAAE,IAAI,YAAY,GAAG,GAAG,cAAc,EAAE,IAAI,eAAe,GAAG,GAAG,YAAY,EAAE,IAAI;AAEpG,IAAM,KAAN;;;;AAKA,MAAM;EACF,YAAY,GAAG;AACX,SAAK,eAAe,GAAG,KAAK,aAAa,EAAE;AAC3C,UAAM,IAAI,EAAE,MAAM,UAAU;AAC5B,SAAK,IAAI,IAAI,QAAQ,EAAE,MAAM,KAAK,IAAI,cAAc,KAAK,WAAW,YAAY,gBAAgB,KAAK,WAAW,WAAW;EACnI;EACI,IAAI,IAAI;AAGJ,WAAO;EACf;EACI,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG;AACb,UAAM,IAAI,GAAE,GAAI,IAAI,KAAK,EAAE,GAAG,CAAC;AAC/B,MAAE,kBAAkB,gBAAgB,MAAM,MAAM,GAAG,CAAC;AACpD,UAAM,IAAI,CAAA;AACV,WAAO,KAAK,EAAE,GAAG,GAAG,CAAC,GAAG,KAAK,EAAE,GAAG,GAAG,GAAG,CAAC,EAAE,KAAM,CAAAF,QAAM,EAAE,kBAAkB,iBAAiB,MAAM,OAAOA,EAAC,GAC1GA,KAAM,CAAAA,OAAK;AACP,YAAM,EAAE,kBAAkB,QAAQ,MAAM,yBAAyBA,IAAG,SAAS,GAAG,YAAY,CAAC,GAC7FA;IACZ,CAAS;EACT;EACI,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAGhB,WAAO,KAAK,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC;EACnC;;;;;EAIW,EAAE,GAAG,GAAG,GAAG;AACd,MAAE,mBAAmB,IAAI,iBAAiB;;;;IAK1C,EAAE,cAAc,IAAI,cAAc,KAAK,aAAa,UAAU,EAAE,kBAAkB,IAAI,KAAK,aAAa,QACxG,KAAK,EAAE,QAAQ,QAAS,CAACA,IAAGG,OAAM,EAAEA,EAAC,IAAIH,EAAC,GAAI,KAAK,EAAE,QAAQ,QAAS,CAACA,IAAGG,OAAM,EAAEA,EAAC,IAAIH,EAAC;EAChG;EACI,EAAE,GAAG,GAAG;AACJ,UAAM,IAAI,GAAG,CAAC;AACd,WAAO,GAAG,KAAK,QAAQ,KAAK;EACpC;AACA,EAAE;;;;;EAKE,YAAY,GAAG,GAAG;AACd,UAAM,CAAC,GAAG,KAAK,IAAI;EAC3B;EACI,EAAE,GAAG,GAAG;AACJ,UAAM,IAAI,MAAM,kCAAkC;EAC1D;EACI,MAAM,EAAE,GAAG,GAAG,GAAG,GAAG;AAChB,QAAI;AACJ,UAAM,IAAI,KAAK,UAAU,CAAC;AAC1B,QAAI;AACJ,QAAI;AACA,UAAI,MAAM,KAAK,EAAE,GAAG;QAChB,QAAQ;QACR,SAAS;QACT,MAAM;MACtB,CAAa;IACb,SAAiBE,IAAP;AACE,YAAMF,KAAIE;AACV,YAAM,IAAI,EAAE,GAAGF,GAAE,MAAM,GAAG,gCAAgCA,GAAE,UAAU;IAClF;AACQ,QAAI,CAAC,EAAE,IAAI;AACP,UAAIE,KAAI,MAAM,EAAE,KAAI;AACpB,YAAM,QAAQA,EAAC,MAAMA,KAAIA,GAAE,CAAC;AAC5B,YAAMF,KAAI,UAAU,IAAI,QAAQE,KAAI,SAASA,GAAE,UAAU,WAAW,IAAI,SAAS,EAAE;AACnF,YAAM,IAAI,EAAE,GAAG,EAAE,MAAM,GAAG,8BAA8B,QAAQF,KAAIA,KAAI,EAAE,YAAY;IAClG;AACQ,WAAO,EAAE,KAAI;EACrB;AACA;AAmCA,IAAM,KAAK;AAKP,IAAM,KAAN,MAAS;;;;;EAKT,YAAY,GAAG;AACX,SAAK,QAAQ;EACrB;;;;EAGW,OAAO,EAAE,GAAG;AACf,WAAO,GAAG,KAAK,CAAC;EACxB;;;;EAGW,kBAAkB;AACrB,QAAI,IAAI,KAAK,MAAM,QAAQ,OAAO,MAAM,EAAE,QAAQ,MAAM,KAAK;AAC7D,WAAO,GAAG,EAAE,CAAC,MAAM,IAAI,MAAM,IAAI,MAAM;EAC/C;AACA;AAoBI,IAAM,KAAN,MAAS;EACT,YAAY,GAAG,GAAG,GAAG;AACjB,SAAK,QAAQ,GAAG,KAAK,IAAI,GAAG,KAAK,YAAY;EACrD;AACA;AAsBI,SAAS,GAAG,GAAG;AAEf,QAAM;;IAEN,eAAe,OAAO,SAAS,KAAK,UAAU,KAAK;KAAW,IAAI,IAAI,WAAW,CAAC;AAClF,MAAI,KAAK,cAAc,OAAO,EAAE;AAAiB,MAAE,gBAAgB,CAAC;;AAEpE,aAASA,KAAI,GAAGA,KAAI,GAAGA;AAAK,QAAEA,EAAC,IAAI,KAAK,MAAM,MAAM,KAAK,OAAM,CAAE;AACjE,SAAO;AACX;AAiBI,IAAM,KAAN,MAAS;EACT,OAAO,IAAI;AAEP,UAAM,IAAI,kEAAkE,IAAI,KAAK,MAAM,MAAM,EAAE,MAAM,IAAI,EAAE;AAEvG,QAAI,IAAI;AAChB,WAAM,EAAE,SAAS,MAAM;AACnB,YAAM,IAAI,GAAG,EAAE;AACf,eAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,EAAE;AAGhC,UAAE,SAAS,MAAM,EAAE,CAAC,IAAI,MAAM,KAAK,EAAE,OAAO,EAAE,CAAC,IAAI,EAAE,MAAM;IACvE;AACQ,WAAO;EACf;AACA;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI;AACpC;AAEiD,SAAS,GAAG,GAAG,GAAG,GAAG;AAClE,SAAO,EAAE,WAAW,EAAE,UAAU,EAAE,MAAO,CAACE,IAAG,MAAM,EAAEA,IAAG,EAAE,CAAC,CAAC,CAAC;AACjE;AAiBI,SAAS,GAAG,GAAG;AACf,MAAI,IAAI;AACR,aAAW,KAAK;AAAG,WAAO,UAAU,eAAe,KAAK,GAAG,CAAC,KAAK;AACjE,SAAO;AACX;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,aAAW,KAAK;AAAG,WAAO,UAAU,eAAe,KAAK,GAAG,CAAC,KAAK,EAAE,GAAG,EAAE,CAAC,CAAC;AAC9E;AAqBA,IAAM,KAAN,cAAiB,MAAM;EACnB,cAAc;AACV,UAAM,GAAG,SAAS,GAAG,KAAK,OAAO;EACzC;AACA;AA4CA,IAAM,KAAN,MAAS;EACL,YAAY,GAAG;AACX,SAAK,eAAe;EAC5B;EACI,OAAO,iBAAiB,GAAG;AACvB,UAAM,IAAI,SAASA,IAAG;AAClB,UAAI;AACA,eAAO,KAAKA,EAAC;MAC7B,SAAqBA,IAAP;AACE,cAAMA,cAAa,eAAe,IAAI,GAAG,4BAA4BA,EAAC,IAAIA;MAC1F;IACA,EACqE,CAAC;AAC9D,WAAO,IAAI,GAAG,CAAC;EACvB;EACI,OAAO,eAAe,GAAG;AAGrB,UAAM;;;;MAIN,SAASA,IAAG;AACR,YAAIF,KAAI;AACR,iBAAS,IAAI,GAAG,IAAIE,GAAE,QAAQ,EAAE;AAAG,UAAAF,MAAK,OAAO,aAAaE,GAAE,CAAC,CAAC;AAChE,eAAOF;MACnB,EAGK,CAAC;;AACE,WAAO,IAAI,GAAG,CAAC;EACvB;EACI,CAAC,OAAO,QAAQ,IAAI;AAChB,QAAI,IAAI;AACR,WAAO;MACH,MAAM,MAAM,IAAI,KAAK,aAAa,SAAS;QACvC,OAAO,KAAK,aAAa,WAAW,GAAG;QACvC,MAAM;MACtB,IAAgB;QACA,OAAO;QACP,MAAM;MACtB;IACA;EACA;EACI,WAAW;AACP,WAAO,IAAI,KAAK,cAAc,KAAK,CAAC;AACpC,QAAI;EACZ;EACI,eAAe;AACX,WAAO,SAAS,GAAG;AACf,YAAM,IAAI,IAAI,WAAW,EAAE,MAAM;AACjC,eAAS,IAAI,GAAG,IAAI,EAAE,QAAQ;AAAK,UAAE,CAAC,IAAI,EAAE,WAAW,CAAC;AACxD,aAAO;IACnB,EAkBS,KAAK,YAAY;EAC1B;EACI,sBAAsB;AAClB,WAAO,IAAI,KAAK,aAAa;EACrC;EACI,UAAU,GAAG;AACT,WAAO,GAAG,KAAK,cAAc,EAAE,YAAY;EACnD;EACI,QAAQ,GAAG;AACP,WAAO,KAAK,iBAAiB,EAAE;EACvC;AACA;AAEA,GAAG,oBAAoB,IAAI,GAAG,EAAE;AAEhC,IAAM,KAAK,IAAI,OAAO,+CAA+C;AAKjE,SAAS,GAAG,GAAG;AAIf,MAAI,EAAE,CAAC,CAAC,CAAC,GAAG,YAAY,OAAO,GAAG;AAI9B,QAAI,IAAI;AACR,UAAM,IAAI,GAAG,KAAK,CAAC;AACnB,QAAI,EAAE,CAAC,CAAC,CAAC,GAAG,EAAE,CAAC,GAAG;AAEd,UAAIE,KAAI,EAAE,CAAC;AACX,MAAAA,MAAKA,KAAI,aAAa,OAAO,GAAG,CAAC,GAAG,IAAI,OAAOA,EAAC;IAC5D;AAEgB,UAAM,IAAI,IAAI,KAAK,CAAC;AAC5B,WAAO;MACH,SAAS,KAAK,MAAM,EAAE,QAAO,IAAK,GAAG;MACrC,OAAO;IACnB;EACA;AACI,SAAO;IACH,SAAS,GAAG,EAAE,OAAO;IACrB,OAAO,GAAG,EAAE,KAAK;EACzB;AACA;AAKI,SAAS,GAAG,GAAG;AAEf,SAAO,YAAY,OAAO,IAAI,IAAI,YAAY,OAAO,IAAI,OAAO,CAAC,IAAI;AACzE;AAEsE,SAAS,GAAG,GAAG;AACjF,SAAO,YAAY,OAAO,IAAI,GAAG,iBAAiB,CAAC,IAAI,GAAG,eAAe,CAAC;AAC9E;AAiCA,IAAM,KAAN,MAAS;;;;;;;;;;;;EAYL,YAIA,GAIA,GAAG;AACC,QAAI,KAAK,UAAU,GAAG,KAAK,cAAc,GAAG,IAAI;AAAG,YAAM,IAAI,EAAE,GAAG,yCAAyC,CAAC;AAC5G,QAAI,KAAK;AAAK,YAAM,IAAI,EAAE,GAAG,yCAAyC,CAAC;AACvE,QAAI,IAAI;AAAc,YAAM,IAAI,EAAE,GAAG,qCAAqC,CAAC;AAEnE,QAAI,KAAK;AAAc,YAAM,IAAI,EAAE,GAAG,qCAAqC,CAAC;EAC5F;;;;;;EAKW,OAAO,MAAM;AAChB,WAAO,GAAG,WAAW,KAAK,IAAG,CAAE;EACvC;;;;;;;;EAOW,OAAO,SAAS,GAAG;AACtB,WAAO,GAAG,WAAW,EAAE,QAAO,CAAE;EACxC;;;;;;;;;EAQW,OAAO,WAAW,GAAG;AACxB,UAAM,IAAI,KAAK,MAAM,IAAI,GAAG,GAAG,IAAI,KAAK,MAAM,OAAO,IAAI,MAAM,EAAE;AACjE,WAAO,IAAI,GAAG,GAAG,CAAC;EAC1B;;;;;;;;;EAQW,SAAS;AACZ,WAAO,IAAI,KAAK,KAAK,SAAQ,CAAE;EACvC;;;;;;;;EAOW,WAAW;AACd,WAAO,MAAM,KAAK,UAAU,KAAK,cAAc;EACvD;EACI,WAAW,GAAG;AACV,WAAO,KAAK,YAAY,EAAE,UAAU,GAAG,KAAK,aAAa,EAAE,WAAW,IAAI,GAAG,KAAK,SAAS,EAAE,OAAO;EAC5G;;;;;;;EAMW,QAAQ,GAAG;AACd,WAAO,EAAE,YAAY,KAAK,WAAW,EAAE,gBAAgB,KAAK;EACpE;;EACoE,WAAW;AACvE,WAAO,uBAAuB,KAAK,UAAU,mBAAmB,KAAK,cAAc;EAC3F;;EAC8E,SAAS;AAC/E,WAAO;MACH,SAAS,KAAK;MACd,aAAa,KAAK;IAC9B;EACA;;;;;EAIW,UAAU;AAQb,UAAM,IAAI,KAAK,UAAU;AAGjB,WAAO,OAAO,CAAC,EAAE,SAAS,IAAI,GAAG,IAAI,MAAM,OAAO,KAAK,WAAW,EAAE,SAAS,GAAG,GAAG;EACnG;AACA;AAmCI,SAAS,GAAG,GAAG;AACf,MAAI,GAAG;AACP,SAAO,wBAAwB,UAAU,MAAM,UAAU,IAAI,QAAQ,IAAI,SAAS,EAAE,aAAa,WAAW,IAAI,SAAS,EAAE,WAAW,CAAA,GAAI,aAAa,WAAW,IAAI,SAAS,EAAE;AACrL;AAOI,SAAS,GAAG,GAAG;AACf,QAAM,IAAI,EAAE,SAAS,OAAO;AAC5B,SAAO,GAAG,CAAC,IAAI,GAAG,CAAC,IAAI;AAC3B;AAII,SAAS,GAAG,GAAG;AACf,QAAM,IAAI,GAAG,EAAE,SAAS,OAAO,qBAAqB,cAAc;AAClE,SAAO,IAAI,GAAG,EAAE,SAAS,EAAE,KAAK;AACpC;AAiBI,IAAM,KAAK;EACX,QAAQ;IACJ,UAAU;MACN,aAAa;IACzB;EACA;AACA;AAGA,SAAS,GAAG,GAAG;AACX,SAAO,eAAe,IAAI,IAA8B,kBAAkB,IAAI,IAAiC,kBAAkB,KAAK,iBAAiB,IAAI,IAAgC,oBAAoB,IAAI,IAAmC,iBAAiB,IAAI,IAAgC,gBAAgB,IAAI,IAA8B,oBAAoB,IAAI,IAA6B,mBAAmB,IAAI,IAAkC,gBAAgB,IAAI,IAA+B,cAAc,IAAI,GAAG,CAAC,IAAI;;IAExhB,SAASA,IAAG;AACR,aAAO,iBAAiBA,GAAE,YAAY,CAAA,GAAI,UAAU,CAAA,GAAI,YAAY,CAAA,GAAI;IAChF,EA8BK,CAAC,IAAI,mBAA4C;MAAiC,EAAC;AACxF;AAE6E,SAAS,GAAG,GAAG,GAAG;AAC3F,MAAI,MAAM;AAAG,WAAO;AACpB,QAAM,IAAI,GAAG,CAAC;AACd,MAAI,MAAM,GAAG,CAAC;AAAG,WAAO;AACxB,UAAQ,GAAC;IACP,KAAK;IACL,KAAK;AACH,aAAO;IAET,KAAK;AACH,aAAO,EAAE,iBAAiB,EAAE;IAE9B,KAAK;AACH,aAAO,GAAG,CAAC,EAAE,QAAQ,GAAG,CAAC,CAAC;IAE5B,KAAK;AACH,aAAO,SAASA,IAAGF,IAAG;AAClB,YAAI,YAAY,OAAOE,GAAE,kBAAkB,YAAY,OAAOF,GAAE,kBAAkBE,GAAE,eAAe,WAAWF,GAAE,eAAe;AAE/H,iBAAOE,GAAE,mBAAmBF,GAAE;AAC9B,cAAMG,KAAI,GAAGD,GAAE,cAAc,GAAG,IAAI,GAAGF,GAAE,cAAc;AACvD,eAAOG,GAAE,YAAY,EAAE,WAAWA,GAAE,UAAU,EAAE;MAC5D,EAAU,GAAG,CAAC;IAER,KAAK;AACH,aAAO,EAAE,gBAAgB,EAAE;IAE7B,KAAK;AACH,aAAO,SAASD,IAAGF,IAAG;AAClB,eAAO,GAAGE,GAAE,UAAU,EAAE,QAAQ,GAAGF,GAAE,UAAU,CAAC;MAC5D,EAAU,GAAG,CAAC;IAER,KAAK;AACH,aAAO,EAAE,mBAAmB,EAAE;IAEhC,KAAK;AACH,aAAO,SAASE,IAAGF,IAAG;AAClB,eAAO,GAAGE,GAAE,cAAc,QAAQ,MAAM,GAAGF,GAAE,cAAc,QAAQ,KAAK,GAAGE,GAAE,cAAc,SAAS,MAAM,GAAGF,GAAE,cAAc,SAAS;MAClJ,EAAU,GAAG,CAAC;IAER,KAAK;AACH,aAAO,SAASE,IAAGF,IAAG;AAClB,YAAI,kBAAkBE,MAAK,kBAAkBF;AAAG,iBAAO,GAAGE,GAAE,YAAY,MAAM,GAAGF,GAAE,YAAY;AAC/F,YAAI,iBAAiBE,MAAK,iBAAiBF,IAAG;AAC1C,gBAAMG,KAAI,GAAGD,GAAE,WAAW,GAAG,IAAI,GAAGF,GAAE,WAAW;AACjD,iBAAOG,OAAM,IAAI,GAAGA,EAAC,MAAM,GAAG,CAAC,IAAI,MAAMA,EAAC,KAAK,MAAM,CAAC;QACtE;AACY,eAAO;MACnB,EAAU,GAAG,CAAC;IAER,KAAK;AACH,aAAO,GAAG,EAAE,WAAW,UAAU,CAAA,GAAI,EAAE,WAAW,UAAU,CAAA,GAAI,EAAE;IAEpE,KAAK;AACH,aAAO,SAASD,IAAGF,IAAG;AAClB,cAAMG,KAAID,GAAE,SAAS,UAAU,CAAA,GAAI,IAAIF,GAAE,SAAS,UAAU,CAAA;AAC5D,YAAI,GAAGG,EAAC,MAAM,GAAG,CAAC;AAAG,iBAAO;AAC5B,mBAAWD,MAAKC;AAAG,cAAIA,GAAE,eAAeD,EAAC,MAAM,WAAW,EAAEA,EAAC,KAAK,CAAC,GAAGC,GAAED,EAAC,GAAG,EAAEA,EAAC,CAAC;AAAI,mBAAO;AAC3F,eAAO;MACnB,EAC+E,GAAG,CAAC;IAE7E;AACE,aAAO,EAAC;EAChB;AACA;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO,YAAY,EAAE,UAAU,CAAA,GAAI,KAAM,CAAAA,OAAK,GAAGA,IAAG,CAAC,CAAC;AAC1D;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,MAAI,MAAM;AAAG,WAAO;AACpB,QAAM,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC;AACzB,MAAI,MAAM;AAAG,WAAO,GAAG,GAAG,CAAC;AAC3B,UAAQ,GAAC;IACP,KAAK;IACL,KAAK;AACH,aAAO;IAET,KAAK;AACH,aAAO,GAAG,EAAE,cAAc,EAAE,YAAY;IAE1C,KAAK;AACH,aAAO,SAASA,IAAGF,IAAG;AAClB,cAAMG,KAAI,GAAGD,GAAE,gBAAgBA,GAAE,WAAW,GAAGE,KAAI,GAAGJ,GAAE,gBAAgBA,GAAE,WAAW;AACrF,eAAOG,KAAIC,KAAI,KAAKD,KAAIC,KAAI,IAAID,OAAMC,KAAI;;UAE1C,MAAMD,EAAC,IAAI,MAAMC,EAAC,IAAI,IAAI,KAAK;;MAC3C,EAAU,GAAG,CAAC;IAER,KAAK;AACH,aAAO,GAAG,EAAE,gBAAgB,EAAE,cAAc;IAE9C,KAAK;AACH,aAAO,GAAG,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC;IAExB,KAAK;AACH,aAAO,GAAG,EAAE,aAAa,EAAE,WAAW;IAExC,KAAK;AACH,aAAO,SAASF,IAAGF,IAAG;AAClB,cAAMG,KAAI,GAAGD,EAAC,GAAGE,KAAI,GAAGJ,EAAC;AACzB,eAAOG,GAAE,UAAUC,EAAC;MAChC,EAAU,EAAE,YAAY,EAAE,UAAU;IAE9B,KAAK;AACH,aAAO,SAASF,IAAGF,IAAG;AAClB,cAAMG,KAAID,GAAE,MAAM,GAAG,GAAGE,KAAIJ,GAAE,MAAM,GAAG;AACvC,iBAASE,KAAI,GAAGA,KAAIC,GAAE,UAAUD,KAAIE,GAAE,QAAQF,MAAK;AAC/C,gBAAMF,KAAI,GAAGG,GAAED,EAAC,GAAGE,GAAEF,EAAC,CAAC;AACvB,cAAI,MAAMF;AAAG,mBAAOA;QACpC;AACY,eAAO,GAAGG,GAAE,QAAQC,GAAE,MAAM;MACxC,EAAU,EAAE,gBAAgB,EAAE,cAAc;IAEtC,KAAK;AACH,aAAO,SAASF,IAAGF,IAAG;AAClB,cAAMG,KAAI,GAAG,GAAGD,GAAE,QAAQ,GAAG,GAAGF,GAAE,QAAQ,CAAC;AAC3C,YAAI,MAAMG;AAAG,iBAAOA;AACpB,eAAO,GAAG,GAAGD,GAAE,SAAS,GAAG,GAAGF,GAAE,SAAS,CAAC;MACtD,EAAU,EAAE,eAAe,EAAE,aAAa;IAEpC,KAAK;AACH,aAAO,SAASE,IAAGF,IAAG;AAClB,cAAMG,KAAID,GAAE,UAAU,CAAA,GAAIE,KAAIJ,GAAE,UAAU,CAAA;AAC1C,iBAASE,KAAI,GAAGA,KAAIC,GAAE,UAAUD,KAAIE,GAAE,QAAQ,EAAEF,IAAG;AAC/C,gBAAMF,KAAI,GAAGG,GAAED,EAAC,GAAGE,GAAEF,EAAC,CAAC;AACvB,cAAIF;AAAG,mBAAOA;QAC9B;AACY,eAAO,GAAGG,GAAE,QAAQC,GAAE,MAAM;MACxC,EAAU,EAAE,YAAY,EAAE,UAAU;IAE9B,KAAK;AACH,aAAO,SAASF,IAAGF,IAAG;AAClB,YAAIE,OAAM,MAAMF,OAAM;AAAI,iBAAO;AACjC,YAAIE,OAAM;AAAI,iBAAO;AACrB,YAAIF,OAAM;AAAI,iBAAO;AACrB,cAAMG,KAAID,GAAE,UAAU,CAAA,GAAIE,KAAI,OAAO,KAAKD,EAAC,GAAG,IAAIH,GAAE,UAAU,CAAA,GAAI,IAAI,OAAO,KAAK,CAAC;AAKnF,QAAAI,GAAE,KAAI,GAAI,EAAE,KAAI;AAChB,iBAASF,KAAI,GAAGA,KAAIE,GAAE,UAAUF,KAAI,EAAE,QAAQ,EAAEA,IAAG;AAC/C,gBAAMF,KAAI,GAAGI,GAAEF,EAAC,GAAG,EAAEA,EAAC,CAAC;AACvB,cAAI,MAAMF;AAAG,mBAAOA;AACpB,gBAAM,IAAI,GAAGG,GAAEC,GAAEF,EAAC,CAAC,GAAG,EAAE,EAAEA,EAAC,CAAC,CAAC;AAC7B,cAAI,MAAM;AAAG,mBAAO;QACpC;AACY,eAAO,GAAGE,GAAE,QAAQ,EAAE,MAAM;MACxC,EAC6E,EAAE,UAAU,EAAE,QAAQ;IAE7F;AACE,YAAM,EAAC;EACf;AACA;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,MAAI,YAAY,OAAO,KAAK,YAAY,OAAO,KAAK,EAAE,WAAW,EAAE;AAAQ,WAAO,GAAG,GAAG,CAAC;AACzF,QAAM,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,GAAG,EAAE,SAAS,EAAE,OAAO;AACvD,SAAO,MAAM,IAAI,IAAI,GAAG,EAAE,OAAO,EAAE,KAAK;AAC5C;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO;IACH,gBAAgB,YAAY,EAAE,uBAAuB,EAAE,sBAAsB,EAAE,KAAK,gBAAe;EAC3G;AACA;AAEiD,SAAS,GAAG,GAAG;AAC5D,SAAO,CAAC,CAAC,KAAK,gBAAgB;AAClC;AAE+C,SAAS,GAAG,GAAG;AAC1D,SAAO,CAAC,CAAC,KAAK,eAAe;AACjC;AAEuC,SAAS,GAAG,GAAG;AAClD,SAAO,CAAC,CAAC,KAAK,iBAAiB,KAAK,MAAM,OAAO,EAAE,WAAW,CAAC;AACnE;AAE8C,SAAS,GAAG,GAAG;AACzD,SAAO,CAAC,CAAC,KAAK,cAAc;AAChC;AAEwC,SAAS,GAAG,GAAG;AACnD,MAAI,EAAE;AAAe,WAAO;MACxB,eAAe,OAAO,OAAO,CAAA,GAAI,EAAE,aAAa;IACxD;AACI,MAAI,EAAE,kBAAkB,YAAY,OAAO,EAAE;AAAgB,WAAO;MAChE,gBAAgB,OAAO,OAAO,CAAA,GAAI,EAAE,cAAc;IAC1D;AACI,MAAI,EAAE,UAAU;AACZ,UAAM,IAAI;MACN,UAAU;QACN,QAAQ,CAAA;MACxB;IACA;AACQ,WAAO,GAAG,EAAE,SAAS,QAAS,CAACF,IAAG,MAAM,EAAE,SAAS,OAAOA,EAAC,IAAI,GAAG,CAAC,CAAC,GAAI;EAChF;AACI,MAAI,EAAE,YAAY;AACd,UAAM,IAAI;MACN,YAAY;QACR,QAAQ,CAAA;MACxB;IACA;AACQ,aAAS,IAAI,GAAG,KAAK,EAAE,WAAW,UAAU,CAAA,GAAI,QAAQ,EAAE;AAAG,QAAE,WAAW,OAAO,CAAC,IAAI,GAAG,EAAE,WAAW,OAAO,CAAC,CAAC;AAC/G,WAAO;EACf;AACI,SAAO,OAAO,OAAO,CAAA,GAAI,CAAC;AAC9B;AAEA,IAAM,KAAN,MAAS;EACL,YAAY,GAAG,GAAG;AACd,SAAK,WAAW,GAAG,KAAK,YAAY;EAC5C;AACA;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,MAAI,SAAS;AAAG,WAAO,SAAS;AAChC,MAAI,SAAS;AAAG,WAAO;AACvB,MAAI,EAAE,cAAc,EAAE,aAAa,EAAE,SAAS,WAAW,EAAE,SAAS;AAAQ,WAAO;AACnF,WAAS,IAAI,GAAG,IAAI,EAAE,SAAS,QAAQ,KAAK;AACxC,QAAI,CAAC,GAAG,EAAE,SAAS,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;AAAG,aAAO;EACtD;AACI,SAAO;AACX;AAiBI,IAAM,KAAN,MAAS;AAAA;AAEb,IAAM,KAAN,cAAiB,GAAG;EAChB,YAAY,GAAG,GAAG,GAAG;AACjB,UAAK,GAAI,KAAK,QAAQ,GAAG,KAAK,KAAK,GAAG,KAAK,QAAQ;EAC3D;;;;EAGW,OAAO,OAAO,GAAG,GAAG,GAAG;AAC1B,WAAO,EAAE,WAAU,IAAK,SAA2B,KAAK,aAAmC,IAAI,KAAK,uBAAuB,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,IAAI,qBAAmD,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,SAA2B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,aAAmC,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,yBAA2D,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC;EACta;EACI,OAAO,uBAAuB,GAAG,GAAG,GAAG;AACnC,WAAO,SAA2B,IAAI,IAAI,GAAG,GAAG,CAAC,IAAI,IAAI,GAAG,GAAG,CAAC;EACxE;EACI,QAAQ,GAAG;AACP,UAAM,IAAI,EAAE,KAAK,MAAM,KAAK,KAAK;AAEzB,WAAO,SAAkC,KAAK,KAAK,SAAS,KAAK,KAAK,kBAAkB,GAAG,GAAG,KAAK,KAAK,CAAC,IAAI,SAAS,KAAK,GAAG,KAAK,KAAK,MAAM,GAAG,CAAC,KAAK,KAAK,kBAAkB,GAAG,GAAG,KAAK,KAAK,CAAC;EAE/M;EACI,kBAAkB,GAAG;AACjB,YAAQ,KAAK,IAAE;MACb,KAAK;AACH,eAAO,IAAI;MAEb,KAAK;AACH,eAAO,KAAK;MAEd,KAAK;AACH,eAAO,MAAM;MAEf,KAAK;AACH,eAAO,MAAM;MAEf,KAAK;AACH,eAAO,IAAI;MAEb,KAAK;AACH,eAAO,KAAK;MAEd;AACE,eAAO,EAAC;IACpB;EACA;EACI,eAAe;AACX,WAAO;MAAE;MAA+B;MAAyC;MAAkC;MAA4C;MAAgC;;IAAQ,EAAyB,QAAQ,KAAK,EAAE,KAAK;EAC5P;EACI,sBAAsB;AAClB,WAAO,CAAE,IAAI;EACrB;EACI,aAAa;AACT,WAAO,CAAE,IAAI;EACrB;EACI,0BAA0B;AACtB,WAAO,KAAK,aAAY,IAAK,KAAK,QAAQ;EAClD;AACA;AAEA,IAAM,KAAN,cAAiB,GAAG;EAChB,YAAY,GAAG,GAAG;AACd,UAAK,GAAI,KAAK,UAAU,GAAG,KAAK,KAAK,GAAG,KAAK,IAAI;EACzD;;;;EAGW,OAAO,OAAO,GAAG,GAAG;AACvB,WAAO,IAAI,GAAG,GAAG,CAAC;EAC1B;EACI,QAAQ,GAAG;AACP,WAAO,UAAsC,KAAK,KAAK,WAAW,KAAK,QAAQ,KAAM,OAAK,CAAC,EAAE,QAAQ,CAAC,CAAC,IAAK,WAAW,KAAK,QAAQ,KAAM,OAAK,EAAE,QAAQ,CAAC,CAAC;EACnK;EACI,sBAAsB;AAClB,WAAO,SAAS,KAAK,MAAM,KAAK,IAAI,KAAK,QAAQ,OAAQ,CAAC,GAAG,MAAM,EAAE,OAAO,EAAE,oBAAmB,CAAE,GAAI,CAAA,CAAE,IACzG,KAAK;EACb;;EAEI,aAAa;AACT,WAAO,OAAO,OAAO,CAAA,GAAI,KAAK,OAAO;EAC7C;EACI,0BAA0B;AACtB,UAAM,IAAI,KAAK,EAAG,CAAAA,OAAKA,GAAE,aAAY,CAAE;AACvC,WAAO,SAAS,IAAI,EAAE,QAAQ;EACtC;;;;EAII,EAAE,GAAG;AACD,eAAW,KAAK,KAAK,oBAAmB;AAAI,UAAI,EAAE,CAAC;AAAG,eAAO;AAC7D,WAAO;EACf;AACA;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO,aAAa,KAAK,SAASA,IAAGF,IAAG;AACpC,WAAOA,cAAa,MAAME,GAAE,OAAOF,GAAE,MAAME,GAAE,MAAM,QAAQF,GAAE,KAAK,KAAK,GAAGE,GAAE,OAAOF,GAAE,KAAK;EAClG,EAAM,GAAG,CAAC,IAAI,aAAa,KAAK,SAASE,IAAGF,IAAG;AACvC,QAAIA,cAAa,MAAME,GAAE,OAAOF,GAAE,MAAME,GAAE,QAAQ,WAAWF,GAAE,QAAQ,QAAQ;AAC3E,aAAOE,GAAE,QAAQ,OAAQ,CAACA,IAAG,GAAG,MAAMA,MAAK,GAAG,GAAGF,GAAE,QAAQ,CAAC,CAAC,GAAI,IAAE;IAC/E;AACQ,WAAO;EACf,EACiE,GAAG,CAAC,IAAI,KAAK,EAAC;AAC/E;AAEA,IAAM,KAAN,cAAiB,GAAG;EAChB,YAAY,GAAG,GAAG,GAAG;AACjB,UAAM,GAAG,GAAG,CAAC,GAAG,KAAK,MAAM,GAAG,SAAS,EAAE,cAAc;EAC/D;EACI,QAAQ,GAAG;AACP,UAAM,IAAI,GAAG,WAAW,EAAE,KAAK,KAAK,GAAG;AACvC,WAAO,KAAK,kBAAkB,CAAC;EACvC;AACA;AAE0D,IAAM,KAAN,cAAiB,GAAG;EAC1E,YAAY,GAAG,GAAG;AACd,UAAM,GAAG,MAAyB,CAAC,GAAG,KAAK,OAAO,GAAG,MAAyB,CAAC;EACvF;EACI,QAAQ,GAAG;AACP,WAAO,KAAK,KAAK,KAAM,OAAK,EAAE,QAAQ,EAAE,GAAG,CAAC;EACpD;AACA;AAEsE,IAAM,KAAN,cAAiB,GAAG;EACtF,YAAY,GAAG,GAAG;AACd,UAAM,GAAG,UAAiC,CAAC,GAAG,KAAK,OAAO,GAAG,UAAiC,CAAC;EACvG;EACI,QAAQ,GAAG;AACP,WAAO,CAAC,KAAK,KAAK,KAAM,OAAK,EAAE,QAAQ,EAAE,GAAG,CAAC;EACrD;AACA;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,MAAI;AACJ,WAAS,UAAU,IAAI,EAAE,eAAe,WAAW,IAAI,SAAS,EAAE,WAAW,CAAA,GAAI,IAAK,CAAAE,OAAK,GAAG,SAASA,GAAE,cAAc,CAAC;AAC5H;AAE6D,IAAM,KAAN,cAAiB,GAAG;EAC7E,YAAY,GAAG,GAAG;AACd,UAAM,GAAG,kBAAiD,CAAC;EACnE;EACI,QAAQ,GAAG;AACP,UAAM,IAAI,EAAE,KAAK,MAAM,KAAK,KAAK;AACjC,WAAO,GAAG,CAAC,KAAK,GAAG,EAAE,YAAY,KAAK,KAAK;EACnD;AACA;AAEiD,IAAM,KAAN,cAAiB,GAAG;EACjE,YAAY,GAAG,GAAG;AACd,UAAM,GAAG,MAAyB,CAAC;EAC3C;EACI,QAAQ,GAAG;AACP,UAAM,IAAI,EAAE,KAAK,MAAM,KAAK,KAAK;AACjC,WAAO,SAAS,KAAK,GAAG,KAAK,MAAM,YAAY,CAAC;EACxD;AACA;AAEqD,IAAM,KAAN,cAAiB,GAAG;EACrE,YAAY,GAAG,GAAG;AACd,UAAM,GAAG,UAAiC,CAAC;EACnD;EACI,QAAQ,GAAG;AACP,QAAI,GAAG,KAAK,MAAM,YAAY;MAC1B,WAAW;IACvB,CAAS;AAAG,aAAO;AACX,UAAM,IAAI,EAAE,KAAK,MAAM,KAAK,KAAK;AACjC,WAAO,SAAS,KAAK,CAAC,GAAG,KAAK,MAAM,YAAY,CAAC;EACzD;AACA;AAEiE,IAAM,KAAN,cAAiB,GAAG;EACjF,YAAY,GAAG,GAAG;AACd,UAAM,GAAG,sBAAyD,CAAC;EAC3E;EACI,QAAQ,GAAG;AACP,UAAM,IAAI,EAAE,KAAK,MAAM,KAAK,KAAK;AACjC,WAAO,EAAE,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,WAAW,WAAW,EAAE,WAAW,OAAO,KAAM,CAAAA,OAAK,GAAG,KAAK,MAAM,YAAYA,EAAC,CAAC;EAC/G;AACA;AAoBI,IAAM,KAAN,MAAS;EACT,YAAY,GAAG,IAAI,OAAiC;AAChD,SAAK,QAAQ,GAAG,KAAK,MAAM;EACnC;AACA;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,QAAQ,EAAE,KAAK;AACrD;AAqBI,IAAM,KAAN,MAAS;EACT,YAAY,GAAG;AACX,SAAK,YAAY;EACzB;EACI,OAAO,cAAc,GAAG;AACpB,WAAO,IAAI,GAAG,CAAC;EACvB;EACI,OAAO,MAAM;AACT,WAAO,IAAI,GAAG,IAAI,GAAG,GAAG,CAAC,CAAC;EAClC;EACI,OAAO,MAAM;AACT,WAAO,IAAI,GAAG,IAAI,GAAG,cAAc,SAAS,CAAC;EACrD;EACI,UAAU,GAAG;AACT,WAAO,KAAK,UAAU,WAAW,EAAE,SAAS;EACpD;EACI,QAAQ,GAAG;AACP,WAAO,KAAK,UAAU,QAAQ,EAAE,SAAS;EACjD;;EACoF,iBAAiB;AAE7F,WAAO,MAAM,KAAK,UAAU,UAAU,KAAK,UAAU,cAAc;EAC3E;EACI,WAAW;AACP,WAAO,qBAAqB,KAAK,UAAU,SAAQ,IAAK;EAChE;EACI,cAAc;AACV,WAAO,KAAK;EACpB;AACA;AAoBA,IAAM,KAAN,MAAS;EACL,YAAY,GAAG,GAAG;AACd,SAAK,aAAa,GAAG,KAAK,OAAO,KAAK,GAAG;EACjD;;EAEI,OAAO,GAAG,GAAG;AACT,WAAO,IAAI,GAAG,KAAK,YAAY,KAAK,KAAK,OAAO,GAAG,GAAG,KAAK,UAAU,EAAE,KAAK,MAAM,MAAM,GAAG,OAAO,MAAM,IAAI,CAAC;EACrH;;EAEI,OAAO,GAAG;AACN,WAAO,IAAI,GAAG,KAAK,YAAY,KAAK,KAAK,OAAO,GAAG,KAAK,UAAU,EAAE,KAAK,MAAM,MAAM,GAAG,OAAO,MAAM,IAAI,CAAC;EAClH;;EAEI,IAAI,GAAG;AACH,QAAI,IAAI,KAAK;AACb,WAAM,CAAC,EAAE,QAAO,KAAM;AAClB,YAAM,IAAI,KAAK,WAAW,GAAG,EAAE,GAAG;AAClC,UAAI,MAAM;AAAG,eAAO,EAAE;AACtB,UAAI,IAAI,IAAI,EAAE,OAAO,IAAI,MAAM,IAAI,EAAE;IACjD;AACQ,WAAO;EACf;;;EAGI,QAAQ,GAAG;AAEP,QAAI,IAAI,GAAG,IAAI,KAAK;AACpB,WAAM,CAAC,EAAE,QAAO,KAAM;AAClB,YAAM,IAAI,KAAK,WAAW,GAAG,EAAE,GAAG;AAClC,UAAI,MAAM;AAAG,eAAO,IAAI,EAAE,KAAK;AAC/B,UAAI,IAAI,IAAI,EAAE;;SAEd,KAAK,EAAE,KAAK,OAAO,GAAG,IAAI,EAAE;;IACxC;AAEgB,WAAO;EACvB;EACI,UAAU;AACN,WAAO,KAAK,KAAK,QAAO;EAChC;;EAEI,IAAI,OAAO;AACP,WAAO,KAAK,KAAK;EACzB;;EAEI,SAAS;AACL,WAAO,KAAK,KAAK,OAAM;EAC/B;;EAEI,SAAS;AACL,WAAO,KAAK,KAAK,OAAM;EAC/B;;;;;EAKI,iBAAiB,GAAG;AAChB,WAAO,KAAK,KAAK,iBAAiB,CAAC;EAC3C;EACI,QAAQ,GAAG;AACP,SAAK,iBAAkB,CAAC,GAAG,OAAO,EAAE,GAAG,CAAC,GAAG,MAAG;EACtD;EACI,WAAW;AACP,UAAM,IAAI,CAAA;AACV,WAAO,KAAK,iBAAkB,CAAC,GAAG,OAAO,EAAE,KAAK,GAAG,KAAK,GAAG,GAAG,MAAG,GAAI,IAAI,EAAE,KAAK,IAAI;EAC5F;;;;;;EAMI,iBAAiB,GAAG;AAChB,WAAO,KAAK,KAAK,iBAAiB,CAAC;EAC3C;;EAEI,cAAc;AACV,WAAO,IAAI,GAAG,KAAK,MAAM,MAAM,KAAK,YAAY,KAAE;EAC1D;EACI,gBAAgB,GAAG;AACf,WAAO,IAAI,GAAG,KAAK,MAAM,GAAG,KAAK,YAAY,KAAE;EACvD;EACI,qBAAqB;AACjB,WAAO,IAAI,GAAG,KAAK,MAAM,MAAM,KAAK,YAAY,IAAE;EAC1D;EACI,uBAAuB,GAAG;AACtB,WAAO,IAAI,GAAG,KAAK,MAAM,GAAG,KAAK,YAAY,IAAE;EACvD;AACA;AAIA,IAAM,KAAN,MAAS;EACL,YAAY,GAAG,GAAG,GAAG,GAAG;AACpB,SAAK,YAAY,GAAG,KAAK,YAAY,CAAA;AACrC,QAAI,IAAI;AACR,WAAM,CAAC,EAAE,QAAO;AAAM,UAAI,IAAI,IAAI,EAAE,EAAE,KAAK,CAAC,IAAI;MAEhD,KAAK,MAAM,KAAK,KAAK,IAAI;AAEzB,YAAI,KAAK,YAAY,EAAE,OAAO,EAAE;WAAY;AACxC,YAAI,MAAM,GAAG;AAGT,eAAK,UAAU,KAAK,CAAC;AACrB;QAChB;AAGY,aAAK,UAAU,KAAK,CAAC,GAAG,IAAI,KAAK,YAAY,EAAE,QAAQ,EAAE;MACrE;EACA;EACI,UAAU;AACN,QAAI,IAAI,KAAK,UAAU,IAAG;AAC1B,UAAM,IAAI;MACN,KAAK,EAAE;MACP,OAAO,EAAE;IACrB;AACQ,QAAI,KAAK;AAAW,WAAK,IAAI,EAAE,MAAM,CAAC,EAAE,QAAO;AAAM,aAAK,UAAU,KAAK,CAAC,GAAG,IAAI,EAAE;;AAAY,WAAK,IAAI,EAAE,OAAO,CAAC,EAAE,QAAO;AAAM,aAAK,UAAU,KAAK,CAAC,GACtJ,IAAI,EAAE;AACN,WAAO;EACf;EACI,UAAU;AACN,WAAO,KAAK,UAAU,SAAS;EACvC;EACI,OAAO;AACH,QAAI,MAAM,KAAK,UAAU;AAAQ,aAAO;AACxC,UAAM,IAAI,KAAK,UAAU,KAAK,UAAU,SAAS,CAAC;AAClD,WAAO;MACH,KAAK,EAAE;MACP,OAAO,EAAE;IACrB;EACA;AACA;AAIA,IAAM,KAAN,MAAS;EACL,YAAY,GAAG,GAAG,GAAG,GAAG,GAAG;AACvB,SAAK,MAAM,GAAG,KAAK,QAAQ,GAAG,KAAK,QAAQ,QAAQ,IAAI,IAAI,GAAG,KAAK,KAAK,OAAO,QAAQ,IAAI,IAAI,GAAG,OAClG,KAAK,QAAQ,QAAQ,IAAI,IAAI,GAAG,OAAO,KAAK,OAAO,KAAK,KAAK,OAAO,IAAI,KAAK,MAAM;EAC3F;;EAEI,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AAChB,WAAO,IAAI,GAAG,QAAQ,IAAI,IAAI,KAAK,KAAK,QAAQ,IAAI,IAAI,KAAK,OAAO,QAAQ,IAAI,IAAI,KAAK,OAAO,QAAQ,IAAI,IAAI,KAAK,MAAM,QAAQ,IAAI,IAAI,KAAK,KAAK;EAC7J;EACI,UAAU;AACN,WAAO;EACf;;;;;EAKI,iBAAiB,GAAG;AAChB,WAAO,KAAK,KAAK,iBAAiB,CAAC,KAAK,EAAE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,iBAAiB,CAAC;EACxG;;;;;EAKI,iBAAiB,GAAG;AAChB,WAAO,KAAK,MAAM,iBAAiB,CAAC,KAAK,EAAE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,iBAAiB,CAAC;EACxG;;EAEI,MAAM;AACF,WAAO,KAAK,KAAK,QAAO,IAAK,OAAO,KAAK,KAAK,IAAG;EACzD;;EAEI,SAAS;AACL,WAAO,KAAK,IAAG,EAAG;EAC1B;;EAEI,SAAS;AACL,WAAO,KAAK,MAAM,QAAO,IAAK,KAAK,MAAM,KAAK,MAAM,OAAM;EAClE;;EAEI,OAAO,GAAG,GAAG,GAAG;AACZ,QAAI,IAAI;AACR,UAAM,IAAI,EAAE,GAAG,EAAE,GAAG;AACpB,WAAO,IAAI,IAAI,IAAI,EAAE,KAAK,MAAM,MAAM,MAAM,EAAE,KAAK,OAAO,GAAG,GAAG,CAAC,GAAG,IAAI,IAAI,MAAM,IAAI,EAAE,KAAK,MAAM,GAAG,MAAM,MAAM,IAAI,IAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,EAAE,MAAM,OAAO,GAAG,GAAG,CAAC,CAAC,GAChL,EAAE,MAAK;EACf;EACI,YAAY;AACR,QAAI,KAAK,KAAK,QAAO;AAAI,aAAO,GAAG;AACnC,QAAI,IAAI;AACR,WAAO,EAAE,KAAK,MAAK,KAAM,EAAE,KAAK,KAAK,MAAK,MAAO,IAAI,EAAE,YAAW,IAAK,IAAI,EAAE,KAAK,MAAM,MAAM,MAAM,EAAE,KAAK,UAAS,GAAI,IAAI,GAC5H,EAAE,MAAK;EACf;;EAEI,OAAO,GAAG,GAAG;AACT,QAAI,GAAG,IAAI;AACX,QAAI,EAAE,GAAG,EAAE,GAAG,IAAI;AAAG,QAAE,KAAK,QAAO,KAAM,EAAE,KAAK,MAAK,KAAM,EAAE,KAAK,KAAK,MAAK,MAAO,IAAI,EAAE,YAAW,IACpG,IAAI,EAAE,KAAK,MAAM,MAAM,MAAM,EAAE,KAAK,OAAO,GAAG,CAAC,GAAG,IAAI;SAAQ;AAC1D,UAAI,EAAE,KAAK,MAAK,MAAO,IAAI,EAAE,YAAW,IAAK,EAAE,MAAM,QAAO,KAAM,EAAE,MAAM,MAAK,KAAM,EAAE,MAAM,KAAK,MAAK,MAAO,IAAI,EAAE,aAAY,IAChI,MAAM,EAAE,GAAG,EAAE,GAAG,GAAG;AACf,YAAI,EAAE,MAAM,QAAO;AAAI,iBAAO,GAAG;AACjC,YAAI,EAAE,MAAM,IAAG,GAAI,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,MAAM,MAAM,EAAE,MAAM,UAAS,CAAE;MAC7F;AACY,UAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,EAAE,MAAM,OAAO,GAAG,CAAC,CAAC;IACnE;AACQ,WAAO,EAAE,MAAK;EACtB;EACI,QAAQ;AACJ,WAAO,KAAK;EACpB;;EAEI,QAAQ;AACJ,QAAI,IAAI;AACR,WAAO,EAAE,MAAM,MAAK,KAAM,CAAC,EAAE,KAAK,MAAK,MAAO,IAAI,EAAE,WAAU,IAAK,EAAE,KAAK,MAAK,KAAM,EAAE,KAAK,KAAK,MAAK,MAAO,IAAI,EAAE,YAAW,IAC9H,EAAE,KAAK,MAAK,KAAM,EAAE,MAAM,MAAK,MAAO,IAAI,EAAE,UAAS,IAAK;EAClE;EACI,cAAc;AACV,QAAI,IAAI,KAAK,UAAS;AACtB,WAAO,EAAE,MAAM,KAAK,MAAK,MAAO,IAAI,EAAE,KAAK,MAAM,MAAM,MAAM,MAAM,EAAE,MAAM,YAAW,CAAE,GACxF,IAAI,EAAE,WAAU,GAAI,IAAI,EAAE,UAAS,IAAK;EAChD;EACI,eAAe;AACX,QAAI,IAAI,KAAK,UAAS;AACtB,WAAO,EAAE,KAAK,KAAK,MAAK,MAAO,IAAI,EAAE,YAAW,GAAI,IAAI,EAAE,UAAS,IAAK;EAChF;EACI,aAAa;AACT,UAAM,IAAI,KAAK,KAAK,MAAM,MAAM,GAAG,KAAK,MAAM,KAAK,MAAM,IAAI;AAC7D,WAAO,KAAK,MAAM,KAAK,MAAM,MAAM,KAAK,OAAO,GAAG,IAAI;EAC9D;EACI,cAAc;AACV,UAAM,IAAI,KAAK,KAAK,MAAM,MAAM,GAAG,KAAK,KAAK,KAAK,OAAO,IAAI;AAC7D,WAAO,KAAK,KAAK,KAAK,MAAM,MAAM,KAAK,OAAO,MAAM,CAAC;EAC7D;EACI,YAAY;AACR,UAAM,IAAI,KAAK,KAAK,KAAK,MAAM,MAAM,CAAC,KAAK,KAAK,OAAO,MAAM,IAAI,GAAG,IAAI,KAAK,MAAM,KAAK,MAAM,MAAM,CAAC,KAAK,MAAM,OAAO,MAAM,IAAI;AACjI,WAAO,KAAK,KAAK,MAAM,MAAM,CAAC,KAAK,OAAO,GAAG,CAAC;EACtD;;EAEI,gBAAgB;AACZ,UAAM,IAAI,KAAK,MAAK;AACpB,WAAO,KAAK,IAAI,GAAG,CAAC,KAAK,KAAK,OAAO;EAC7C;;;EAGI,QAAQ;AACJ,QAAI,KAAK,MAAK,KAAM,KAAK,KAAK,MAAK;AAAI,YAAM,EAAC;AAC9C,QAAI,KAAK,MAAM,MAAK;AAAI,YAAM,EAAC;AAC/B,UAAM,IAAI,KAAK,KAAK,MAAK;AACzB,QAAI,MAAM,KAAK,MAAM,MAAK;AAAI,YAAM,EAAC;AACrC,WAAO,KAAK,KAAK,MAAK,IAAK,IAAI;EACvC;AACA;AAKA,GAAG,QAAQ,MAAM,GAAG,MAAM,MAAI,GAAG,QAAQ;AAGzC,GAAG,QAAQ;AAEX,MAAM;EACF,cAAc;AACV,SAAK,OAAO;EACpB;EACI,IAAI,MAAM;AACN,UAAM,EAAC;EACf;EACI,IAAI,QAAQ;AACR,UAAM,EAAC;EACf;EACI,IAAI,QAAQ;AACR,UAAM,EAAC;EACf;EACI,IAAI,OAAO;AACP,UAAM,EAAC;EACf;EACI,IAAI,QAAQ;AACR,UAAM,EAAC;EACf;;EAEI,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG;AAChB,WAAO;EACf;;EAEI,OAAO,GAAG,GAAG,GAAG;AACZ,WAAO,IAAI,GAAG,GAAG,CAAC;EAC1B;;EAEI,OAAO,GAAG,GAAG;AACT,WAAO;EACf;EACI,UAAU;AACN,WAAO;EACf;EACI,iBAAiB,GAAG;AAChB,WAAO;EACf;EACI,iBAAiB,GAAG;AAChB,WAAO;EACf;EACI,SAAS;AACL,WAAO;EACf;EACI,SAAS;AACL,WAAO;EACf;EACI,QAAQ;AACJ,WAAO;EACf;;EAEI,gBAAgB;AACZ,WAAO;EACf;EACI,QAAQ;AACJ,WAAO;EACf;AACA;AAyBA,IAAM,KAAN,MAAS;EACL,YAAY,GAAG;AACX,SAAK,aAAa,GAAG,KAAK,OAAO,IAAI,GAAG,KAAK,UAAU;EAC/D;EACI,IAAI,GAAG;AACH,WAAO,SAAS,KAAK,KAAK,IAAI,CAAC;EACvC;EACI,QAAQ;AACJ,WAAO,KAAK,KAAK,OAAM;EAC/B;EACI,OAAO;AACH,WAAO,KAAK,KAAK,OAAM;EAC/B;EACI,IAAI,OAAO;AACP,WAAO,KAAK,KAAK;EACzB;EACI,QAAQ,GAAG;AACP,WAAO,KAAK,KAAK,QAAQ,CAAC;EAClC;;EACiE,QAAQ,GAAG;AACpE,SAAK,KAAK,iBAAkB,CAAC,GAAG,OAAO,EAAE,CAAC,GAAG,MAAG;EACxD;;EACkF,eAAe,GAAG,GAAG;AAC/F,UAAM,IAAI,KAAK,KAAK,gBAAgB,EAAE,CAAC,CAAC;AACxC,WAAM,EAAE,QAAO,KAAM;AACjB,YAAM,IAAI,EAAE,QAAO;AACnB,UAAI,KAAK,WAAW,EAAE,KAAK,EAAE,CAAC,CAAC,KAAK;AAAG;AACvC,QAAE,EAAE,GAAG;IACnB;EACA;;;;EAGW,aAAa,GAAG,GAAG;AACtB,QAAI;AACJ,SAAK,IAAI,WAAW,IAAI,KAAK,KAAK,gBAAgB,CAAC,IAAI,KAAK,KAAK,YAAW,GAAI,EAAE,QAAO,KAAM;AAC3F,UAAI,CAAC,EAAE,EAAE,QAAO,EAAG,GAAG;AAAG;IACrC;EACA;;EACuE,kBAAkB,GAAG;AACpF,UAAM,IAAI,KAAK,KAAK,gBAAgB,CAAC;AACrC,WAAO,EAAE,QAAO,IAAK,EAAE,QAAO,EAAG,MAAM;EAC/C;EACI,cAAc;AACV,WAAO,IAAI,GAAG,KAAK,KAAK,YAAW,CAAE;EAC7C;EACI,gBAAgB,GAAG;AACf,WAAO,IAAI,GAAG,KAAK,KAAK,gBAAgB,CAAC,CAAC;EAClD;;EAC4C,IAAI,GAAG;AAC3C,WAAO,KAAK,KAAK,KAAK,KAAK,OAAO,CAAC,EAAE,OAAO,GAAG,IAAE,CAAC;EAC1D;;EACiC,OAAO,GAAG;AACnC,WAAO,KAAK,IAAI,CAAC,IAAI,KAAK,KAAK,KAAK,KAAK,OAAO,CAAC,CAAC,IAAI;EAC9D;EACI,UAAU;AACN,WAAO,KAAK,KAAK,QAAO;EAChC;EACI,UAAU,GAAG;AACT,QAAI,IAAI;AAEA,WAAO,EAAE,OAAO,EAAE,SAAS,IAAI,GAAG,IAAI,OAAO,EAAE,QAAS,CAAAA,OAAK;AACjE,UAAI,EAAE,IAAIA,EAAC;IACvB,CAAS,GAAI;EACb;EACI,QAAQ,GAAG;AACP,QAAI,EAAE,aAAa;AAAK,aAAO;AAC/B,QAAI,KAAK,SAAS,EAAE;AAAM,aAAO;AACjC,UAAM,IAAI,KAAK,KAAK,YAAW,GAAI,IAAI,EAAE,KAAK,YAAW;AACzD,WAAM,EAAE,QAAO,KAAM;AACjB,YAAMA,KAAI,EAAE,QAAO,EAAG,KAAK,IAAI,EAAE,QAAO,EAAG;AAC3C,UAAI,MAAM,KAAK,WAAWA,IAAG,CAAC;AAAG,eAAO;IACpD;AACQ,WAAO;EACf;EACI,UAAU;AACN,UAAM,IAAI,CAAA;AACV,WAAO,KAAK,QAAS,OAAK;AACtB,QAAE,KAAK,CAAC;IACpB,CAAS,GAAI;EACb;EACI,WAAW;AACP,UAAM,IAAI,CAAA;AACV,WAAO,KAAK,QAAS,OAAK,EAAE,KAAK,CAAC,CAAC,GAAI,eAAe,EAAE,SAAQ,IAAK;EAC7E;EACI,KAAK,GAAG;AACJ,UAAM,IAAI,IAAI,GAAG,KAAK,UAAU;AAChC,WAAO,EAAE,OAAO,GAAG;EAC3B;AACA;AAEA,IAAM,KAAN,MAAS;EACL,YAAY,GAAG;AACX,SAAK,OAAO;EACpB;EACI,UAAU;AACN,WAAO,KAAK,KAAK,QAAO,EAAG;EACnC;EACI,UAAU;AACN,WAAO,KAAK,KAAK,QAAO;EAChC;AACA;AA2BI,IAAM,KAAN,MAAS;EACT,YAAY,GAAG;AACX,SAAK,SAAS;;IAGd,EAAE,KAAK,GAAG,UAAU;EAC5B;EACI,OAAO,QAAQ;AACX,WAAO,IAAI,GAAG,CAAA,CAAE;EACxB;;;;;EAIW,UAAU,GAAG;AAChB,QAAI,IAAI,IAAI,GAAG,GAAG,UAAU;AAC5B,eAAWA,MAAK,KAAK;AAAQ,UAAI,EAAE,IAAIA,EAAC;AACxC,eAAW,KAAK;AAAG,UAAI,EAAE,IAAI,CAAC;AAC9B,WAAO,IAAI,GAAG,EAAE,QAAO,CAAE;EACjC;;;;;;;EAMW,OAAO,GAAG;AACb,eAAW,KAAK,KAAK;AAAQ,UAAI,EAAE,WAAW,CAAC;AAAG,eAAO;AACzD,WAAO;EACf;EACI,QAAQ,GAAG;AACP,WAAO,GAAG,KAAK,QAAQ,EAAE,QAAS,CAACA,IAAG,MAAMA,GAAE,QAAQ,CAAC,CAAC;EAChE;AACA;AAqBI,IAAM,KAAN,MAAS;EACT,YAAY,GAAG;AACX,SAAK,QAAQ;EACrB;EACI,OAAO,QAAQ;AACX,WAAO,IAAI,GAAG;MACV,UAAU,CAAA;IACtB,CAAS;EACT;;;;;;;EAMW,MAAM,GAAG;AACZ,QAAI,EAAE,QAAO;AAAI,aAAO,KAAK;AAC7B;AACI,UAAI,IAAI,KAAK;AACb,eAAS,IAAI,GAAG,IAAI,EAAE,SAAS,GAAG,EAAE;AAAG,YAAI,KAAK,EAAE,SAAS,UAAU,CAAA,GAAI,EAAE,IAAI,CAAC,CAAC,GACjF,CAAC,GAAG,CAAC;AAAG,iBAAO;AACf,aAAO,KAAK,EAAE,SAAS,UAAU,CAAA,GAAI,EAAE,YAAW,CAAE,GAAG,KAAK;IACxE;EACA;;;;;;;EAMW,IAAI,GAAG,GAAG;AACb,SAAK,aAAa,EAAE,QAAO,CAAE,EAAE,EAAE,YAAW,CAAE,IAAI,GAAG,CAAC;EAC9D;;;;;;EAKW,OAAO,GAAG;AACb,QAAI,IAAI,GAAG,UAAS,GAAI,IAAI,CAAA,GAAI,IAAI,CAAA;AACpC,MAAE,QAAS,CAACA,IAAGG,OAAM;AACjB,UAAI,CAAC,EAAE,oBAAoBA,EAAC,GAAG;AAE3B,cAAMH,KAAI,KAAK,aAAa,CAAC;AAC7B,aAAK,aAAaA,IAAG,GAAG,CAAC,GAAG,IAAI,CAAA,GAAI,IAAI,CAAA,GAAI,IAAIG,GAAE,QAAO;MACzE;AACY,MAAAH,KAAI,EAAEG,GAAE,YAAW,CAAE,IAAI,GAAGH,EAAC,IAAI,EAAE,KAAKG,GAAE,YAAW,CAAE;IACnE,CAAS;AACD,UAAM,IAAI,KAAK,aAAa,CAAC;AAC7B,SAAK,aAAa,GAAG,GAAG,CAAC;EACjC;;;;;;;EAMW,OAAO,GAAG;AACb,UAAM,IAAI,KAAK,MAAM,EAAE,QAAO,CAAE;AAChC,OAAG,CAAC,KAAK,EAAE,SAAS,UAAU,OAAO,EAAE,SAAS,OAAO,EAAE,YAAW,CAAE;EAC9E;EACI,QAAQ,GAAG;AACP,WAAO,GAAG,KAAK,OAAO,EAAE,KAAK;EACrC;;;;;EAIW,aAAa,GAAG;AACnB,QAAI,IAAI,KAAK;AACb,MAAE,SAAS,WAAW,EAAE,WAAW;MAC/B,QAAQ,CAAA;IACpB;AACQ,aAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,EAAE,GAAG;AAC/B,UAAI,IAAI,EAAE,SAAS,OAAO,EAAE,IAAI,CAAC,CAAC;AAClC,SAAG,CAAC,KAAK,EAAE,SAAS,WAAW,IAAI;QAC/B,UAAU;UACN,QAAQ,CAAA;QAC5B;MACA,GAAe,EAAE,SAAS,OAAO,EAAE,IAAI,CAAC,CAAC,IAAI,IAAI,IAAI;IACrD;AACQ,WAAO,EAAE,SAAS;EAC1B;;;;;EAIW,aAAa,GAAG,GAAG,GAAG;AACzB,OAAG,GAAI,CAACL,IAAGG,OAAM,EAAEH,EAAC,IAAIG,EAAC;AACzB,eAAWH,MAAK;AAAG,aAAO,EAAEA,EAAC;EACrC;EACI,QAAQ;AACJ,WAAO,IAAI,GAAG,GAAG,KAAK,KAAK,CAAC;EACpC;AACA;AA2BI,IAAM,KAAN,MAAS;EACT,YAAY,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC7B,SAAK,MAAM,GAAG,KAAK,eAAe,GAAG,KAAK,UAAU,GAAG,KAAK,WAAW,GAAG,KAAK,aAAa,GAC5F,KAAK,OAAO,GAAG,KAAK,gBAAgB;EAC5C;;;;;EAIW,OAAO,mBAAmB,GAAG;AAChC,WAAO,IAAI;MAAG;MAAG;;MACH,GAAG,IAAG;;MACL,GAAG,IAAG;;MACJ,GAAG,IAAG;MAAI,GAAG,MAAK;MAAI;;IAAC;EAChD;;;;;EAIW,OAAO,iBAAiB,GAAG,GAAG,GAAG,GAAG;AACvC,WAAO,IAAI;MAAG;MAAG;;MACH;;MACC,GAAG,IAAG;;MACJ;MAAG;MAAG;;IAAC;EAChC;;EACsF,OAAO,cAAc,GAAG,GAAG;AACzG,WAAO,IAAI;MAAG;MAAG;;MACH;;MACC,GAAG,IAAG;;MACJ,GAAG,IAAG;MAAI,GAAG,MAAK;MAAI;;IAAC;EAChD;;;;;;EAKW,OAAO,mBAAmB,GAAG,GAAG;AACnC,WAAO,IAAI;MAAG;MAAG;;MACH;;MACC,GAAG,IAAG;;MACJ,GAAG,IAAG;MAAI,GAAG,MAAK;MAAI;;IAAC;EAChD;;;;;EAIW,uBAAuB,GAAG,GAAG;AAMhC,WAAO,CAAC,KAAK,WAAW,QAAQ,GAAG,IAAG,CAAE,KAAK,MAAqC,KAAK,gBAAgB,MAAiC,KAAK,iBAAiB,KAAK,aAAa,IAChL,KAAK,UAAU,GAAG,KAAK,eAAe,GAAsC,KAAK,OAAO,GACxF,KAAK,gBAAgB,GAA+B;EAC5D;;;;;EAIW,oBAAoB,GAAG;AAC1B,WAAO,KAAK,UAAU,GAAG,KAAK,eAAe,GAC7C,KAAK,OAAO,GAAG,MAAK,GAAI,KAAK,gBAAgB,GAA+B;EACpF;;;;;;EAKW,yBAAyB,GAAG;AAC/B,WAAO,KAAK,UAAU,GAAG,KAAK,eAAe,GAC7C,KAAK,OAAO,GAAG,MAAK,GAAI,KAAK,gBAAgB,GAC7C;EACR;EACI,2BAA2B;AACvB,WAAO,KAAK,gBAAgB,GAAgD;EACpF;EACI,uBAAuB;AACnB,WAAO,KAAK,gBAAgB,GAA4C,KAAK,UAAU,GAAG,IAAG,GAC7F;EACR;EACI,YAAY,GAAG;AACX,WAAO,KAAK,WAAW,GAAG;EAClC;EACI,IAAI,oBAAoB;AACpB,WAAO,MAA8C,KAAK;EAClE;EACI,IAAI,wBAAwB;AACxB,WAAO,MAAkD,KAAK;EACtE;EACI,IAAI,mBAAmB;AACnB,WAAO,KAAK,qBAAqB,KAAK;EAC9C;EACI,kBAAkB;AACd,WAAO,MAAiC,KAAK;EACrD;EACI,kBAAkB;AACd,WAAO,MAAwC,KAAK;EAC5D;EACI,eAAe;AACX,WAAO,MAAqC,KAAK;EACzD;EACI,oBAAoB;AAChB,WAAO,MAA0C,KAAK;EAC9D;EACI,QAAQ,GAAG;AACP,WAAO,aAAa,MAAM,KAAK,IAAI,QAAQ,EAAE,GAAG,KAAK,KAAK,QAAQ,QAAQ,EAAE,OAAO,KAAK,KAAK,iBAAiB,EAAE,gBAAgB,KAAK,kBAAkB,EAAE,iBAAiB,KAAK,KAAK,QAAQ,EAAE,IAAI;EAC1M;EACI,cAAc;AACV,WAAO,IAAI,GAAG,KAAK,KAAK,KAAK,cAAc,KAAK,SAAS,KAAK,UAAU,KAAK,YAAY,KAAK,KAAK,MAAK,GAAI,KAAK,aAAa;EACtI;EACI,WAAW;AACP,WAAO,YAAY,KAAK,QAAQ,KAAK,YAAY,KAAK,UAAU,KAAK,KAAK,KAAK,mBAAmB,KAAK,gCAAgC,KAAK,mCAAmC,KAAK;EAC5L;AACA;AAmBA,IAAM,KAAN,MAAS;EACL,YAAY,GAAG,IAAI,MAAM,IAAI,CAAA,GAAI,IAAI,CAAA,GAAI,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM;AACnE,SAAK,OAAO,GAAG,KAAK,kBAAkB,GAAG,KAAK,UAAU,GAAG,KAAK,UAAU,GAAG,KAAK,QAAQ,GAC1F,KAAK,UAAU,GAAG,KAAK,QAAQ,GAAG,KAAK,IAAI;EACnD;AACA;AASI,SAAS,GAAG,GAAG,IAAI,MAAM,IAAI,CAAA,GAAI,IAAI,CAAA,GAAI,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM;AACvE,SAAO,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AACrC;AAyBA,IAAM,KAAN,MAAS;;;;;EAKL,YAAY,GAAG,IAAI,MAAM,IAAI,CAAA,GAAI,IAAI,CAAA,GAAI,IAAI,MAAM,IAAI,KAA4B,IAAI,MAAM,IAAI,MAAM;AACnG,SAAK,OAAO,GAAG,KAAK,kBAAkB,GAAG,KAAK,kBAAkB,GAAG,KAAK,UAAU,GAClF,KAAK,QAAQ,GAAG,KAAK,YAAY,GAAG,KAAK,UAAU,GAAG,KAAK,QAAQ,GAAG,KAAK,IAAI;IAE/E,KAAK,IAAI,MAAM,KAAK,SAAS,KAAK;EAC1C;AACA;AAE4E,SAAS,GAAG,GAAG;AACvF,SAAO,EAAE,gBAAgB,SAAS,IAAI,EAAE,gBAAgB,CAAC,EAAE,QAAQ;AACvE;AAEA,SAAS,GAAG,GAAG;AACX,aAAW,KAAK,EAAE,SAAS;AACvB,UAAME,KAAI,EAAE,wBAAuB;AACnC,QAAI,SAASA;AAAG,aAAOA;EAC/B;AACI,SAAO;AACX;AAUA,SAAS,GAAG,GAAG;AACX,SAAO,SAAS,EAAE;AACtB;AAMI,SAAS,GAAG,GAAG;AACf,QAAM,IAAI,EAAE,CAAC;AACb,MAAI,SAAS,EAAE,GAAG;AACd,MAAE,IAAI,CAAA;AACN,UAAMA,KAAI,GAAG,CAAC,GAAG,IAAI,GAAG,CAAC;AACzB,QAAI,SAASA,MAAK,SAAS;AAI3B,MAAAA,GAAE,WAAU,KAAM,EAAE,EAAE,KAAK,IAAI,GAAGA,EAAC,CAAC,GAAG,EAAE,EAAE,KAAK,IAAI;QAAG,GAAG,SAAQ;QAAI;;MAAK,CAA2B;SAAQ;AAC1G,UAAIA,KAAI;AACR,iBAAWC,MAAK,EAAE;AAAiB,UAAE,EAAE,KAAKA,EAAC,GAAGA,GAAE,MAAM,WAAU,MAAOD,KAAI;AAC7E,UAAI,CAACA,IAAG;AAGJ,cAAMA,KAAI,EAAE,gBAAgB,SAAS,IAAI,EAAE,gBAAgB,EAAE,gBAAgB,SAAS,CAAC,EAAE,MAAM;AAC/F,UAAE,EAAE,KAAK,IAAI,GAAG,GAAG,SAAQ,GAAIA,EAAC,CAAC;MACjD;IACA;EACA;AACI,SAAO,EAAE;AACb;AAII,SAAS,GAAG,GAAG;AACf,QAAM,IAAI,EAAE,CAAC;AACb,MAAI,CAAC,EAAE;AAAG,QAAI,QAA8B,EAAE;AAAW,QAAE,IAAI,GAAG,EAAE,MAAM,EAAE,iBAAiB,GAAG,CAAC,GAAG,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK;SAAQ;AAE9I,YAAMA,KAAI,CAAA;AACV,iBAAWC,MAAK,GAAG,CAAC,GAAG;AACnB,cAAMH,KAAI,WAAsCG,GAAE,MAAM,QAAkC;AAC1F,QAAAD,GAAE,KAAK,IAAI,GAAGC,GAAE,OAAOH,EAAC,CAAC;MACrC;AAEgB,YAAM,IAAI,EAAE,QAAQ,IAAI,GAAG,EAAE,MAAM,UAAU,EAAE,MAAM,SAAS,IAAI,MAAM,IAAI,EAAE,UAAU,IAAI,GAAG,EAAE,QAAQ,UAAU,EAAE,QAAQ,SAAS,IAAI;AAElJ,QAAE,IAAI,GAAG,EAAE,MAAM,EAAE,iBAAiBE,IAAG,EAAE,SAAS,EAAE,OAAO,GAAG,CAAC;IACvE;AACI,SAAO,EAAE;AACb;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,IAAE,wBAAuB,GAAI,GAAG,CAAC;AACjC,QAAM,IAAI,EAAE,QAAQ,OAAO,CAAE,CAAC,CAAE;AAChC,SAAO,IAAI,GAAG,EAAE,MAAM,EAAE,iBAAiB,EAAE,gBAAgB,MAAK,GAAI,GAAG,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,KAAK;AACnH;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO,SAASA,IAAGF,IAAG;AAClB,QAAIE,GAAE,UAAUF,GAAE;AAAO,aAAO;AAChC,QAAIE,GAAE,QAAQ,WAAWF,GAAE,QAAQ;AAAQ,aAAO;AAClD,aAAS,IAAI,GAAG,IAAIE,GAAE,QAAQ,QAAQ;AAAK,UAAI,CAAC,GAAGA,GAAE,QAAQ,CAAC,GAAGF,GAAE,QAAQ,CAAC,CAAC;AAAG,eAAO;AACvF,QAAIE,GAAE,QAAQ,WAAWF,GAAE,QAAQ;AAAQ,aAAO;AAClD,aAAS,IAAI,GAAG,IAAIE,GAAE,QAAQ,QAAQ;AAAK,UAAI,CAAC,GAAGA,GAAE,QAAQ,CAAC,GAAGF,GAAE,QAAQ,CAAC,CAAC;AAAG,eAAO;AACvF,WAAOE,GAAE,oBAAoBF,GAAE,mBAAmB,CAAC,CAACE,GAAE,KAAK,QAAQF,GAAE,IAAI,KAAK,CAAC,CAAC,GAAGE,GAAE,SAASF,GAAE,OAAO,KAAK,GAAGE,GAAE,OAAOF,GAAE,KAAK;EACvI,EAAM,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,KAAK,EAAE,cAAc,EAAE;AACzC;AA2BA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO,SAASE,IAAG;AACf,WAAO,YAAY,OAAOA,MAAK,OAAO,UAAUA,EAAC,KAAK,CAAC,GAAGA,EAAC,KAAKA,MAAK,OAAO,oBAAoBA,MAAK,OAAO;EACpH,EAAM,CAAC;;;;IAIH,SAASA,IAAG;AACR,aAAO;QACH,cAAc,KAAKA;MAC/B;IACA,EAAM,CAAC;MAAI,SAASA,IAAGF,IAAG;AAClB,QAAIE,GAAE,GAAG;AACL,UAAI,MAAMF,EAAC;AAAG,eAAO;UACjB,aAAa;QAC7B;AACY,UAAIA,OAAM,IAAI;AAAG,eAAO;UACpB,aAAa;QAC7B;AACY,UAAIA,OAAM,KAAK;AAAG,eAAO;UACrB,aAAa;QAC7B;IACA;AACQ,WAAO;MACH,aAAa,GAAGA,EAAC,IAAI,OAAOA;IACxC;EACA,EAAM,GAAG,CAAC;AACV;AAkB0D,IAAM,KAAN,MAAS;EAC/D,cAAc;AAGV,SAAK,IAAI;EACjB;AACA;AAE6D,IAAM,KAAN,cAAiB,GAAG;AAAA;AAEzB,IAAM,KAAN,cAAiB,GAAG;EACxE,YAAY,GAAG;AACX,UAAK,GAAI,KAAK,WAAW;EACjC;AACA;AAEyD,IAAM,KAAN,cAAiB,GAAG;EACzE,YAAY,GAAG;AACX,UAAK,GAAI,KAAK,WAAW;EACjC;AACA;AAOI,IAAM,KAAN,cAAiB,GAAG;EACpB,YAAY,GAAG,GAAG;AACd,UAAK,GAAI,KAAK,IAAI,GAAG,KAAK,IAAI;EACtC;AACA;AAkBmE,IAAM,KAAN,MAAS;EACxE,YAAY,GAAG,GAAG;AACd,SAAK,QAAQ,GAAG,KAAK,YAAY;EACzC;AACA;AAMI,IAAM,KAAN,MAAS;EACT,YAAY,GAAG,GAAG;AACd,SAAK,aAAa,GAAG,KAAK,SAAS;EAC3C;;EACgD,OAAO,OAAO;AACtD,WAAO,IAAI;EACnB;;EAC8D,OAAO,OAAO,GAAG;AACvE,WAAO,IAAI,GAAG,QAAQ,CAAC;EAC/B;;EACkF,OAAO,WAAW,GAAG;AAC/F,WAAO,IAAI,GAAG,CAAC;EACvB;;EAC0D,IAAI,SAAS;AAC/D,WAAO,WAAW,KAAK,cAAc,WAAW,KAAK;EAC7D;EACI,QAAQ,GAAG;AACP,WAAO,KAAK,WAAW,EAAE,WAAW,KAAK,aAAa,CAAC,CAAC,EAAE,cAAc,KAAK,WAAW,QAAQ,EAAE,UAAU,IAAI,CAAC,EAAE;EAC3H;AACA;AA6CI,IAAM,KAAN,MAAS;AAAA;AAKT,IAAM,KAAN,cAAiB,GAAG;EACpB,YAAY,GAAG,GAAG,GAAG,IAAI,CAAA,GAAI;AACzB,UAAK,GAAI,KAAK,MAAM,GAAG,KAAK,QAAQ,GAAG,KAAK,eAAe,GAAG,KAAK,kBAAkB,GACrF,KAAK,OAAO;EACpB;EACI,eAAe;AACX,WAAO;EACf;AACA;AAcI,IAAM,KAAN,cAAiB,GAAG;EACpB,YAAY,GAAG,GAAG,GAAG,GAAG,IAAI,CAAA,GAAI;AAC5B,UAAK,GAAI,KAAK,MAAM,GAAG,KAAK,OAAO,GAAG,KAAK,YAAY,GAAG,KAAK,eAAe,GAC9E,KAAK,kBAAkB,GAAG,KAAK,OAAO;EAC9C;EACI,eAAe;AACX,WAAO,KAAK;EACpB;AACA;AAE8D,IAAM,KAAN,cAAiB,GAAG;EAC9E,YAAY,GAAG,GAAG;AACd,UAAK,GAAI,KAAK,MAAM,GAAG,KAAK,eAAe,GAAG,KAAK,OAAO,GAC1D,KAAK,kBAAkB,CAAA;EAC/B;EACI,eAAe;AACX,WAAO;EACf;AACA;AAQI,IAAM,KAAN,cAAiB,GAAG;EACpB,YAAY,GAAG,GAAG;AACd,UAAK,GAAI,KAAK,MAAM,GAAG,KAAK,eAAe,GAAG,KAAK,OAAO,GAC1D,KAAK,kBAAkB,CAAA;EAC/B;EACI,eAAe;AACX,WAAO;EACf;AACA;AAiBI,IAAM,MAAM,MAAM;AAClB,QAAM,IAAI;IACN,KAAK;IACL,MAAM;EACd;AACI,SAAO;AACX,GAAC;AANG,IAME,MAAM,MAAM;AACd,QAAM,IAAI;IACN,KAAK;IACL,MAAM;IACN,KAAK;IACL,MAAM;IACN,MAAM;IACN,MAAM;IACN,kBAAkB;IAClB,IAAI;IACJ,UAAU;IACV,sBAAsB;EAC9B;AACI,SAAO;AACX,GAAC;AApBG,IAoBE,MAAM,MAAM;AACd,QAAM,IAAI;IACN,KAAK;IACL,IAAI;EACZ;AACI,SAAO;AACX,GAAC;AAgBD,IAAM,KAAN,MAAS;EACL,YAAY,GAAG,GAAG;AACd,SAAK,aAAa,GAAG,KAAK,IAAI;EACtC;AACA;AAaA,SAAS,GAAG,GAAG,GAAG;AACd,MAAI,EAAE,GAAG;AACL,WAAO,GAAG,IAAI,KAAK,MAAM,EAAE,OAAO,EAAE,YAAW,EAAG,QAAQ,SAAS,EAAE,EAAE,QAAQ,KAAK,EAAE,MAAM,cAAc,EAAE,aAAa,MAAM,EAAE;EACzI;AACI,SAAO;IACH,SAAS,KAAK,EAAE;IAChB,OAAO,EAAE;EACjB;AACA;AAOA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO,EAAE,IAAI,EAAE,SAAQ,IAAK,EAAE,aAAY;AAC9C;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO,GAAG,GAAG,EAAE,YAAW,CAAE;AAChC;AAEA,SAAS,GAAG,GAAG;AACX,SAAO,EAAE,CAAC,CAAC,CAAC,GAAG,GAAG,cAAc,SAASE,IAAG;AACxC,UAAM,IAAI,GAAGA,EAAC;AACd,WAAO,IAAI,GAAG,EAAE,SAAS,EAAE,KAAK;EACxC,EAAM,CAAC,CAAC;AACR;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO,SAASA,IAAG;AACf,WAAO,IAAI,GAAG,CAAE,YAAYA,GAAE,WAAW,aAAaA,GAAE,QAAQ,CAAE;EAC1E,EAAM,CAAC,EAAE,MAAM,WAAW,EAAE,MAAM,CAAC,EAAE,gBAAe;AACpD;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO,GAAG,EAAE,YAAY,EAAE,IAAI;AAClC;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,QAAM,IAAI,SAASA,IAAG;AAClB,UAAMF,KAAI,GAAG,WAAWE,EAAC;AACzB,WAAO,EAAE,GAAGF,EAAC,CAAC,GAAGA;EACzB,EAAM,CAAC;AACH,MAAI,EAAE,IAAI,CAAC,MAAM,EAAE,WAAW;AAAW,UAAM,IAAI,EAAE,GAAG,sDAAsD,EAAE,IAAI,CAAC,IAAI,SAAS,EAAE,WAAW,SAAS;AACxJ,MAAI,EAAE,IAAI,CAAC,MAAM,EAAE,WAAW;AAAU,UAAM,IAAI,EAAE,GAAG,uDAAuD,EAAE,IAAI,CAAC,IAAI,SAAS,EAAE,WAAW,QAAQ;AACvJ,SAAO,IAAI,IAAI,GAAG,IAAI,GAAG,SAAS,KAAK,gBAAgB,EAAE,IAAI,CAAC,CAAC,GAAG,EAAE,SAAS,CAAC,EAAC;AAC/E,MAAI;AACR;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO,GAAG,EAAE,YAAY,CAAC;AAC7B;AAEA,SAAS,GAAG,GAAG;AACX,SAAO,IAAI,GAAG,CAAE,YAAY,EAAE,WAAW,WAAW,aAAa,EAAE,WAAW,QAAQ,CAAE,EAAE,gBAAe;AAC7G;AAEA,SAAS,GAAG,GAAG,GAAG,GAAG;AACjB,SAAO;IACH,MAAM,GAAG,GAAG,CAAC;IACb,QAAQ,EAAE,MAAM,SAAS;EACjC;AACA;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,SAAO,WAAW,IAAI,SAASE,IAAGF,IAAG;AACjC,MAAE,CAAC,CAACA,GAAE,KAAK,GAAGA,GAAE,MAAM,MAAMA,GAAE,MAAM;AACpC,UAAM,IAAI,GAAGE,IAAGF,GAAE,MAAM,IAAI,GAAG,IAAI,GAAGA,GAAE,MAAM,UAAU,GAAG,IAAIA,GAAE,MAAM,aAAa,GAAGA,GAAE,MAAM,UAAU,IAAI,GAAG,IAAG,GAAI,IAAI,IAAI,GAAG;MAC9H,UAAU;QACN,QAAQA,GAAE,MAAM;MAChC;IACA,CAAS;AACD,WAAO,GAAG,iBAAiB,GAAG,GAAG,GAAG,CAAC;EAC7C,EAAM,GAAG,CAAC,IAAI,aAAa,IAAI,SAASE,IAAGF,IAAG;AACtC,MAAE,CAAC,CAACA,GAAE,OAAO,GAAG,EAAE,CAAC,CAACA,GAAE,QAAQ;AAC9B,UAAM,IAAI,GAAGE,IAAGF,GAAE,OAAO,GAAG,IAAI,GAAGA,GAAE,QAAQ;AAC7C,WAAO,GAAG,cAAc,GAAG,CAAC;EACpC,EAAM,GAAG,CAAC,IAAI,EAAC;AACf;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,MAAI;AACJ,MAAI,aAAa;AAAI,QAAI;MACrB,QAAQ,GAAG,GAAG,EAAE,KAAK,EAAE,KAAK;IACpC;WAAgB,aAAa;AAAI,QAAI;MAC7B,QAAQ,GAAG,GAAG,EAAE,GAAG;IAC3B;WAAgB,aAAa;AAAI,QAAI;MAC7B,QAAQ,GAAG,GAAG,EAAE,KAAK,EAAE,IAAI;MAC3B,YAAY,GAAG,EAAE,SAAS;IAClC;OAAY;AACJ,QAAI,EAAE,aAAa;AAAK,aAAO,EAAC;AAChC,QAAI;MACA,QAAQ,GAAG,GAAG,EAAE,GAAG;IAC/B;EACA;AACI,SAAO,EAAE,gBAAgB,SAAS,MAAM,EAAE,mBAAmB,EAAE,gBAAgB,IAAK,CAAAE,OAAK,SAASA,IAAGF,IAAG;AACpG,UAAMG,KAAIH,GAAE;AACZ,QAAIG,cAAa;AAAI,aAAO;QACxB,WAAWH,GAAE,MAAM,gBAAe;QAClC,kBAAkB;MAC9B;AACQ,QAAIG,cAAa;AAAI,aAAO;QACxB,WAAWH,GAAE,MAAM,gBAAe;QAClC,uBAAuB;UACnB,QAAQG,GAAE;QAC1B;MACA;AACQ,QAAIA,cAAa;AAAI,aAAO;QACxB,WAAWH,GAAE,MAAM,gBAAe;QAClC,oBAAoB;UAChB,QAAQG,GAAE;QAC1B;MACA;AACQ,QAAIA,cAAa;AAAI,aAAO;QACxB,WAAWH,GAAE,MAAM,gBAAe;QAClC,WAAWG,GAAE;MACzB;AACQ,UAAM,EAAC;EACf,EAAM,GAAGD,EAAC,CAAC,IAAK,EAAE,aAAa,WAAW,EAAE,kBAAkB,SAASA,IAAGF,IAAG;AACrE,WAAO,WAAWA,GAAE,aAAa;MAC7B,YAAY,GAAGE,IAAGF,GAAE,UAAU;IAC1C,IAAY,WAAWA,GAAE,SAAS;MACtB,QAAQA,GAAE;IACtB,IAAY,EAAC;EACb,EAAM,GAAG,EAAE,YAAY,IAAI;AAC3B;AAEA,SAAS,GAAG,GAAG,GAAG;AAEd,QAAM,IAAI;IACN,iBAAiB,CAAA;EACzB,GAAO,IAAI,EAAE;AACT,WAAS,EAAE,mBAAmB,EAAE,SAAS,GAAG,GAAG,CAAC,GAAG,EAAE,gBAAgB,OAAO,CAAE;IAC1E,cAAc,EAAE;IAChB,gBAAgB;EACxB,CAAK,MAAO,EAAE,SAAS,GAAG,GAAG,EAAE,QAAO,CAAE,GAAG,EAAE,gBAAgB,OAAO,CAAE;IAC9D,cAAc,EAAE,YAAW;EACnC,CAAK;AACD,QAAM,IAAI,SAASE,IAAG;AAClB,QAAI,MAAMA,GAAE;AAAQ;AACpB,WAAO,GAAG,GAAG;MAAOA;MAAG;;IAAK,CAA6B;EACjE,EAAM,EAAE,OAAO;AACX,QAAM,EAAE,gBAAgB,QAAQ;AAChC,QAAM,IAAI,SAASA,IAAG;AAClB,QAAI,MAAMA,GAAE;AAAQ;AACpB,WAAOA,GAAE,IAAK,CAAAA;;MAEd,SAASA,IAAG;AACR,eAAO;UACH,OAAO,GAAGA,GAAE,KAAK;UACjB,WAAW,GAAGA,GAAE,GAAG;QACnC;MACA,EAESA,EAAC;KAAC;EACX,EAAM,EAAE,OAAO;AACX,QAAM,EAAE,gBAAgB,UAAU;AAClC,QAAM,IAAI,SAASA,IAAGF,IAAG;AACrB,WAAOE,GAAE,KAAK,GAAGF,EAAC,IAAIA,KAAI;MACtB,OAAOA;IACnB;EACA,EAAM,GAAG,EAAE,KAAK;AACZ,MAAI;AACJ,SAAO,SAAS,MAAM,EAAE,gBAAgB,QAAQ,IAAI,EAAE,YAAY,EAAE,gBAAgB,UAAU;IAC1F,SAAS,IAAI,EAAE,SAAS;IACxB,QAAQ,EAAE;EAClB,IAAQ,EAAE,UAAU,EAAE,gBAAgB,QAAQ,SAASE,IAAG;AAClD,WAAO;MACH,QAAQ,CAACA,GAAE;MACX,QAAQA,GAAE;IACtB;EACA,EAEK,EAAE,KAAK,IAAI;AAChB;AAEA,SAAS,GAAG,GAAG;AACX,SAAO,GAAG,CAAC;AACf;AAGA,SAAS,GAAG,GAAG;AACX,SAAO,GAAG,CAAC;AACf;AAEA,SAAS,GAAG,GAAG;AACX,SAAO,GAAG,CAAC;AACf;AAEA,SAAS,GAAG,GAAG;AACX,SAAO;IACH,WAAW,EAAE,gBAAe;EACpC;AACA;AAEA,SAAS,GAAG,GAAG;AACX,SAAO,aAAa,KAAK,SAASA,IAAG;AACjC,QAAI,SAA8BA,GAAE,IAAI;AACpC,UAAI,GAAGA,GAAE,KAAK;AAAG,eAAO;UACpB,aAAa;YACT,OAAO,GAAGA,GAAE,KAAK;YACjB,IAAI;UACxB;QACA;AACY,UAAI,GAAGA,GAAE,KAAK;AAAG,eAAO;UACpB,aAAa;YACT,OAAO,GAAGA,GAAE,KAAK;YACjB,IAAI;UACxB;QACA;IACA,WAAmB,SAAkCA,GAAE,IAAI;AAC/C,UAAI,GAAGA,GAAE,KAAK;AAAG,eAAO;UACpB,aAAa;YACT,OAAO,GAAGA,GAAE,KAAK;YACjB,IAAI;UACxB;QACA;AACY,UAAI,GAAGA,GAAE,KAAK;AAAG,eAAO;UACpB,aAAa;YACT,OAAO,GAAGA,GAAE,KAAK;YACjB,IAAI;UACxB;QACA;IACA;AACQ,WAAO;MACH,aAAa;QACT,OAAO,GAAGA,GAAE,KAAK;QACjB,IAAI,GAAGA,GAAE,EAAE;QACX,OAAOA,GAAE;MACzB;IACA;EACA,EAAM,CAAC,IAAI,aAAa,KAAK,SAASA,IAAG;AACjC,UAAM,IAAIA,GAAE,WAAU,EAAG,IAAK,CAAAA,OAAK,GAAGA,EAAC,CAAC;AACxC,QAAI,MAAM,EAAE;AAAQ,aAAO,EAAE,CAAC;AAC9B,WAAO;MACH,iBAAiB;QACb,IAAI,GAAGA,GAAE,EAAE;QACX,SAAS;MACzB;IACA;EACA,EAAM,CAAC,IAAI,EAAC;AACZ;AAEA,SAAS,GAAG,GAAG;AACX,QAAM,IAAI,CAAA;AACV,SAAO,EAAE,OAAO,QAAS,CAAAA,OAAK,EAAE,KAAKA,GAAE,gBAAe,CAAE,CAAC,GAAI;IACzD,YAAY;EACpB;AACA;AAEA,SAAS,GAAG,GAAG;AAEX,SAAO,EAAE,UAAU,KAAK,eAAe,EAAE,IAAI,CAAC,KAAK,gBAAgB,EAAE,IAAI,CAAC;AAC9E;AAiBI,SAAS,GAAG,GAAG;AACf,SAAO,IAAI;IAAG;;IAAwB;EAAE;AAC5C;AA2BA,IAAM,KAAN,MAAS;EACL,YAIA,GAIA,GAMA,IAAI,KAIE,IAAI,KAKJ,IAAI,KAAK;AACX,SAAK,IAAI,GAAG,KAAK,UAAU,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI,GAAG,KAAK,IAAI;IAEvF,KAAK,IAAI,KAAK,IAAG,GAAI,KAAK,MAAK;EACvC;;;;;;;;EAOW,QAAQ;AACX,SAAK,IAAI;EACjB;;;;;EAIW,IAAI;AACP,SAAK,IAAI,KAAK;EACtB;;;;;;EAKW,EAAE,GAAG;AAER,SAAK,OAAM;AAGX,UAAM,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,EAAC,CAAE,GAAG,IAAI,KAAK,IAAI,GAAG,KAAK,IAAG,IAAK,KAAK,CAAC,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI,CAAC;AAE5F,QAAI,KAAK,EAAE,sBAAsB,mBAAmB,qBAAqB,KAAK,4BAA4B,uBAAuB,WAAW,GACpJ,KAAK,IAAI,KAAK,EAAE,kBAAkB,KAAK,SAAS,GAAI,OAAO,KAAK,IAAI,KAAK,IAAG,GAC5E,EAAC,EAAG;;IAGJ,KAAK,KAAK,KAAK,GAAG,KAAK,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,MAAM,KAAK,IAAI,KAAK;EAClG;EACI,KAAK;AACD,aAAS,KAAK,MAAM,KAAK,EAAE,UAAS,GAAI,KAAK,IAAI;EACzD;EACI,SAAS;AACL,aAAS,KAAK,MAAM,KAAK,EAAE,OAAM,GAAI,KAAK,IAAI;EACtD;;EACsF,IAAI;AAClF,YAAQ,KAAK,OAAM,IAAK,OAAM,KAAK;EAC3C;AACA;AA2BA,IAAM,KAAN,cAAiB,MAAM;AAAA,EAAG;EACtB,YAAY,GAAG,GAAG,GAAG,GAAG;AACpB,UAAK,GAAI,KAAK,kBAAkB,GAAG,KAAK,sBAAsB,GAAG,KAAK,aAAa,GACnF,KAAK,IAAI,GAAG,KAAK,KAAK;EAC9B;EACI,KAAK;AACD,QAAI,KAAK;AAAI,YAAM,IAAI,EAAE,GAAG,yCAAyC;EAC7E;;EACsE,EAAE,GAAG,GAAG,GAAG;AACzE,WAAO,KAAK,GAAE,GAAI,QAAQ,IAAI,CAAE,KAAK,gBAAgB,SAAQ,GAAI,KAAK,oBAAoB,SAAQ,CAAE,CAAE,EAAE,KAAM,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,WAAW,EAAE,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,EAAG,MAAO,CAAAA,OAAK;AACrK,YAAM,oBAAoBA,GAAE,QAAQA,GAAE,SAAS,MAAM,KAAK,gBAAgB,gBAAe,GACzF,KAAK,oBAAoB,gBAAe,IAAKA,MAAK,IAAI,EAAE,GAAGA,GAAE,SAAQ,CAAE;IACnF,CAAS;EACT;;EAC4F,EAAE,GAAG,GAAG,GAAG,GAAG;AAClG,WAAO,KAAK,GAAE,GAAI,QAAQ,IAAI,CAAE,KAAK,gBAAgB,SAAQ,GAAI,KAAK,oBAAoB,SAAQ,CAAE,CAAE,EAAE,KAAM,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,WAAW,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,EAAG,MAAO,CAAAA,OAAK;AACxK,YAAM,oBAAoBA,GAAE,QAAQA,GAAE,SAAS,MAAM,KAAK,gBAAgB,gBAAe,GACzF,KAAK,oBAAoB,gBAAe,IAAKA,MAAK,IAAI,EAAE,GAAGA,GAAE,SAAQ,CAAE;IACnF,CAAS;EACT;EACI,YAAY;AACR,SAAK,KAAK;EAClB;AACA;AAIA,eAAe,GAAG,GAAG,GAAG;AACpB,QAAM,IAAI,EAAE,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,IAAI,cAAc,IAAI;IAC5C,QAAQ,EAAE,IAAK,CAAAA,OAAK,GAAG,EAAE,GAAGA,EAAC,CAAC;EACtC;AACI,QAAM,EAAE,EAAE,UAAU,GAAG,CAAC;AAC5B;AAEA,eAAe,GAAG,GAAG,GAAG;AACpB,QAAM,IAAI,EAAE,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC,IAAI,cAAc,IAAI;IAC5C,WAAW,EAAE,IAAK,CAAAA,OAAK,GAAG,EAAE,GAAGA,EAAC,CAAC;EACzC,GAAO,IAAI,MAAM,EAAE,EAAE,qBAAqB,GAAG,GAAG,EAAE,MAAM,GAAG,IAAI,oBAAI;AAC/D,IAAE,QAAS,CAAAA,OAAK;AACZ,UAAMF,KAAI,GAAG,EAAE,GAAGE,EAAC;AACnB,MAAE,IAAIF,GAAE,IAAI,SAAQ,GAAIA,EAAC;EACjC,CAAK;AACD,QAAM,IAAI,CAAA;AACV,SAAO,EAAE,QAAS,CAAAE,OAAK;AACnB,UAAMF,KAAI,EAAE,IAAIE,GAAE,SAAQ,CAAE;AAC5B,MAAE,CAAC,CAACF,EAAC,GAAG,EAAE,KAAKA,EAAC;EACxB,CAAK,GAAI;AACT;AAEA,eAAe,GAAG,GAAG,GAAG;AACpB,QAAM,IAAI,EAAE,CAAC,GAAG,IAAI,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;AACjC,UAAQ,MAAM,EAAE,EAAE,YAAY,EAAE,QAAQ;IACpC,iBAAiB,EAAE;EAC3B,CAAK,GAAG,OAAQ,CAAAE,OAAK,CAAC,CAACA,GAAE,QAAQ,EAAG,IAAK,CAAAA,OAAK,SAASA,IAAGF,IAAGG,IAAG;AACxD,UAAMC,KAAI,GAAGF,IAAGF,GAAE,IAAI,GAAG,IAAI,GAAGA,GAAE,UAAU,GAAG,IAAIA,GAAE,aAAa,GAAGA,GAAE,UAAU,IAAI,GAAG,IAAG,GAAI,IAAI,IAAI,GAAG;MACtG,UAAU;QACN,QAAQA,GAAE;MAC1B;IACA,CAAS,GAAG,IAAI,GAAG,iBAAiBI,IAAG,GAAG,GAAG,CAAC;AACtC,WAAOD,MAAK,EAAE,yBAAwB,GAAIA,KAAI,EAAE,yBAAwB,IAAK;EACrF,EAAM,EAAE,GAAGD,GAAE,UAAU,MAAM,CAAC;AAC9B;AAEA,eAAe,GAAG,GAAG,GAAG,GAAG;AACvB,QAAM,IAAI,EAAE,CAAC,GAAG,IAAI,SAASA,IAAGF,IAAGG,IAAG;AAClC,UAAMC,KAAI,GAAGF,IAAGF,EAAC,GAAGK,KAAI,CAAA;AACxB,WAAOF,GAAE,QAAS,CAAAD,OAAK;AACnB,kBAAYA,GAAE,IAAIG,GAAE,KAAK;QACrB,OAAOH,GAAE,MAAM,gBAAe;QAC9B,OAAO,CAAA;MACvB,CAAa,IAAI,UAAUA,GAAE,IAAIG,GAAE,KAAK;QACxB,OAAOH,GAAE,MAAM,gBAAe;QAC9B,KAAK;UACD,OAAO,GAAGA,GAAE,SAAS;QACzC;MACA,CAAa,IAAI,UAAUA,GAAE,KAAKG,GAAE,KAAK;QACzB,OAAOH,GAAE,MAAM,gBAAe;QAC9B,KAAK;UACD,OAAO,GAAGA,GAAE,SAAS;QACzC;MACA,CAAa;IACb,CAAS,GAAI;MACD,4BAA4B;QACxB,cAAcG;QACd,iBAAiBD,GAAE;MACnC;MACY,QAAQA,GAAE;IACtB;EACA,EAAM,EAAE,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,EAAE;AACxB,IAAE,WAAW,KAAK,OAAO,EAAE;AAC3B,QAAM,KAAK,MAAM,EAAE;IAAE;IAAuB;IAAG;;IAA8B;EAAC,GAAG,OAAQ,CAAAF,OAAK,CAAC,CAACA,GAAE,MAAM;AAEpG,SAAO,EAAE,MAAM,EAAE,MAAM,IAAI,IAAI,EAAE,CAAC,GAAG,QAAQ,EAAE,OAAO,iBAAiB,IAAI,GAAG;IAC9E,UAAU;MACN,QAAQ,UAAU,IAAI,EAAE,WAAW,WAAW,IAAI,SAAS,EAAE;IACzE;EACA,CAAK;AACD,MAAI,GAAG;AACX;AAiBI,IAAM,KAAK,oBAAI;AAWnB,SAAS,GAAG,GAAG;AACX,MAAI,EAAE;AAAa,UAAM,IAAI,EAAE,GAAG,yCAAyC;AAC3E,MAAI,CAAC,GAAG,IAAI,CAAC,GAAG;AACZ,MAAE,qBAAqB,wBAAwB;AAC/C,UAAM,IAAI,SAASA,IAAG;AAClB,aAAO,IAAI,GAAGA,IAAG,MAAM,KAAK,IAAI,CAAC;IAC7C,GAAW,IAAI,EAAE,aAAa,IAAI,EAAE,IAAI,QAAQ,SAAS,IAAI,IAAI,EAAE,iBAAiB,IAAI,EAAE,gBAAe,GACjG,IAAI,EAAE,GAAG,GAAG,GAAG,EAAE,MAAM,EAAE,KAAK,EAAE,8BAA8B,EAAE,mCAAmC,EAAE,eAAe,EAAC,GAAI,IAAI,GAAG,EAAE,WAAW,GAAG,IAAI,SAASA,IAAGF,IAAGG,IAAGC,IAAG;AACrK,aAAO,IAAI,GAAGF,IAAGF,IAAGG,IAAGC,EAAC;IACpC,EAAU,EAAE,kBAAkB,EAAE,sBAAsB,GAAG,CAAC;AAClD,OAAG,IAAI,GAAG,CAAC;EACnB;AACI,MAAI,GAAG,GAAG,GAAG;AAgBV,SAAO,GAAG,IAAI,CAAC;AACtB;AAWA,IAAM,KAAN,MAAS;EACL,YAAY,GAAG;AACX,QAAI;AACJ,QAAI,WAAW,EAAE,MAAM;AACnB,UAAI,WAAW,EAAE;AAAK,cAAM,IAAI,EAAE,GAAG,oDAAoD;AACzF,WAAK,OAAO,4BAA4B,KAAK,MAAM;IAC/D;AAAe,WAAK,OAAO,EAAE,MAAM,KAAK,MAAM,UAAU,IAAI,EAAE,QAAQ,WAAW,KAAK;AAC9E,QAAI,KAAK,cAAc,EAAE,aAAa,KAAK,4BAA4B,CAAC,CAAC,EAAE,2BAC3E,WAAW,EAAE;AAAgB,WAAK,iBAAiB;SAAe;AAC9D,UAAI,OAAO,EAAE,kBAAkB,EAAE,iBAAiB;AAAS,cAAM,IAAI,EAAE,GAAG,yCAAyC;AACnH,WAAK,iBAAiB,EAAE;IACpC;AACQ,SAAK,+BAA+B,CAAC,CAAC,EAAE,8BAA8B,KAAK,oCAAoC,CAAC,CAAC,EAAE,mCACnH,KAAK,kBAAkB,CAAC,CAAC,EAAE,iBAAiB,SAASF,IAAGF,IAAG,GAAG,GAAG;AAC7D,UAAI,SAAOA,MAAK,SAAO;AAAG,cAAM,IAAI,EAAE,GAAG,GAAGE,UAAS,4BAA4B;IAC7F,EAAU,gCAAgC,EAAE,8BAA8B,qCAAqC,EAAE,iCAAiC;EAClJ;EACI,QAAQ,GAAG;AACP,WAAO,KAAK,SAAS,EAAE,QAAQ,KAAK,QAAQ,EAAE,OAAO,KAAK,gBAAgB,EAAE,eAAe,KAAK,mBAAmB,EAAE,kBAAkB,KAAK,iCAAiC,EAAE,gCAAgC,KAAK,sCAAsC,EAAE,qCAAqC,KAAK,8BAA8B,EAAE,6BAA6B,KAAK,oBAAoB,EAAE;EACtY;AACA;AAsBI,IAAM,KAAN,MAAS;;EAET,YAAY,GAAG,GAAG,GAAG,GAAG;AACpB,SAAK,mBAAmB,GAAG,KAAK,uBAAuB,GAAG,KAAK,cAAc,GAC7E,KAAK,OAAO;;;IAIZ,KAAK,OAAO,kBAAkB,KAAK,kBAAkB,UAAU,KAAK,YAAY,IAAI,GAAG,CAAA,CAAE,GACzF,KAAK,kBAAkB;EAC/B;;;;;EAIW,IAAI,MAAM;AACb,QAAI,CAAC,KAAK;AAAM,YAAM,IAAI,EAAE,GAAG,8EAA8E;AAC7G,WAAO,KAAK;EACpB;EACI,IAAI,eAAe;AACf,WAAO,KAAK;EACpB;EACI,IAAI,cAAc;AACd,WAAO,WAAW,KAAK;EAC/B;EACI,aAAa,GAAG;AACZ,QAAI,KAAK;AAAiB,YAAM,IAAI,EAAE,GAAG,oKAAoK;AAC7M,SAAK,YAAY,IAAI,GAAG,CAAC,GAAG,WAAW,EAAE,gBAAgB,KAAK,mBAAmB,SAASA,IAAG;AACzF,UAAI,CAACA;AAAG,eAAO,IAAI;AACnB,cAAQA,GAAE,MAAI;QACZ,KAAK;AACH,gBAAM,IAAIA,GAAE;AACZ,iBAAO,IAAI,EAAE,GAAGA,GAAE,gBAAgB,KAAKA,GAAE,YAAY,MAAMA,GAAE,oBAAoB,IAAI;QAEvF,KAAK;AACH,iBAAOA,GAAE;QAEX;AACE,gBAAM,IAAI,EAAE,GAAG,mEAAmE;MAClG;IACA,EAAU,EAAE,WAAW;EACvB;EACI,eAAe;AACX,WAAO,KAAK;EACpB;EACI,kBAAkB;AACd,WAAO,KAAK,kBAAkB,MAAI,KAAK;EAC/C;EACI,UAAU;AACN,WAAO,KAAK,mBAAmB,KAAK,iBAAiB,KAAK,WAAU,IAAK,KAAK;EACtF;;EACuF,SAAS;AACxF,WAAO;MACH,KAAK,KAAK;MACV,YAAY,KAAK;MACjB,UAAU,KAAK;IAC3B;EACA;;;;;;;;EAOW,aAAa;AAChB,WAAO,SAAS,GAAG;AACf,YAAM,IAAI,GAAG,IAAI,CAAC;AAClB,YAAM,EAAE,qBAAqB,oBAAoB,GAAG,GAAG,OAAO,CAAC,GAAG,EAAE,UAAS;IACzF,EAAU,IAAI,GAAG,QAAQ,QAAO;EAChC;AACA;AAEA,SAAS,GAAG,GAAG,GAAG,GAAG;AACjB,QAAM,IAAI;AACV,QAAM,IAAI,aAAa,GAAG,gBAAgB;AAC1C,MAAI,EAAE,cAAc,CAAC;AAAG,UAAM,IAAI,EAAE,GAAG,iDAAiD;AACxF,SAAO,EAAE,WAAW;IAChB,SAAS;IACT,oBAAoB;EAC5B,CAAK;AACL;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,QAAM,IAAI,YAAY,OAAO,IAAI,IAAIA,OAAC,GAAI,IAAI,YAAY,OAAO,IAAI,IAAI,KAAK,aAAa,IAAI,aAAa,GAAG,gBAAgB,EAAE,aAAa;IAC1I,YAAY;EACpB,CAAK;AACD,MAAI,CAAC,EAAE,cAAc;AACjB,UAAM,IAAII,kCAAE,WAAW;AACvB,SAAK,GAAG,GAAG,GAAG,CAAC;EACvB;AACI,SAAO;AACX;AAcI,SAAS,GAAG,GAAG,GAAG,GAAG,IAAI,CAAA,GAAI;AAC7B,MAAI;AACJ,QAAM,KAAK,IAAI,GAAG,GAAG,EAAE,GAAG,aAAY;AACtC,MAAI,+BAA+B,EAAE,QAAQ,EAAE,SAAS,KAAK,EAAE,oFAAoF,GACnJ,EAAE,aAAa,OAAO,OAAO,OAAO,OAAO,CAAA,GAAI,CAAC,GAAG;IAC/C,MAAM,GAAG,KAAK;IACd,KAAK;EACb,CAAK,CAAC,GAAG,EAAE,eAAe;AAClB,QAAIN,IAAGG;AACP,QAAI,YAAY,OAAO,EAAE;AAAe,MAAAH,KAAI,EAAE,eAAeG,KAAI,EAAE;SAAgB;AAG/E,MAAAH,KAAIO,oBAAE,EAAE,eAAe,UAAU,IAAI,EAAE,SAAS,WAAW,IAAI,SAAS,EAAE,QAAQ,SAAS;AAC3F,YAAMC,KAAI,EAAE,cAAc,OAAO,EAAE,cAAc;AACjD,UAAI,CAACA;AAAG,cAAM,IAAI,EAAE,GAAG,sDAAsD;AAC7E,MAAAL,KAAI,IAAI,EAAEK,EAAC;IACvB;AACQ,MAAE,mBAAmB,IAAI,EAAE,IAAI,EAAER,IAAGG,EAAC,CAAC;EAC9C;AACA;AAqBI,SAAS,GAAG,GAAG;AACf,SAAO,IAAI,GAAG,GAAG,EAAE,GAAGH,uBAAE,EAAE,KAAK,gBAAgB,GAAG,EAAE,QAAO;AAC/D;AAsCA,IAAM,KAAN,MAAS;;;;;;;EAOL,YAEA,IAAI,SAAS,GAAG;AACZ,SAAK,iBAAiB,GAAG,KAAK,qBAAqB;IAEnD,KAAK,OAAO;EACpB;AACA;AAII,IAAM,KAAN,MAAS;;EAET,YAAY,GAAG,GAAG,GAAG;AACjB,SAAK,kBAAkB,GAAG,KAAK,QAAQ;IAEvC,KAAK,OAAO,0BAA0B,KAAK,QAAQ;EAC3D;;;;;;;;;;;;EAWW,OAAO;AACV,WAAO,KAAK,gBAAgB,aAAa,KAAK,MAAM,KAAK;EACjE;AACA;AAsBI,IAAM,KAAN,MAAS;;EAET,YAAY,GAIZ,GAAG,GAAG;AACF,SAAK,YAAY,GAAG,KAAK,OAAO;IAEhC,KAAK,OAAO,YAAY,KAAK,YAAY;EACjD;EACI,IAAI,QAAQ;AACR,WAAO,KAAK,KAAK;EACzB;;;;EAGW,IAAI,KAAK;AACZ,WAAO,KAAK,KAAK,KAAK,YAAW;EACzC;;;;;EAIW,IAAI,OAAO;AACd,WAAO,KAAK,KAAK,KAAK,gBAAe;EAC7C;;;;EAGW,IAAI,SAAS;AAChB,WAAO,IAAI,GAAG,KAAK,WAAW,KAAK,WAAW,KAAK,KAAK,KAAK,QAAO,CAAE;EAC9E;EACI,cAAc,GAAG;AACb,WAAO,IAAI,GAAG,KAAK,WAAW,GAAG,KAAK,IAAI;EAClD;AACA;AAKI,IAAM,KAAN,MAAS;;;EAGT,YAAY,GAIZ,GAAG,GAAG;AACF,SAAK,YAAY,GAAG,KAAK,SAAS;IAElC,KAAK,OAAO,SAAS,KAAK,YAAY;EAC9C;EACI,cAAc,GAAG;AACb,WAAO,IAAI,GAAG,KAAK,WAAW,GAAG,KAAK,MAAM;EACpD;AACA;AAKI,IAAM,KAAN,cAAiB,GAAG;;EAEpB,YAAY,GAAG,GAAG,GAAG;AACjB,UAAM,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,KAAK,QAAQ;IAErC,KAAK,OAAO;EACpB;;EAC2C,IAAI,KAAK;AAC5C,WAAO,KAAK,OAAO,KAAK,YAAW;EAC3C;;;;;EAIW,IAAI,OAAO;AACd,WAAO,KAAK,OAAO,KAAK,gBAAe;EAC/C;;;;;EAIW,IAAI,SAAS;AAChB,UAAM,IAAI,KAAK,MAAM,QAAO;AAC5B,WAAO,EAAE,QAAO,IAAK,OAAO,IAAI;MAAG,KAAK;;MACvB;MAAM,IAAI,GAAG,CAAC;IAAC;EACxC;EACI,cAAc,GAAG;AACb,WAAO,IAAI,GAAG,KAAK,WAAW,GAAG,KAAK,KAAK;EACnD;AACA;AAEA,SAAS,GAAG,GAAG,MAAM,GAAG;AACpB,MAAI,IAAIS,mBAAE,CAAC,GAAG,GAAG,cAAc,QAAQ,CAAC,GAAG,aAAa,IAAI;AACxD,UAAM,IAAI,GAAG,WAAW,GAAG,GAAG,CAAC;AAC/B,WAAO,GAAG,CAAC,GAAG,IAAI;MAAG;;MAAoB;MAAM;IAAC;EACxD;AACI;AACI,QAAI,EAAE,aAAa,MAAM,aAAa;AAAK,YAAM,IAAI,EAAE,GAAG,+GAA+G;AACzK,UAAM,IAAI,EAAE,MAAM,MAAM,GAAG,WAAW,GAAG,GAAG,CAAC,CAAC;AAC9C,WAAO,GAAG,CAAC,GAAG,IAAI;MAAG,EAAE;;MACN;MAAM;IAAC;EAChC;AACA;AAcI,SAAS,GAAG,GAAG,GAAG;AAClB,MAAI,IAAI,GAAG,GAAG,EAAE,GAAG,GAAG,mBAAmB,iBAAiB,CAAC,GAAG,EAAE,QAAQ,GAAG,KAAK;AAAG,UAAM,IAAI,EAAE,GAAG,0BAA0B,+EAA+E;AAC3M,SAAO,IAAI;IAAG;;IACG;IAAM,SAASP,IAAG;AAC/B,aAAO,IAAI,GAAG,GAAG,UAAS,GAAIA,EAAC;IACvC,EAAM,CAAC;EAAC;AACR;AAEA,SAAS,GAAG,GAAG,MAAM,GAAG;AACpB,MAAI,IAAIO,mBAAE,CAAC;;EAGX,MAAM,UAAU,WAAW,IAAI,GAAG,EAAC,IAAK,GAAG,OAAO,QAAQ,CAAC,GAAG,aAAa,IAAI;AAC3E,UAAM,IAAI,GAAG,WAAW,GAAG,GAAG,CAAC;AAC/B,WAAO,GAAG,CAAC,GAAG,IAAI;MAAG;;MACJ;MAAM,IAAI,GAAG,CAAC;IAAC;EACxC;AACI;AACI,QAAI,EAAE,aAAa,MAAM,aAAa;AAAK,YAAM,IAAI,EAAE,GAAG,+GAA+G;AACzK,UAAM,IAAI,EAAE,MAAM,MAAM,GAAG,WAAW,GAAG,GAAG,CAAC,CAAC;AAC9C,WAAO,GAAG,CAAC,GAAG,IAAI,GAAG,EAAE,WAAW,aAAa,KAAK,EAAE,YAAY,MAAM,IAAI,GAAG,CAAC,CAAC;EACzF;AACA;AASI,SAAS,GAAG,GAAG,GAAG;AAClB,SAAO,IAAIA,mBAAE,CAAC,GAAG,IAAIA,mBAAE,CAAC,IAAI,aAAa,MAAM,aAAa,QAAQ,aAAa,MAAM,aAAa,QAAQ,EAAE,cAAc,EAAE,aAAa,EAAE,SAAS,EAAE,QAAQ,EAAE,cAAc,EAAE;AACtL;AAUI,SAAS,GAAG,GAAG,GAAG;AAClB,SAAO,IAAIA,mBAAE,CAAC,GAAG,IAAIA,mBAAE,CAAC,GAAG,aAAa,MAAM,aAAa,OAAO,EAAE,cAAc,EAAE,aAAa,GAAG,EAAE,QAAQ,EAAE,MAAM,KAAK,EAAE,cAAc,EAAE;AACjJ;AAoBI,IAAM,KAAN,MAAS;;EAET,YAAY,GAAG;AACX,SAAK,cAAc;EAC3B;;;;;;;EAMW,OAAO,iBAAiB,GAAG;AAC9B,QAAI;AACA,aAAO,IAAI,GAAG,GAAG,iBAAiB,CAAC,CAAC;IAChD,SAAiBP,IAAP;AACE,YAAM,IAAI,EAAE,GAAG,kDAAkDA,EAAC;IAC9E;EACA;;;;;;EAKW,OAAO,eAAe,GAAG;AAC5B,WAAO,IAAI,GAAG,GAAG,eAAe,CAAC,CAAC;EAC1C;;;;;;EAKW,WAAW;AACd,WAAO,KAAK,YAAY,SAAQ;EACxC;;;;;;EAKW,eAAe;AAClB,WAAO,KAAK,YAAY,aAAY;EAC5C;;;;;;EAKW,WAAW;AACd,WAAO,mBAAmB,KAAK,SAAQ,IAAK;EACpD;;;;;;;EAMW,QAAQ,GAAG;AACd,WAAO,KAAK,YAAY,QAAQ,EAAE,WAAW;EACrD;AACA;AAyBI,IAAM,KAAN,MAAS;;;;;;;EAOT,eAAe,GAAG;AACd,aAAS,IAAI,GAAG,IAAI,EAAE,QAAQ,EAAE;AAAG,UAAI,MAAM,EAAE,CAAC,EAAE;AAAQ,cAAM,IAAI,EAAE,GAAG,yEAAyE;AAClJ,SAAK,gBAAgB,IAAI,GAAG,CAAC;EACrC;;;;;;;EAMW,QAAQ,GAAG;AACd,WAAO,KAAK,cAAc,QAAQ,EAAE,aAAa;EACzD;AACA;AAKI,SAAS,KAAK;AACd,SAAO,IAAI,GAAG,UAAU;AAC5B;AAqBI,IAAM,KAAN,MAAS;;;;;EAKT,YAAY,GAAG;AACX,SAAK,cAAc;EAC3B;AACA;AAwBI,IAAM,KAAN,MAAS;;;;;;;EAOT,YAAY,GAAG,GAAG;AACd,QAAI,CAAC,SAAS,CAAC,KAAK,IAAI,OAAO,IAAI;AAAI,YAAM,IAAI,EAAE,GAAG,4DAA4D,CAAC;AACnH,QAAI,CAAC,SAAS,CAAC,KAAK,IAAI,QAAQ,IAAI;AAAK,YAAM,IAAI,EAAE,GAAG,+DAA+D,CAAC;AACxH,SAAK,OAAO,GAAG,KAAK,QAAQ;EACpC;;;;EAGW,IAAI,WAAW;AAClB,WAAO,KAAK;EACpB;;;;EAGW,IAAI,YAAY;AACnB,WAAO,KAAK;EACpB;;;;;;;EAMW,QAAQ,GAAG;AACd,WAAO,KAAK,SAAS,EAAE,QAAQ,KAAK,UAAU,EAAE;EACxD;;EAC2E,SAAS;AAC5E,WAAO;MACH,UAAU,KAAK;MACf,WAAW,KAAK;IAC5B;EACA;;;;;EAIW,WAAW,GAAG;AACjB,WAAO,GAAG,KAAK,MAAM,EAAE,IAAI,KAAK,GAAG,KAAK,OAAO,EAAE,KAAK;EAC9D;AACA;AAiBI,IAAM,KAAK;AAEuD,IAAM,KAAN,MAAS;EAC3E,YAAY,GAAG,GAAG,GAAG;AACjB,SAAK,OAAO,GAAG,KAAK,YAAY,GAAG,KAAK,kBAAkB;EAClE;EACI,WAAW,GAAG,GAAG;AACb,WAAO,SAAS,KAAK,YAAY,IAAI,GAAG,GAAG,KAAK,MAAM,KAAK,WAAW,GAAG,KAAK,eAAe,IAAI,IAAI,GAAG,GAAG,KAAK,MAAM,GAAG,KAAK,eAAe;EACrJ;AACA;AAE0E,IAAM,KAAN,MAAS;EAC/E,YAAY,GAEZ,GAAG,GAAG;AACF,SAAK,OAAO,GAAG,KAAK,YAAY,GAAG,KAAK,kBAAkB;EAClE;EACI,WAAW,GAAG,GAAG;AACb,WAAO,IAAI,GAAG,GAAG,KAAK,MAAM,KAAK,WAAW,GAAG,KAAK,eAAe;EAC3E;AACA;AAEA,SAAS,GAAG,GAAG;AACX,UAAQ,GAAC;IACP,KAAK;IAEG,KAAK;IAEL,KAAK;AACX,aAAO;IAET,KAAK;IACL,KAAK;AACH,aAAO;IAET;AACE,YAAM,EAAC;EACf;AACA;AAEiE,IAAM,KAAN,MAAS;;;;;;;;;;;;;;;;;;;EAmBtE,YAAY,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AAC1B,SAAK,WAAW,GAAG,KAAK,aAAa,GAAG,KAAK,IAAI,GAAG,KAAK,4BAA4B;;IAGrF,WAAW,KAAK,KAAK,GAAE,GAAI,KAAK,kBAAkB,KAAK,CAAA,GAAI,KAAK,YAAY,KAAK,CAAA;EACzF;EACI,IAAI,OAAO;AACP,WAAO,KAAK,SAAS;EAC7B;EACI,IAAI,KAAK;AACL,WAAO,KAAK,SAAS;EAC7B;;EAC6E,GAAG,GAAG;AAC3E,WAAO,IAAI,GAAG,OAAO,OAAO,OAAO,OAAO,CAAA,GAAI,KAAK,QAAQ,GAAG,CAAC,GAAG,KAAK,YAAY,KAAK,GAAG,KAAK,2BAA2B,KAAK,iBAAiB,KAAK,SAAS;EACvK;EACI,GAAG,GAAG;AACF,QAAI;AACJ,UAAM,IAAI,UAAU,IAAI,KAAK,SAAS,WAAW,IAAI,SAAS,EAAE,MAAM,CAAC,GAAG,IAAI,KAAK,GAAG;MAClF,MAAM;MACN,IAAI;IAChB,CAAS;AACD,WAAO,EAAE,GAAG,CAAC,GAAG;EACxB;EACI,GAAG,GAAG;AACF,QAAI;AACJ,UAAM,IAAI,UAAU,IAAI,KAAK,SAAS,WAAW,IAAI,SAAS,EAAE,MAAM,CAAC,GAAG,IAAI,KAAK,GAAG;MAClF,MAAM;MACN,IAAI;IAChB,CAAS;AACD,WAAO,EAAE,GAAE,GAAI;EACvB;EACI,GAAG,GAAG;AAGF,WAAO,KAAK,GAAG;MACX,MAAM;MACN,IAAI;IAChB,CAAS;EACT;EACI,GAAG,GAAG;AACF,WAAO,GAAG,GAAG,KAAK,SAAS,YAAY,KAAK,SAAS,MAAM,OAAI,KAAK,MAAM,KAAK,SAAS,EAAE;EAClG;;EACsF,SAAS,GAAG;AAC1F,WAAO,WAAW,KAAK,UAAU,KAAM,OAAK,EAAE,WAAW,CAAC,CAAC,KAAM,WAAW,KAAK,gBAAgB,KAAM,OAAK,EAAE,WAAW,EAAE,KAAK,CAAC;EACzI;EACI,KAAK;AAGD,QAAI,KAAK;AAAM,eAAS,IAAI,GAAG,IAAI,KAAK,KAAK,QAAQ;AAAK,aAAK,GAAG,KAAK,KAAK,IAAI,CAAC,CAAC;EAC1F;EACI,GAAG,GAAG;AACF,QAAI,MAAM,EAAE;AAAQ,YAAM,KAAK,GAAG,mCAAmC;AACrE,QAAI,GAAG,KAAK,EAAE,KAAK,GAAG,KAAK,CAAC;AAAG,YAAM,KAAK,GAAG,gDAAgD;EACrG;AACA;AAKI,IAAM,KAAN,MAAS;EACT,YAAY,GAAG,GAAG,GAAG;AACjB,SAAK,aAAa,GAAG,KAAK,4BAA4B,GAAG,KAAK,IAAI,KAAK,GAAG,CAAC;EACnF;;EACqD,GAAG,GAAG,GAAG,GAAG,IAAI,OAAI;AACjE,WAAO,IAAI,GAAG;MACV,IAAI;MACJ,YAAY;MACZ,IAAI;MACJ,MAAM,GAAG,UAAS;MAClB,IAAI;MACJ,IAAI;IAChB,GAAW,KAAK,YAAY,KAAK,GAAG,KAAK,yBAAyB;EAClE;AACA;AAEA,SAAS,GAAG,GAAG;AACX,QAAM,IAAI,EAAE,gBAAe,GAAI,IAAI,GAAG,EAAE,WAAW;AACnD,SAAO,IAAI,GAAG,EAAE,aAAa,CAAC,CAAC,EAAE,2BAA2B,CAAC;AACjE;AAE8C,SAAS,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,CAAA,GAAI;AAC7E,QAAM,IAAI,EAAE,GAAG,EAAE,SAAS,EAAE,cAAc,IAAkC,GAA6B,GAAG,GAAG,CAAC;AAChH,KAAG,uCAAuC,GAAG,CAAC;AAC9C,QAAM,IAAI,GAAG,GAAG,CAAC;AACjB,MAAI,GAAG;AACP,MAAI,EAAE;AAAO,QAAI,IAAI,GAAG,EAAE,SAAS,GAAG,IAAI,EAAE;WAA0B,EAAE,aAAa;AACjF,UAAMA,KAAI,CAAA;AACV,eAAWE,MAAK,EAAE,aAAa;AAC3B,YAAMC,KAAI,GAAG,GAAGD,IAAG,CAAC;AACpB,UAAI,CAAC,EAAE,SAASC,EAAC;AAAG,cAAM,IAAI,EAAE,GAAG,UAAUA,uEAAsE;AACnH,SAAGH,IAAGG,EAAC,KAAKH,GAAE,KAAKG,EAAC;IAChC;AACQ,QAAI,IAAI,GAAGH,EAAC,GAAG,IAAI,EAAE,gBAAgB,OAAQ,CAAAA,OAAK,EAAE,OAAOA,GAAE,KAAK,CAAC;EAC3E;AAAW,QAAI,MAAM,IAAI,EAAE;AACvB,SAAO,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,GAAG,CAAC;AACjC;AAEA,IAAM,KAAN,cAAiB,GAAG;EAChB,kBAAkB,GAAG;AACjB,QAAI,MAAoC,EAAE;AAAI,YAAM,MAAkC,EAAE,KAAK,EAAE,GAAG,GAAG,KAAK,oEAAoE,IAAI,EAAE,GAAG,GAAG,KAAK,sEAAsE;AAGrQ,WAAO,EAAE,UAAU,KAAK,EAAE,IAAI,GAAG;EACzC;EACI,QAAQ,GAAG;AACP,WAAO,aAAa;EAC5B;AACA;AAiBI,SAAS,GAAG,GAAG,GAAG,GAAG;AACrB,SAAO,IAAI,GAAG;IACV,IAAI;IACJ,IAAI,EAAE,SAAS;IACf,YAAY,EAAE;IACd,IAAI;EACZ,GAAO,EAAE,YAAY,EAAE,GAAG,EAAE,yBAAyB;AACrD;AAEA,IAAM,KAAN,cAAiB,GAAG;EAChB,kBAAkB,GAAG;AACjB,WAAO,IAAI,GAAG,EAAE,MAAM,IAAI,IAAE;EACpC;EACI,QAAQ,GAAG;AACP,WAAO,aAAa;EAC5B;AACA;AAEA,IAAM,KAAN,cAAiB,GAAG;EAChB,YAAY,GAAG,GAAG;AACd,UAAM,CAAC,GAAG,KAAK,KAAK;EAC5B;EACI,kBAAkB,GAAG;AACjB,UAAM,IAAI;MAAG;MAAM;;MACR;IAAE,GAAG,IAAI,KAAK,GAAG,IAAK,CAAAA,OAAK,GAAGA,IAAG,CAAC,CAAC,GAAI,IAAI,IAAI,GAAG,CAAC;AAC9D,WAAO,IAAI,GAAG,EAAE,MAAM,CAAC;EAC/B;EACI,QAAQ,GAAG;AAEP,WAAO,SAAS;EACxB;AACA;AAEA,IAAM,KAAN,cAAiB,GAAG;EAChB,YAAY,GAAG,GAAG;AACd,UAAM,CAAC,GAAG,KAAK,KAAK;EAC5B;EACI,kBAAkB,GAAG;AACjB,UAAM,IAAI;MAAG;MAAM;;MACR;IAAE,GAAG,IAAI,KAAK,GAAG,IAAK,CAAAA,OAAK,GAAGA,IAAG,CAAC,CAAC,GAAI,IAAI,IAAI,GAAG,CAAC;AAC9D,WAAO,IAAI,GAAG,EAAE,MAAM,CAAC;EAC/B;EACI,QAAQ,GAAG;AAEP,WAAO,SAAS;EACxB;AACA;AAEA,IAAM,KAAN,cAAiB,GAAG;EAChB,YAAY,GAAG,GAAG;AACd,UAAM,CAAC,GAAG,KAAK,KAAK;EAC5B;EACI,kBAAkB,GAAG;AACjB,UAAM,IAAI,IAAI,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,KAAK,EAAE,CAAC;AACtC,WAAO,IAAI,GAAG,EAAE,MAAM,CAAC;EAC/B;EACI,QAAQ,GAAG;AAEP,WAAO,SAAS;EACxB;AACA;AAEgD,SAAS,GAAG,GAAG,GAAG,GAAG,GAAG;AACpE,QAAM,IAAI,EAAE,GAAG,GAAgC,GAAG,CAAC;AACnD,KAAG,uCAAuC,GAAG,CAAC;AAC9C,QAAM,IAAI,CAAA,GAAI,IAAI,GAAG,MAAK;AAC1B,KAAG,GAAI,CAACA,IAAGE,OAAM;AACb,UAAML,KAAI,GAAG,GAAGG,IAAG,CAAC;AAGZ,IAAAE,KAAIK,mBAAEL,EAAC;AACf,UAAM,IAAI,EAAE,GAAGL,EAAC;AAChB,QAAIK,cAAa;AAEjB,QAAE,KAAKL,EAAC;SAAQ;AACZ,YAAMG,KAAI,GAAGE,IAAG,CAAC;AACjB,cAAQF,OAAM,EAAE,KAAKH,EAAC,GAAG,EAAE,IAAIA,IAAGG,EAAC;IAC/C;EACA,CAAK;AACD,QAAM,IAAI,IAAI,GAAG,CAAC;AAClB,SAAO,IAAI,GAAG,GAAG,GAAG,EAAE,eAAe;AACzC;AAE+D,SAAS,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AACzF,QAAM,IAAI,EAAE,GAAG,GAAgC,GAAG,CAAC,GAAG,IAAI,CAAE,GAAG,GAAG,GAAG,CAAC,CAAC,GAAI,IAAI,CAAE,CAAC;AAClF,MAAI,EAAE,SAAS,KAAK;AAAG,UAAM,IAAI,EAAE,GAAG,YAAY,wGAAwG;AAC1J,WAASA,KAAI,GAAGA,KAAI,EAAE,QAAQA,MAAK;AAAG,MAAE,KAAK,GAAG,GAAG,EAAEA,EAAC,CAAC,CAAC,GAAG,EAAE,KAAK,EAAEA,KAAI,CAAC,CAAC;AAC1E,QAAM,IAAI,CAAA,GAAI,IAAI,GAAG,MAAK;AAG1B,WAASA,KAAI,EAAE,SAAS,GAAGA,MAAK,GAAG,EAAEA;AAAG,QAAI,CAAC,GAAG,GAAG,EAAEA,EAAC,CAAC,GAAG;AACtD,YAAMF,KAAI,EAAEE,EAAC;AACb,UAAIC,KAAI,EAAED,EAAC;AAGH,MAAAC,KAAIM,mBAAEN,EAAC;AACf,YAAMC,KAAI,EAAE,GAAGJ,EAAC;AAChB,UAAIG,cAAa;AAEjB,UAAE,KAAKH,EAAC;WAAQ;AACZ,cAAME,KAAI,GAAGC,IAAGC,EAAC;AACjB,gBAAQF,OAAM,EAAE,KAAKF,EAAC,GAAG,EAAE,IAAIA,IAAGE,EAAC;MAC/C;IACA;AACI,QAAM,IAAI,IAAI,GAAG,CAAC;AAClB,SAAO,IAAI,GAAG,GAAG,GAAG,EAAE,eAAe;AACzC;AAQI,SAAS,GAAG,GAAG,GAAG,GAAG,IAAI,OAAI;AAC7B,SAAO,GAAG,GAAG,EAAE,GAAG,IAAI,IAAuC,GAAkC,CAAC,CAAC;AACrG;AAUI,SAAS,GAAG,GAAG,GAAG;AAClB,MAAI;;;IAGJ,IAAIO,mBAAE,CAAC;EAAC;AAAG,WAAO,GAAG,4BAA4B,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC;AAC/D,MAAI,aAAa;AAUjB,WAAO,SAASP,IAAGF,IAAG;AAElB,UAAI,CAAC,GAAGA,GAAE,EAAE;AAAG,cAAMA,GAAE,GAAG,GAAGE,GAAE,wDAAwD;AACvF,UAAI,CAACF,GAAE;AAAM,cAAMA,GAAE,GAAG,GAAGE,GAAE,wDAAwD;AACrF,YAAM,IAAIA,GAAE,kBAAkBF,EAAC;AAC/B,WAAKA,GAAE,gBAAgB,KAAK,CAAC;IACrC,EAKK,GAAG,CAAC,GAAG;AACR,MAAI,WAAW,KAAK,EAAE;AAItB,WAAO;AACP;;;IAGA,EAAE,QAAQ,EAAE,UAAU,KAAK,EAAE,IAAI,GAAG,aAAa;IAAO;AAOpD,QAAI,EAAE,SAAS,MAAM,MAAyC,EAAE;AAAI,YAAM,EAAE,GAAG,iCAAiC;AAChH,WAAO,SAASE,IAAGF,IAAG;AAClB,YAAM,IAAI,CAAA;AACV,UAAI,IAAI;AACR,iBAAW,KAAKE,IAAG;AACf,YAAIA,KAAI,GAAG,GAAGF,GAAE,GAAG,CAAC,CAAC;AACrB,gBAAQE;;SAGRA,KAAI;UACA,WAAW;QAC/B,IAAoB,EAAE,KAAKA,EAAC,GAAG;MAC/B;AACY,aAAO;QACH,YAAY;UACR,QAAQ;QAC5B;MACA;IACA,EAAU,GAAG,CAAC;EACd;AACI,SAAO,SAASA,IAAGF,IAAG;AAClB,QAAI,UAAUE,KAAIO,mBAAEP,EAAC;AAAI,aAAO;QAC5B,WAAW;MACvB;AACQ,QAAI,YAAY,OAAOA;AAAG,aAAO,GAAGF,GAAE,GAAGE,EAAC;AAC1C,QAAI,aAAa,OAAOA;AAAG,aAAO;QAC9B,cAAcA;MAC1B;AACQ,QAAI,YAAY,OAAOA;AAAG,aAAO;QAC7B,aAAaA;MACzB;AACQ,QAAIA,cAAa,MAAM;AACnB,YAAM,IAAI,GAAG,SAASA,EAAC;AACvB,aAAO;QACH,gBAAgB,GAAGF,GAAE,GAAG,CAAC;MACzC;IACA;AACQ,QAAIE,cAAa,IAAI;AAIjB,YAAM,IAAI,IAAI,GAAGA,GAAE,SAAS,MAAM,KAAK,MAAMA,GAAE,cAAc,GAAG,CAAC;AACjE,aAAO;QACH,gBAAgB,GAAGF,GAAE,GAAG,CAAC;MACzC;IACA;AACQ,QAAIE,cAAa;AAAI,aAAO;QACxB,eAAe;UACX,UAAUA,GAAE;UACZ,WAAWA,GAAE;QAC7B;MACA;AACQ,QAAIA,cAAa;AAAI,aAAO;QACxB,YAAY,GAAGF,GAAE,GAAGE,GAAE,WAAW;MAC7C;AACQ,QAAIA,cAAa,IAAI;AACjB,YAAM,IAAIF,GAAE,YAAY,IAAIE,GAAE,UAAU;AACxC,UAAI,CAAC,EAAE,QAAQ,CAAC;AAAG,cAAMF,GAAE,GAAG,sCAAsC,EAAE,aAAa,EAAE,uCAAuC,EAAE,aAAa,EAAE,UAAU;AACvJ,aAAO;QACH,gBAAgB,GAAGE,GAAE,UAAU,eAAeF,GAAE,YAAYE,GAAE,KAAK,IAAI;MACvF;IACA;AACQ,UAAMF,GAAE,GAAG,4BAA4B,GAAGE,EAAC,GAAG;EACtD,EAOK,GAAG,CAAC;AACT;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,QAAM,IAAI,CAAA;AACV,SAAO,CAAC,SAASA,IAAG;AAChB,eAAWF,MAAKE;AAAG,UAAI,OAAO,UAAU,eAAe,KAAKA,IAAGF,EAAC;AAAG,eAAO;AAC1E,WAAO;EACf,EAAM,CAAC,IAAI,GAAG,GAAI,CAACE,IAAG,MAAM;AACpB,UAAM,IAAI,GAAG,GAAG,EAAE,GAAGA,EAAC,CAAC;AACvB,YAAQ,MAAM,EAAEA,EAAC,IAAI;EAC7B,CAAK;;;IAGD,EAAE,QAAQ,EAAE,KAAK,SAAS,KAAK,EAAE,UAAU,KAAK,EAAE,IAAI;KAAG;IACrD,UAAU;MACN,QAAQ;IACpB;EACA;AACA;AAEA,SAAS,GAAG,GAAG;AACX,SAAO,EAAE,YAAY,OAAO,KAAK,SAAS,KAAK,aAAa,SAAS,aAAa,QAAQ,aAAa,MAAM,aAAa,MAAM,aAAa,MAAM,aAAa,MAAM,aAAa;AACvL;AAEA,SAAS,GAAG,GAAG,GAAG,GAAG;AACjB,MAAI,CAAC,GAAG,CAAC,KAAK,CAAC,SAASA,IAAG;AACvB,WAAO,YAAY,OAAOA,MAAK,SAASA,OAAM,OAAO,eAAeA,EAAC,MAAM,OAAO,aAAa,SAAS,OAAO,eAAeA,EAAC;EACvI,EAAM,CAAC,GAAG;AACF,UAAM,IAAI,GAAG,CAAC;AACd,UAAM,gBAAgB,IAAI,EAAE,GAAG,IAAI,kBAAkB,IAAI,EAAE,GAAG,IAAI,MAAM,CAAC;EACjF;AACA;AAII,SAAS,GAAG,GAAG,GAAG,GAAG;AACrB;;;KAGA,IAAIO,mBAAE,CAAC,cAAc;;AAAI,WAAO,EAAE;AAClC,MAAI,YAAY,OAAO;AAAG,WAAO,GAAG,GAAG,CAAC;AACxC,QAAM;IAAG;IAAmD;;IACxC;;IACR;IAAQ;EAAC;AACzB;AAII,IAAM,KAAK,IAAI,OAAO,eAAe;AAUrC,SAAS,GAAG,GAAG,GAAG,GAAG;AACrB,MAAI,EAAE,OAAO,EAAE,KAAK;AAAG,UAAM;MAAG,uBAAuB;MAAyD;;MAC5F;;MACR;MAAQ;IAAC;AACrB,MAAI;AACA,WAAO,IAAI,GAAG,GAAG,EAAE,MAAM,GAAG,CAAC,EAAE;EACvC,SAAa,GAAP;AACE,UAAM;MAAG,uBAAuB;MAA8E;;MAC1F;;MACR;MAAQ;IAAC;EAC7B;AACA;AAEA,SAAS,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG;AACvB,QAAM,IAAI,KAAK,CAAC,EAAE,QAAO,GAAI,IAAI,WAAW;AAC5C,MAAI,IAAI,YAAY;AACpB,QAAM,KAAK,2BAA2B,KAAK;AAC3C,MAAI,IAAI;AACR,UAAQ,KAAK,OAAO,KAAK,WAAW,MAAM,KAAK,aAAa,MAAM,MAAM,KAAK,gBAAgB,MAC7F,KAAK,MAAM,IAAI,EAAE,GAAG,IAAI,IAAI,CAAC;AACjC;AAEyE,SAAS,GAAG,GAAG,GAAG;AACvF,SAAO,EAAE,KAAM,CAAAP,OAAKA,GAAE,QAAQ,CAAC,CAAC;AACpC;AA0BI,IAAM,KAAN,MAAS;;;;;;EAMT,YAAY,GAAG,GAAG,GAAG,GAAG,GAAG;AACvB,SAAK,aAAa,GAAG,KAAK,kBAAkB,GAAG,KAAK,OAAO,GAAG,KAAK,YAAY,GAC/E,KAAK,aAAa;EAC1B;;EACkF,IAAI,KAAK;AACnF,WAAO,KAAK,KAAK,KAAK,YAAW;EACzC;;;;EAGW,IAAI,MAAM;AACb,WAAO,IAAI,GAAG,KAAK,YAAY,KAAK,YAAY,KAAK,IAAI;EACjE;;;;;;EAKW,SAAS;AACZ,WAAO,SAAS,KAAK;EAC7B;;;;;;;;EAOW,OAAO;AACV,QAAI,KAAK,WAAW;AAChB,UAAI,KAAK,YAAY;AAGjB,cAAM,IAAI,IAAI;UAAG,KAAK;UAAY,KAAK;UAAiB,KAAK;UAAM,KAAK;;UACvD;QAAI;AACrB,eAAO,KAAK,WAAW,cAAc,CAAC;MACtD;AACY,aAAO,KAAK,gBAAgB,aAAa,KAAK,UAAU,KAAK,KAAK;IAC9E;EACA;;;;;;;;;;;;EAYI,IAAI,GAAG;AACH,QAAI,KAAK,WAAW;AAChB,YAAM,IAAI,KAAK,UAAU,KAAK,MAAM,GAAG,wBAAwB,CAAC,CAAC;AACjE,UAAI,SAAS;AAAG,eAAO,KAAK,gBAAgB,aAAa,CAAC;IACtE;EACA;AACA;AAYI,IAAM,KAAN,cAAiB,GAAG;;;;;;;EAOpB,OAAO;AACH,WAAO,MAAM,KAAI;EACzB;AACA;AAQI,IAAM,KAAN,MAAS;;EAET,YAAY,GAAG,GAAG;AACd,SAAK,QAAQ,GAAG,KAAK,QAAQ;EACrC;;EACoE,IAAI,OAAO;AACvE,WAAO,CAAE,GAAG,KAAK,KAAK;EAC9B;;EAC8D,IAAI,OAAO;AACjE,WAAO,KAAK,KAAK;EACzB;;EACqE,IAAI,QAAQ;AACzE,WAAO,MAAM,KAAK,KAAK;EAC/B;;;;;;;;EAOW,QAAQ,GAAG,GAAG;AACjB,SAAK,MAAM,QAAQ,GAAG,CAAC;EAC/B;AACA;AAQI,SAAS,GAAG,GAAG,GAAG;AAClB,SAAO,IAAIO,mBAAE,CAAC,GAAG,IAAIA,mBAAE,CAAC,GAAG,aAAa,MAAM,aAAa,KAAK,EAAE,eAAe,EAAE,cAAc,EAAE,KAAK,QAAQ,EAAE,IAAI,MAAM,SAAS,EAAE,YAAY,SAAS,EAAE,YAAY,EAAE,UAAU,QAAQ,EAAE,SAAS,MAAM,EAAE,eAAe,EAAE,aAAa,aAAa,MAAM,aAAa,OAAO,GAAG,EAAE,OAAO,EAAE,KAAK,KAAK,GAAG,EAAE,MAAM,EAAE,MAAM,EAAE;AACvU;AAII,SAAS,GAAG,GAAG,GAAG;AAClB,SAAO,YAAY,OAAO,IAAI,GAAG,GAAG,CAAC,IAAI,aAAa,KAAK,EAAE,gBAAgB,EAAE,UAAU;AAC7F;AAsBA,IAAM,KAAN,MAAS;AAAA;AASL,IAAM,KAAN,cAAiB,GAAG;AAAA;AAExB,SAAS,GAAG,GAAG,MAAM,GAAG;AACpB,MAAI,IAAI,CAAA;AACR,eAAa,MAAM,EAAE,KAAK,CAAC,GAAG,IAAI,EAAE,OAAO,CAAC,GAAG,SAASP,IAAG;AACvD,UAAMF,KAAIE,GAAE,OAAQ,CAAAA,OAAKA,cAAa,EAAE,EAAG,QAAQC,KAAID,GAAE,OAAQ,CAAAA,OAAKA,cAAa,EAAE,EAAG;AACxF,QAAIF,KAAI,KAAKA,KAAI,KAAKG,KAAI;AAAG,YAAM,IAAI,EAAE,GAAG,8QAA8Q;EAClU,EAsBK,CAAC;AACF,aAAWH,MAAK;AAAG,QAAIA,GAAE,OAAO,CAAC;AACjC,SAAO;AACX;AAQI,IAAM,KAAN,cAAiB,GAAG;;;;EAIpB,YAAY,GAAG,GAAG,GAAG;AACjB,UAAK,GAAI,KAAK,SAAS,GAAG,KAAK,MAAM,GAAG,KAAK,SAAS;IAEtD,KAAK,OAAO;EACpB;EACI,OAAO,QAAQ,GAAG,GAAG,GAAG;AACpB,WAAO,IAAI,GAAG,GAAG,GAAG,CAAC;EAC7B;EACI,OAAO,GAAG;AACN,UAAM,IAAI,KAAK,OAAO,CAAC;AACvB,WAAO,GAAG,EAAE,QAAQ,CAAC,GAAG,IAAI,GAAG,EAAE,WAAW,EAAE,WAAW,GAAG,EAAE,QAAQ,CAAC,CAAC;EAChF;EACI,OAAO,GAAG;AACN,UAAM,IAAI,GAAG,EAAE,SAAS,GAAG,IAAI,SAASE,IAAGF,IAAGG,IAAG,GAAG,GAAG,GAAG,GAAG;AACzD,UAAI;AACJ,UAAI,EAAE,WAAU,GAAI;AAChB,YAAI,qBAAmD,KAAK,yBAA2D;AAAG,gBAAM,IAAI,EAAE,GAAG,qCAAqC,6BAA6B;AAC3M,YAAI,SAA2B,KAAK,aAAmC,GAAG;AACtE,aAAG,GAAG,CAAC;AACP,gBAAMH,KAAI,CAAA;AACV,qBAAWG,MAAK;AAAG,YAAAH,GAAE,KAAK,GAAG,GAAGE,IAAGC,EAAC,CAAC;AACrC,cAAI;YACA,YAAY;cACR,QAAQH;YACpC;UACA;QACA;AAAuB,cAAI,GAAG,GAAGE,IAAG,CAAC;MACrC;AAAmB,iBAA2B,KAAK,aAAmC,KAAK,yBAA2D,KAAK,GAAG,GAAG,CAAC,GACtJ,IAAI;UAAGC;UAAGH;UAAG;;UACM,SAA2B,KAAK,aAAmC;QAAC;AACvF,aAAO,GAAG,OAAO,GAAG,GAAG,CAAC;IACpC,EAAU,EAAE,QAAQ,SAAS,GAAG,EAAE,UAAU,aAAa,KAAK,QAAQ,KAAK,KAAK,KAAK,MAAM;AACnF,WAAO;EACf;AACA;AAYI,SAAS,GAAG,GAAG,GAAG,GAAG;AACrB,QAAM,IAAI,GAAG,IAAI,GAAG,SAAS,CAAC;AAC9B,SAAO,GAAG,QAAQ,GAAG,GAAG,CAAC;AAC7B;AASI,IAAM,KAAN,cAAiB,GAAG;;;;EAIpB,YAEA,GAAG,GAAG;AACF,UAAK,GAAI,KAAK,OAAO,GAAG,KAAK,oBAAoB;EACzD;EACI,OAAO,QAAQ,GAAG,GAAG;AACjB,WAAO,IAAI,GAAG,GAAG,CAAC;EAC1B;EACI,OAAO,GAAG;AACN,UAAM,IAAI,KAAK,kBAAkB,IAAK,CAAAA,OAAKA,GAAE,OAAO,CAAC,CAAC,EAAG,OAAQ,CAAAE,OAAKA,GAAE,WAAU,EAAG,SAAS,CAAC;AAC/F,WAAO,MAAM,EAAE,SAAS,EAAE,CAAC,IAAI,GAAG,OAAO,GAAG,KAAK,aAAY,CAAE;EACvE;EACI,OAAO,GAAG;AACN,UAAM,IAAI,KAAK,OAAO,CAAC;AACvB,WAAO,MAAM,EAAE,WAAU,EAAG,SAAS,KAAK,SAASA,IAAGF,IAAG;AACrD,UAAI,IAAIE;AACR,YAAM,IAAIF,GAAE,oBAAmB;AAC/B,iBAAWE,MAAK;AAAG,WAAG,GAAGA,EAAC,GAAG,IAAI,GAAG,GAAGA,EAAC;IACpD,EAGS,EAAE,QAAQ,CAAC,GAAG,IAAI,GAAG,EAAE,WAAW,EAAE,WAAW,GAAG,EAAE,QAAQ,CAAC,CAAC;EACvE;EACI,uBAAuB;AACnB,WAAO,KAAK;EACpB;EACI,eAAe;AACX,WAAO,UAAU,KAAK,OAAO,QAAoC;EACzE;AACA;AAWI,SAAS,MAAM,GAAG;AAElB,SAAO,EAAE,QAAS,CAAAA,OAAK,GAAG,MAAMA,EAAC,CAAC,GAAI,GAAG,QAAQ,MAAkC,CAAC;AACxF;AAWI,SAAS,MAAM,GAAG;AAElB,SAAO,EAAE,QAAS,CAAAA,OAAK,GAAG,OAAOA,EAAC,CAAC,GAAI,GAAG,QAAQ,OAAoC,CAAC;AAC3F;AAUI,IAAM,KAAN,cAAiB,GAAG;;;;EAIpB,YAAY,GAAG,GAAG;AACd,UAAK,GAAI,KAAK,SAAS,GAAG,KAAK,aAAa;IAE5C,KAAK,OAAO;EACpB;EACI,OAAO,QAAQ,GAAG,GAAG;AACjB,WAAO,IAAI,GAAG,GAAG,CAAC;EAC1B;EACI,OAAO,GAAG;AACN,UAAM,IAAI,SAASA,IAAGF,IAAG,GAAG;AACxB,UAAI,SAASE,GAAE;AAAS,cAAM,IAAI,EAAE,GAAG,sFAAsF;AAC7H,UAAI,SAASA,GAAE;AAAO,cAAM,IAAI,EAAE,GAAG,mFAAmF;AACxH,YAAM,IAAI,IAAI,GAAGF,IAAG,CAAC;AACrB,aAAO,SAASE,IAAGF,IAAG;AAClB,YAAI,SAAS,GAAGE,EAAC,GAAG;AAEhB,gBAAMC,KAAI,GAAGD,EAAC;AACd,mBAASC,MAAK,GAAGD,IAAGC,IAAGH,GAAE,KAAK;QAClD;MACA,EAAcE,IAAG,CAAC,GAAG;IACrB,EAWK,EAAE,QAAQ,KAAK,QAAQ,KAAK,UAAU;AACnC,WAAO,IAAI,GAAG,EAAE,WAAW,EAAE,WAAW,SAASA,IAAGF,IAAG;AAEnD,YAAM,IAAIE,GAAE,gBAAgB,OAAO,CAAEF,EAAC,CAAE;AACxC,aAAO,IAAI,GAAGE,GAAE,MAAMA,GAAE,iBAAiB,GAAGA,GAAE,QAAQ,MAAK,GAAIA,GAAE,OAAOA,GAAE,WAAWA,GAAE,SAASA,GAAE,KAAK;IACnH,EAAU,EAAE,QAAQ,CAAC,CAAC;EACtB;AACA;AAaI,SAAS,GAAG,GAAG,IAAI,OAAO;AAC1B,QAAM,IAAI,GAAG,IAAI,GAAG,WAAW,CAAC;AAChC,SAAO,GAAG,QAAQ,GAAG,CAAC;AAC1B;AAQI,IAAM,KAAN,cAAiB,GAAG;;;;EAIpB,YAEA,GAAG,GAAG,GAAG;AACL,UAAK,GAAI,KAAK,OAAO,GAAG,KAAK,SAAS,GAAG,KAAK,aAAa;EACnE;EACI,OAAO,QAAQ,GAAG,GAAG,GAAG;AACpB,WAAO,IAAI,GAAG,GAAG,GAAG,CAAC;EAC7B;EACI,OAAO,GAAG;AACN,WAAO,IAAI,GAAG,EAAE,WAAW,EAAE,WAAW,SAASA,IAAG,GAAG,GAAG;AACtD,aAAO,IAAI,GAAGA,GAAE,MAAMA,GAAE,iBAAiBA,GAAE,gBAAgB,MAAK,GAAIA,GAAE,QAAQ,MAAK,GAAI,GAAG,GAAGA,GAAE,SAASA,GAAE,KAAK;IAC3H,EAAU,EAAE,QAAQ,KAAK,QAAQ,KAAK,UAAU,CAAC;EACjD;AACA;AAQI,SAAS,GAAG,GAAG;AACf,SAAO,GAAG,SAAS,CAAC,GAAG,GAAG;IAAQ;IAAS;IAAG;;EAAG;AACrD;AAWI,SAAS,GAAG,GAAG;AACf,SAAO,GAAG,eAAe,CAAC,GAAG,GAAG;IAAQ;IAAe;IAAG;;EAAG;AACjE;AAQI,IAAM,KAAN,cAAiB,GAAG;;;;EAIpB,YAEA,GAAG,GAAG,GAAG;AACL,UAAK,GAAI,KAAK,OAAO,GAAG,KAAK,eAAe,GAAG,KAAK,aAAa;EACzE;EACI,OAAO,QAAQ,GAAG,GAAG,GAAG;AACpB,WAAO,IAAI,GAAG,GAAG,GAAG,CAAC;EAC7B;EACI,OAAO,GAAG;AACN,UAAM,IAAI,GAAG,GAAG,KAAK,MAAM,KAAK,cAAc,KAAK,UAAU;AAC7D,WAAO,IAAI,GAAG,EAAE,WAAW,EAAE,WAAW,SAASA,IAAGF,IAAG;AACnD,aAAO,IAAI,GAAGE,GAAE,MAAMA,GAAE,iBAAiBA,GAAE,gBAAgB,MAAK,GAAIA,GAAE,QAAQ,MAAK,GAAIA,GAAE,OAAOA,GAAE,WAAWF,IAAGE,GAAE,KAAK;IACnI,EAAU,EAAE,QAAQ,CAAC,CAAC;EACtB;AACA;AAEA,SAAS,MAAM,GAAG;AACd,SAAO,GAAG;IAAQ;IAAW;;IACd;EAAE;AACrB;AAEA,SAAS,MAAM,GAAG;AACd,SAAO,GAAG;IAAQ;IAAc;;IACjB;EAAE;AACrB;AAQI,IAAM,KAAN,cAAiB,GAAG;;;;EAIpB,YAEA,GAAG,GAAG,GAAG;AACL,UAAK,GAAI,KAAK,OAAO,GAAG,KAAK,eAAe,GAAG,KAAK,aAAa;EACzE;EACI,OAAO,QAAQ,GAAG,GAAG,GAAG;AACpB,WAAO,IAAI,GAAG,GAAG,GAAG,CAAC;EAC7B;EACI,OAAO,GAAG;AACN,UAAM,IAAI,GAAG,GAAG,KAAK,MAAM,KAAK,cAAc,KAAK,UAAU;AAC7D,WAAO,IAAI,GAAG,EAAE,WAAW,EAAE,WAAW,SAASA,IAAGF,IAAG;AACnD,aAAO,IAAI,GAAGE,GAAE,MAAMA,GAAE,iBAAiBA,GAAE,gBAAgB,MAAK,GAAIA,GAAE,QAAQ,MAAK,GAAIA,GAAE,OAAOA,GAAE,WAAWA,GAAE,SAASF,EAAC;IACrI,EAAU,EAAE,QAAQ,CAAC,CAAC;EACtB;AACA;AAEA,SAAS,MAAM,GAAG;AACd,SAAO,GAAG;IAAQ;IAAa;;IAChB;EAAE;AACrB;AAEA,SAAS,MAAM,GAAG;AACd,SAAO,GAAG;IAAQ;IAAS;;IACZ;EAAE;AACrB;AAEmE,SAAS,GAAG,GAAG,GAAG,GAAG,GAAG;AACvF,MAAI,EAAE,CAAC,IAAIS,mBAAE,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC,aAAa;AAAI,WAAO,SAASP,IAAGF,IAAGG,IAAGC,IAAG,GAAG;AACnE,UAAI,CAACA;AAAG,cAAM,IAAI,EAAE,GAAG,uDAAuDD,OAAM;AACpF,YAAM,IAAI,CAAA;AAQF,iBAAWA,MAAK,GAAGD,EAAC;AAAG,YAAIC,GAAE,MAAM,WAAU;AAAI,YAAE,KAAK,GAAGH,IAAGI,GAAE,GAAG,CAAC;aAAQ;AAChF,gBAAMF,KAAIE,GAAE,KAAK,MAAMD,GAAE,KAAK;AAC9B,cAAI,GAAGD,EAAC;AAAG,kBAAM,IAAI,EAAE,GAAG,iGAAiGC,GAAE,QAAQ,yHAAyH;AAC9P,cAAI,SAASD,IAAG;AACZ,kBAAMA,KAAIC,GAAE,MAAM,gBAAe;AACjC,kBAAM,IAAI,EAAE,GAAG,+FAA+FD,2CAA0C;UACxK;AACY,YAAE,KAAKA,EAAC;QACpB;AACQ,aAAO,IAAI,GAAG,GAAG,CAAC;IAC1B,EAGK,EAAE,QAAQ,EAAE,UAAU,aAAa,GAAG,EAAE,CAAC,EAAE,WAAW,CAAC;AACxD;AACI,UAAM,IAAI,GAAG,EAAE,SAAS;AACxB,WAAO,SAASA,IAAGF,IAAGG,IAAGC,IAAGC,IAAG,GAAG;AAE9B,YAAM,IAAIH,GAAE;AACZ,UAAIG,GAAE,SAAS,EAAE;AAAQ,cAAM,IAAI,EAAE,GAAG,kCAAkCD,6FAA4F;AACtK,YAAM,IAAI,CAAA;AACV,eAASI,KAAI,GAAGA,KAAIH,GAAE,QAAQG,MAAK;AAC/B,cAAM,IAAIH,GAAEG,EAAC;AACb,YAAI,EAAEA,EAAC,EAAE,MAAM,WAAU,GAAI;AACzB,cAAI,YAAY,OAAO;AAAG,kBAAM,IAAI,EAAE,GAAG,uDAAuDJ,mBAAkB,OAAO,GAAG;AAC5H,cAAI,CAAC,GAAGF,EAAC,KAAK,OAAO,EAAE,QAAQ,GAAG;AAAG,kBAAM,IAAI,EAAE,GAAG,+FAA+FE,0CAAyC,sBAAsB;AAClN,gBAAMD,KAAID,GAAE,KAAK,MAAM,GAAG,WAAW,CAAC,CAAC;AACvC,cAAI,CAAC,GAAG,cAAcC,EAAC;AAAG,kBAAM,IAAI,EAAE,GAAG,qGAAqGC,mDAAkDD,2DAA0D;AAC1P,gBAAME,KAAI,IAAI,GAAGF,EAAC;AAClB,YAAE,KAAK,GAAGH,IAAGK,EAAC,CAAC;QACnC,OAAuB;AACH,gBAAMH,KAAI,GAAGC,IAAGC,IAAG,CAAC;AACpB,YAAE,KAAKF,EAAC;QAC5B;MACA;AACY,aAAO,IAAI,GAAG,GAAG,CAAC;IAC9B,EAKK,EAAE,QAAQ,EAAE,UAAU,aAAa,GAAG,GAAG,GAAG,CAAC;EAClD;AACA;AAEA,SAAS,GAAG,GAAG,GAAG,GAAG;AACjB,MAAI,YAAY,QAAQ,IAAIO,mBAAE,CAAC,IAAI;AAC/B,QAAI,OAAO;AAAG,YAAM,IAAI,EAAE,GAAG,mHAAmH;AAChJ,QAAI,CAAC,GAAG,CAAC,KAAK,OAAO,EAAE,QAAQ,GAAG;AAAG,YAAM,IAAI,EAAE,GAAG,yGAAyG,8BAA8B;AAC3L,UAAM,IAAI,EAAE,KAAK,MAAM,GAAG,WAAW,CAAC,CAAC;AACvC,QAAI,CAAC,GAAG,cAAc,CAAC;AAAG,YAAM,IAAI,EAAE,GAAG,kIAAkI,uDAAuD,EAAE,UAAU;AAC9O,WAAO,GAAG,GAAG,IAAI,GAAG,CAAC,CAAC;EAC9B;AACI,MAAI,aAAa;AAAI,WAAO,GAAG,GAAG,EAAE,IAAI;AACxC,QAAM,IAAI,EAAE,GAAG,uHAAuH,GAAG,CAAC,IAAI;AAClJ;AAKI,SAAS,GAAG,GAAG,GAAG;AAClB,MAAI,CAAC,MAAM,QAAQ,CAAC,KAAK,MAAM,EAAE;AAAQ,UAAM,IAAI,EAAE,GAAG,qDAAqD,EAAE,SAAQ,aAAc;AACzI;AAWI,SAAS,GAAG,GAAG,GAAG;AAClB,MAAI,EAAE,aAAY,GAAI;AAClB,UAAMN,KAAI,GAAG,CAAC,GAAG,IAAI,EAAE;AACvB,QAAI,SAASA,MAAK,CAACA,GAAE,QAAQ,CAAC;AAAG,YAAM,IAAI,EAAE,GAAG,oJAAoJA,GAAE,SAAQ,WAAY,EAAE,SAAQ,IAAK;AACzO,UAAM,IAAI,GAAG,CAAC;AACd,aAAS,KAAK,GAAG,GAAG,GAAG,CAAC;EAChC;AACI,QAAM,IAAI,SAASD,IAAGF,IAAG;AACrB,eAAWG,MAAKD;AAAG,iBAAWA,MAAKC,GAAE,oBAAmB;AAAI,YAAIH,GAAE,QAAQE,GAAE,EAAE,KAAK;AAAG,iBAAOA,GAAE;AAC/F,WAAO;EACf,EAAM,EAAE,SAAS,SAASA,IAAG;AACrB,YAAQA,IAAC;MACP,KAAK;AACH,eAAO;UAAE;UAAgC;;QAAQ;MAEnD,KAAK;MACL,KAAK;AACH,eAAO;UAAE;;QAAQ;MAEnB,KAAK;AACH,eAAO;UAAE;UAAyD;UAAyB;UAAiC;;QAAI;MAElI;AACE,eAAO,CAAA;IACnB;EACA,EAAM,EAAE,EAAE,CAAC;AACP,MAAI,SAAS;AAEb,UAAM,MAAM,EAAE,KAAK,IAAI,EAAE,GAAG,gDAAgD,EAAE,GAAG,SAAQ,YAAa,IAAI,IAAI,EAAE,GAAG,kCAAkC,EAAE,GAAG,SAAQ,oBAAqB,EAAE,SAAQ,aAAc;AACnN;AAEA,SAAS,GAAG,GAAG,GAAG,GAAG;AACjB,MAAI,CAAC,EAAE,QAAQ,CAAC;AAAG,UAAM,IAAI,EAAE,GAAG,qGAAqG,EAAE,SAAQ,gCAAiC,EAAE,SAAQ,iFAAkF,EAAE,SAAQ,aAAc;AAC1S;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,MAAI,EAAE,aAAa,MAAM,aAAa;AAAK,UAAM,IAAI,EAAE,GAAG,YAAY,kGAAkG;AAC5K;AA2BA,SAAS,GAAG,GAAG,GAAG,GAAG;AACjB,MAAI;AAIJ,SAAO,IAAI,IAAI,MAAM,EAAE,SAAS,EAAE,eAAe,EAAE,YAAY,GAAG,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,GAC1F;AACJ;AAEA,IAAM,KAAN,cAAiB,MAAM;EACnB,aAAa,GAAG,IAAI,QAAQ;AACxB,YAAQ,GAAG,CAAC,GAAC;MACX,KAAK;AACH,eAAO;MAET,KAAK;AACH,eAAO,EAAE;MAEX,KAAK;AACH,eAAO,GAAG,EAAE,gBAAgB,EAAE,WAAW;MAE3C,KAAK;AACH,eAAO,KAAK,iBAAiB,EAAE,cAAc;MAE/C,KAAK;AACH,eAAO,KAAK,uBAAuB,GAAG,CAAC;MAEzC,KAAK;AACH,eAAO,EAAE;MAEX,KAAK;AACH,eAAO,KAAK,aAAa,GAAG,EAAE,UAAU,CAAC;MAE3C,KAAK;AACH,eAAO,KAAK,iBAAiB,EAAE,cAAc;MAE/C,KAAK;AACH,eAAO,KAAK,gBAAgB,EAAE,aAAa;MAE7C,KAAK;AACH,eAAO,KAAK,aAAa,EAAE,YAAY,CAAC;MAE1C,KAAK;AACH,eAAO,KAAK,cAAc,EAAE,UAAU,CAAC;MAEzC;AACE,cAAM,EAAC;IACnB;EACA;EACI,cAAc,GAAG,GAAG;AAChB,UAAM,IAAI,CAAA;AACV,WAAO,GAAG,EAAE,QAAS,CAACA,IAAG,MAAM;AAC3B,QAAEA,EAAC,IAAI,KAAK,aAAa,GAAG,CAAC;IACzC,CAAS,GAAI;EACb;EACI,gBAAgB,GAAG;AACf,WAAO,IAAI,GAAG,GAAG,EAAE,QAAQ,GAAG,GAAG,EAAE,SAAS,CAAC;EACrD;EACI,aAAa,GAAG,GAAG;AACf,YAAQ,EAAE,UAAU,CAAA,GAAI,IAAK,CAAAA,OAAK,KAAK,aAAaA,IAAG,CAAC,CAAC;EACjE;EACI,uBAAuB,GAAG,GAAG;AACzB,YAAQ,GAAC;MACP,KAAK;AACH,cAAM,IAAI,GAAG,CAAC;AACd,eAAO,QAAQ,IAAI,OAAO,KAAK,aAAa,GAAG,CAAC;MAElD,KAAK;AACH,eAAO,KAAK,iBAAiB,GAAG,CAAC,CAAC;MAEpC;AACE,eAAO;IACnB;EACA;EACI,iBAAiB,GAAG;AAChB,UAAM,IAAI,GAAG,CAAC;AACd,WAAO,IAAI,GAAG,EAAE,SAAS,EAAE,KAAK;EACxC;EACI,mBAAmB,GAAG,GAAG;AACrB,UAAM,IAAI,GAAG,WAAW,CAAC;AACzB,MAAE,GAAG,CAAC,CAAC;AACP,UAAM,IAAI,IAAI,EAAE,EAAE,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC,GAAG,IAAI,IAAI,GAAG,EAAE,SAAS,CAAC,CAAC;AAC7D,WAAO,EAAE,QAAQ,CAAC;IAElB,EAAE,YAAY,gEAAgE,EAAE,aAAa,EAAE,gGAAgG,EAAE,aAAa,EAAE,oBAAoB,GACpO;EACR;AACA,EAAE;EACE,YAAY,GAAG;AACX,UAAK,GAAI,KAAK,YAAY;EAClC;EACI,aAAa,GAAG;AACZ,WAAO,IAAI,GAAG,CAAC;EACvB;EACI,iBAAiB,GAAG;AAChB,UAAM,IAAI,KAAK,mBAAmB,GAAG,KAAK,UAAU,WAAW;AAC/D,WAAO,IAAI;MAAG,KAAK;;MAA4B;MAAM;IAAC;EAC9D;AACA;AAcI,SAAS,GAAG,GAAG;AACf,QAAM,IAAI,IAAI,IAAI,GAAG,GAAG,EAAE,GAAG,SAAS,GAAG,IAAI,IAAI,GAAG,EAAE,SAAS;AAC/D,SAAO,GAAG,GAAG,CAAE,EAAE,IAAI,CAAE,EAAE,KAAM,CAAAF,OAAK;AAChC,MAAE,MAAMA,GAAE,MAAM;AAChB,UAAM,IAAIA,GAAE,CAAC;AACb,WAAO,IAAI,GAAG,EAAE,WAAW,GAAG,EAAE,MAAM,EAAE,gBAAe,IAAK,IAAI,MAAM,EAAE,SAAS;EACzF,CAAK;AACL;AAaI,SAAS,GAAG,GAAG;AACf,GAAC,SAASE,IAAG;AACT,QAAI,QAA6BA,GAAE,aAAa,MAAMA,GAAE,gBAAgB;AAAQ,YAAM,IAAI,EAAE,GAAG,wEAAwE;EAC/K,GAAO,IAAI,GAAG,GAAG,EAAE,GAAG,MAAM;AACxB,QAAM,IAAI,GAAG,EAAE,SAAS,GAAG,IAAI,IAAI,GAAG,EAAE,SAAS;AACjD,SAAO,GAAG,GAAG,EAAE,MAAM,EAAE,KAAM,CAAAF,OAAK;AAC9B,UAAM,IAAIA,GAAE,IAAK,CAAAA,OAAK,IAAI,GAAG,EAAE,WAAW,GAAGA,GAAE,KAAKA,IAAG,EAAE,SAAS,CAAC;AACnE,WAAO,QAA6B,EAAE,OAAO;;;IAI7C,EAAE,QAAO,GAAI,IAAI,GAAG,GAAG,CAAC;EAChC,CAAK;AACL;AAEA,SAAS,GAAG,GAAG,GAAG,GAAG;AACjB,QAAM,IAAI,IAAI,IAAI,GAAG,GAAG,EAAE,GAAG,WAAW,GAAG,CAAC,GAAG,IAAI,GAAG,GAAG,EAAE,SAAS,GAAG,UAAU,EAAE,MAAM,GAAG,SAAS,EAAE,WAAW,CAAC;AACnH,SAAO,GAAG,GAAG,EAAE,SAAS,GAAG,CAAE,EAAE,WAAW,EAAE,MAAM,GAAG,KAAI,CAAE,CAAC,CAAE;AAClE;AAEA,SAAS,GAAG,GAAG,GAAG,MAAM,GAAG;AACvB,QAAM,IAAI,IAAI,IAAI,GAAG,GAAG,EAAE,GAAG,SAAS;AAGlC,MAAI;AACR,MAAI,YAAY,QAAQ,IAAIS,mBAAE,CAAC,MAAM,aAAa,KAAK,GAAG,GAAG,aAAa,EAAE,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,GAAG,aAAa,EAAE,MAAM,CAAC;AACzH,SAAO,GAAG,GAAG,EAAE,SAAS,GAAG,CAAE,EAAE,WAAW,EAAE,MAAM,GAAG,OAAO,IAAE,CAAC,CAAC,CAAE;AACtE;AAaI,SAAS,GAAG,GAAG;AACf,SAAO,GAAG,IAAI,IAAI,GAAG,GAAG,EAAE,GAAG,SAAS,GAAG,CAAE,IAAI,GAAG,EAAE,MAAM,GAAG,KAAI,CAAE,CAAC,CAAE;AAC1E;AAgBI,SAAS,GAAG,GAAG,GAAG;AAClB,QAAM,IAAI,GAAG,IAAI,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,GAAG,EAAE,WAAW,CAAC,GAAG,IAAI,GAAG,GAAG,EAAE,SAAS,GAAG,UAAU,EAAE,MAAM,GAAG,SAAS,EAAE,WAAW,CAAA,CAAE;AAC1H,SAAO,GAAG,GAAG,EAAE,SAAS,GAAG,CAAE,EAAE,WAAW,EAAE,MAAM,GAAG,OAAO,KAAE,CAAC,CAAC,CAAE,EAAE,KAAM,MAAM,CAAC;AACrF;AA+BI,SAAS,GAAG,GAAG;AACf,SAAO,GAAG,GAAG;IACT,OAAO,GAAE;EACjB,CAAK;AACL;AA4BI,SAAS,GAAG,GAAG,GAAG;AAClB,QAAM,IAAI,GAAG,EAAE,WAAW,EAAE,GAAG,IAAI,GAAG,CAAC,GAAG,IAAI,SAASP,IAAGF,IAAG;AACzD,UAAMG,KAAI,CAAA;AACV,eAAWC,MAAKF;AAAG,aAAO,UAAU,eAAe,KAAKA,IAAGE,EAAC,KAAKD,GAAE,KAAKH,GAAEE,GAAEE,EAAC,GAAGA,IAAGF,EAAC,CAAC;AACrF,WAAOC;EACf,EAAM,GAAI,CAACD,IAAGF,OAAM,IAAI,GAAG,IAAI,GAAGA,EAAC,GAAGE,GAAE,gBAAgBA,GAAE,kBAAkB,CAAC;AAEzE,SAAO,GAAG,GAAG,EAAE,QAAQ,CAAC,EAAE,KAAM,CAAAF,OAAK,SAASE,IAAGF,IAAGG,IAAG;AACnD,UAAMC,KAAI,IAAI,GAAGF,EAAC;AAClB,WAAO,IAAI,GAAGF,IAAGI,IAAGD,EAAC;EAC7B,EAMK,GAAG,GAAGH,EAAC,CAAC;AACb;AAEA,SAAS,GAAG,GAAG;AACX,SAAO,IAAI,GAAG,OAAO,GAAG,OAAO,CAAC,CAAC;AACrC;AAOI,SAAS,GAAG,GAAG;AACf,SAAO,IAAI,GAAG,OAAO,GAAG,WAAW,CAAC,CAAC;AACzC;AAMI,SAAS,KAAK;AACd,SAAO,IAAI,GAAG,OAAO;AACzB;AAQI,SAAS,GAAG,GAAG,GAAG;AAClB,MAAI,GAAG;AACP,SAAO,aAAa,MAAM,aAAa,MAAM,EAAE,mBAAmB,EAAE,mBAAmB,UAAU,IAAI,EAAE,uBAAuB,WAAW,IAAI,SAAS,EAAE,gBAAe,QAAS,UAAU,IAAI,EAAE,uBAAuB,WAAW,IAAI,SAAS,EAAE,gBAAe;AACpQ;AAaI,SAAS,GAAG,GAAG,GAAG;AAClB,SAAO,GAAG,EAAE,OAAO,EAAE,KAAK,KAAKU,UAAE,EAAE,KAAI,GAAI,EAAE,KAAI,CAAE;AACvD;AAqBI,SAAS,KAAK;AACd,SAAO,IAAI,GAAG,aAAa;AAC/B;AAKI,SAAS,KAAK;AACd,SAAO,IAAI,GAAG,iBAAiB;AACnC;AAaI,SAAS,MAAM,GAAG;AAGlB,SAAO,IAAI,GAAG,cAAc,CAAC;AACjC;AAYI,SAAS,MAAM,GAAG;AAGlB,SAAO,IAAI,GAAG,eAAe,CAAC;AAClC;AAoBI,SAAS,GAAG,GAAG;AACf,SAAO,IAAI,GAAG,aAAa,CAAC;AAChC;AAyBI,IAAM,KAAN,MAAS;;EAET,YAAY,GAAG,GAAG;AACd,SAAK,aAAa,GAAG,KAAK,iBAAiB,GAAG,KAAK,aAAa,CAAA,GAAI,KAAK,aAAa,OACtF,KAAK,cAAc,GAAG,CAAC;EAC/B;EACI,IAAI,GAAG,GAAG,GAAG;AACT,SAAK,oBAAmB;AACxB,UAAM,IAAI,GAAG,GAAG,KAAK,UAAU,GAAG,IAAI,GAAG,EAAE,WAAW,GAAG,CAAC,GAAG,IAAI,GAAG,KAAK,aAAa,kBAAkB,EAAE,MAAM,GAAG,SAAS,EAAE,WAAW,CAAC;AAC1I,WAAO,KAAK,WAAW,KAAK,EAAE,WAAW,EAAE,MAAM,GAAG,KAAI,CAAE,CAAC,GAAG;EACtE;EACI,OAAO,GAAG,GAAG,MAAM,GAAG;AAClB,SAAK,oBAAmB;AACxB,UAAM,IAAI,GAAG,GAAG,KAAK,UAAU;AAGvB,QAAI;AACZ,WAAO,IAAI,YAAY,QAAQ,IAAID,mBAAE,CAAC,MAAM,aAAa,KAAK,GAAG,KAAK,aAAa,qBAAqB,EAAE,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,KAAK,aAAa,qBAAqB,EAAE,MAAM,CAAC,GAC9K,KAAK,WAAW,KAAK,EAAE,WAAW,EAAE,MAAM,GAAG,OAAO,IAAE,CAAC,CAAC,GAAG;EACnE;;;;;;;EAMW,OAAO,GAAG;AACb,SAAK,oBAAmB;AACxB,UAAM,IAAI,GAAG,GAAG,KAAK,UAAU;AAC/B,WAAO,KAAK,aAAa,KAAK,WAAW,OAAO,IAAI,GAAG,EAAE,MAAM,GAAG,KAAI,CAAE,CAAC,GAAG;EACpF;;;;;;;;;;;;;EAYW,SAAS;AACZ,WAAO,KAAK,oBAAmB,GAAI,KAAK,aAAa,MAAI,KAAK,WAAW,SAAS,IAAI,KAAK,eAAe,KAAK,UAAU,IAAI,QAAQ,QAAO;EACpJ;EACI,sBAAsB;AAClB,QAAI,KAAK;AAAY,YAAM,IAAI,EAAE,GAAG,qEAAqE;EACjH;AACA;AAEA,SAAS,GAAG,GAAG,GAAG;AACd,OAAK,IAAIA,mBAAE,CAAC,GAAG,cAAc;AAAG,UAAM,IAAI,EAAE,GAAG,qEAAqE;AACpH,SAAO;AACX;AAcI,SAAS,GAAG,GAAG;AACf,QAAM,IAAI,GAAG,IAAI,GAAG,GAAG,EAAE,CAAC;AAC1B,SAAO,IAAI,GAAG,GAAI,CAAAP,OAAK,GAAG,GAAGA,EAAC,CAAC;AACnC;AAqBI,IAAM,KAAN,MAAS;EACT,YAAY,GAAG;AACX,SAAK,YAAY;IAEjB,KAAK,eAAe,oBAAI,OAAK,KAAK,YAAY,CAAA,GAAI,KAAK,YAAY;;;;IAKnE,KAAK,iBAAiB;;;;;;IAOtB,KAAK,cAAc,oBAAI;EAC/B;EACI,MAAM,OAAO,GAAG;AACZ,QAAI,KAAK,sBAAqB,GAAI,KAAK,UAAU,SAAS;AAAG,YAAM,IAAI,EAAE,GAAG,4EAA4E;AACxJ,UAAM,IAAI,MAAM,GAAG,KAAK,WAAW,CAAC;AACpC,WAAO,EAAE,QAAS,CAAAA,OAAK,KAAK,cAAcA,EAAC,CAAC,GAAI;EACxD;EACI,IAAI,GAAG,GAAG;AACN,SAAK,MAAM,EAAE,WAAW,GAAG,KAAK,aAAa,CAAC,CAAC,CAAC,GAAG,KAAK,YAAY,IAAI,EAAE,SAAQ,CAAE;EAC5F;EACI,OAAO,GAAG,GAAG;AACT,QAAI;AACA,WAAK,MAAM,EAAE,WAAW,GAAG,KAAK,sBAAsB,CAAC,CAAC,CAAC;IACrE,SAAiBA,IAAP;AACE,WAAK,iBAAiBA;IAClC;AACQ,SAAK,YAAY,IAAI,EAAE,SAAQ,CAAE;EACzC;EACI,OAAO,GAAG;AACN,SAAK,MAAM,IAAI,GAAG,GAAG,KAAK,aAAa,CAAC,CAAC,CAAC,GAAG,KAAK,YAAY,IAAI,EAAE,SAAQ,CAAE;EACtF;EACI,MAAM,SAAS;AACX,QAAI,KAAK,sBAAqB,GAAI,KAAK;AAAgB,YAAM,KAAK;AAClE,UAAM,IAAI,KAAK;AAEP,SAAK,UAAU,QAAS,OAAK;AACjC,QAAE,OAAO,EAAE,IAAI,SAAQ,CAAE;IACrC,CAAS;;IAGD,EAAE,QAAS,CAACA,IAAG,MAAM;AACjB,YAAM,IAAI,GAAG,SAAS,CAAC;AACvB,WAAK,UAAU,KAAK,IAAI,GAAG,GAAG,KAAK,aAAa,CAAC,CAAC,CAAC;IAC/D,CAAS,GAAI,MAAM,GAAG,KAAK,WAAW,KAAK,SAAS,GAAG,KAAK,YAAY;EACxE;EACI,cAAc,GAAG;AACb,QAAI;AACJ,QAAI,EAAE,gBAAe;AAAI,UAAI,EAAE;SAAc;AACzC,UAAI,CAAC,EAAE,aAAY;AAAI,cAAM,EAAC;AAE9B,UAAI,GAAG,IAAG;IACtB;AACQ,UAAM,IAAI,KAAK,aAAa,IAAI,EAAE,IAAI,SAAQ,CAAE;AAChD,QAAI,GAAG;AACH,UAAI,CAAC,EAAE,QAAQ,CAAC;AAEhB,cAAM,IAAI,EAAE,GAAG,6CAA6C;IACxE;AAAe,WAAK,aAAa,IAAI,EAAE,IAAI,SAAQ,GAAI,CAAC;EACxD;;;;;EAIW,aAAa,GAAG;AACnB,UAAM,IAAI,KAAK,aAAa,IAAI,EAAE,SAAQ,CAAE;AAC5C,WAAO,CAAC,KAAK,YAAY,IAAI,EAAE,SAAQ,CAAE,KAAK,IAAI,EAAE,QAAQ,GAAG,IAAG,CAAE,IAAI,GAAG,OAAO,KAAE,IAAI,GAAG,WAAW,CAAC,IAAI,GAAG,KAAI;EAC1H;;;;EAGW,sBAAsB,GAAG;AAC5B,UAAM,IAAI,KAAK,aAAa,IAAI,EAAE,SAAQ,CAAE;AAGpC,QAAI,CAAC,KAAK,YAAY,IAAI,EAAE,SAAQ,CAAE,KAAK,GAAG;AAClD,UAAI,EAAE,QAAQ,GAAG,IAAG,CAAE;AAUtB,cAAM,IAAI,EAAE,GAAG,6CAA6C;AAEhD,aAAO,GAAG,WAAW,CAAC;IAC9C;AAGQ,WAAO,GAAG,OAAO,IAAE;EAC3B;EACI,MAAM,GAAG;AACL,SAAK,sBAAqB,GAAI,KAAK,UAAU,KAAK,CAAC;EAC3D;EACI,wBAAwB;EAAA;AAC5B;AAiBI,IAAM,KAAK;EACX,aAAa;AACjB;AAsBA,IAAM,KAAN,MAAS;EACL,YAAY,GAAG,GAAG,GAAG,GAAG,GAAG;AACvB,SAAK,aAAa,GAAG,KAAK,YAAY,GAAG,KAAK,UAAU,GAAG,KAAK,iBAAiB,GACjF,KAAK,WAAW,GAAG,KAAK,KAAK,EAAE,aAAa,KAAK,KAAK,IAAI;MAAG,KAAK;MAAY;;IAAmB;EACzG;;EACoE,MAAM;AAClE,SAAK,MAAM,GAAG,KAAK,GAAE;EAC7B;EACI,KAAK;AACD,SAAK,GAAG,EAAG,YAAY;AACnB,YAAM,IAAI,IAAI,GAAG,KAAK,SAAS,GAAG,IAAI,KAAK,GAAG,CAAC;AAC/C,WAAK,EAAE,KAAM,CAAAF,OAAK;AACd,aAAK,WAAW,iBAAkB,MAAM,EAAE,OAAM,EAAG,KAAM,MAAM;AAC3D,eAAK,SAAS,QAAQA,EAAC;QAC3C,CAAiB,EAAG,MAAO,CAAAE,OAAK;AACZ,eAAK,GAAGA,EAAC;QAC7B,CAAiB,CAAE;MACnB,CAAa,EAAG,MAAO,CAAAA,OAAK;AACZ,aAAK,GAAGA,EAAC;MACzB,CAAa;IACb,CAAS;EACT;EACI,GAAG,GAAG;AACF,QAAI;AACA,YAAM,IAAI,KAAK,eAAe,CAAC;AAC/B,aAAO,CAAC,GAAG,CAAC,KAAK,EAAE,SAAS,EAAE,OAAO,KAAK,KAAK,SAAS,OAAO,MAAM,4CAA4C,CAAC,GAClH;IACZ,SAAiBA,IAAP;AAEE,aAAO,KAAK,SAAS,OAAOA,EAAC,GAAG;IAC5C;EACA;EACI,GAAG,GAAG;AACF,SAAK,KAAK,KAAK,KAAK,GAAG,CAAC,KAAK,KAAK,MAAM,GAAG,KAAK,WAAW,iBAAkB,OAAO,KAAK,GAAE,GAC3F,QAAQ,QAAO,EAAG,KAAM,KAAK,SAAS,OAAO,CAAC;EACtD;EACI,GAAG,GAAG;AACF,QAAI,oBAAoB,EAAE,MAAM;AAG5B,YAAM,IAAI,EAAE;AACZ,aAAO,cAAc,KAAK,0BAA0B,KAAK,qBAAqB,KAAK;;;;;;MAOnF,SAASA,IAAG;AACR,gBAAQA,IAAC;UACP;AACE,mBAAO,EAAC;UAEV,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UAGe,KAAK;AACvB,mBAAO;UAET,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UACL,KAAK;UAIe,KAAK;UACzB,KAAK;UACL,KAAK;UACL,KAAK;AACH,mBAAO;QAC3B;MACA,EAAc,CAAC;IACf;AACQ,WAAO;EACf;AACA;AAkB0E,SAAS,KAAK;AAGpF,SAAO,eAAe,OAAO,WAAW,WAAW;AACvD;AA4BI,IAAM,KAAN,MAAS;EACT,YAAY,GAAG,GAAG,GAAG,GAAG,GAAG;AACvB,SAAK,aAAa,GAAG,KAAK,UAAU,GAAG,KAAK,eAAe,GAAG,KAAK,KAAK,GAAG,KAAK,kBAAkB,GAClG,KAAK,WAAW,IAAI,KAAG,KAAK,OAAO,KAAK,SAAS,QAAQ,KAAK,KAAK,KAAK,SAAS,OAAO;;;IAIxF,KAAK,SAAS,QAAQ,MAAO,CAAAA,OAAK;IAAA,CAAE;EAC5C;;;;;;;;;;;;;;;EAcW,OAAO,kBAAkB,GAAG,GAAG,GAAG,GAAG,GAAG;AAC3C,UAAM,IAAI,KAAK,IAAG,IAAK,GAAG,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC;AAClD,WAAO,EAAE,MAAM,CAAC,GAAG;EAC3B;;;;;EAIW,MAAM,GAAG;AACZ,SAAK,cAAc,WAAY,MAAM,KAAK,mBAAkB,GAAK,CAAC;EAC1E;;;;;EAIW,YAAY;AACf,WAAO,KAAK,mBAAkB;EACtC;;;;;;;;EAOW,OAAO,GAAG;AACb,aAAS,KAAK,gBAAgB,KAAK,aAAY,GAAI,KAAK,SAAS,OAAO,IAAI,EAAE,GAAG,yBAAyB,IAAI,OAAO,IAAI,GAAG,CAAC;EACrI;EACI,qBAAqB;AACjB,SAAK,WAAW,iBAAkB,MAAM,SAAS,KAAK,eAAe,KAAK,aAAY,GACtF,KAAK,GAAE,EAAG,KAAM,OAAK,KAAK,SAAS,QAAQ,CAAC,CAAC,KAAM,QAAQ,QAAO,CAAE;EAC5E;EACI,eAAe;AACX,aAAS,KAAK,gBAAgB,KAAK,gBAAgB,IAAI,GAAG,aAAa,KAAK,WAAW,GACvF,KAAK,cAAc;EAC3B;AACA;AAiBI,IAAM,KAAN,MAAS;EACT,cAAc;AAEV,SAAK,KAAK,QAAQ,QAAO;;IAGzB,KAAK,KAAK,CAAA;;IAGV,KAAK,KAAK;;IAGV,KAAK,KAAK,CAAA;IAEV,KAAK,KAAK;;IAGV,KAAK,KAAK;IAEV,KAAK,KAAK;IAEV,KAAK,KAAK,CAAA;IAEV,KAAK,KAAK,IAAI;MAAG;MAAM;;IAAmB;;;IAI1C,KAAK,KAAK,MAAM;AACZ,YAAMA,KAAI,GAAE;AACZ,MAAAA,MAAK,EAAE,cAAc,iCAAiCA,GAAE,eAAe,GAAG,KAAK,GAAG,GAAE;IAChG;AACQ,UAAM,IAAI,GAAE;AACZ,SAAK,cAAc,OAAO,EAAE,oBAAoB,EAAE,iBAAiB,oBAAoB,KAAK,EAAE;EACtG;EACI,IAAI,iBAAiB;AACjB,WAAO,KAAK;EACpB;;;;;EAIW,iBAAiB,GAAG;AAEvB,SAAK,QAAQ,CAAC;EACtB;EACI,oCAAoC,GAAG;AACnC,SAAK,GAAE;IAEP,KAAK,GAAG,CAAC;EACjB;EACI,oBAAoB,GAAG;AACnB,QAAI,CAAC,KAAK,IAAI;AACV,WAAK,KAAK,MAAI,KAAK,KAAK,KAAK;AAC7B,YAAM,IAAI,GAAE;AACZ,WAAK,cAAc,OAAO,EAAE,uBAAuB,EAAE,oBAAoB,oBAAoB,KAAK,EAAE;IAChH;EACA;EACI,QAAQ,GAAG;AACP,QAAI,KAAK,GAAE,GAAI,KAAK;AAEpB,aAAO,IAAI,QAAS,MAAM;MAAA,CAAE;AAIpB,UAAM,IAAI,IAAI;AACtB,WAAO,KAAK,GAAI,MAAM,KAAK,MAAM,KAAK,KAAK,QAAQ,QAAO,KAAM,EAAC,EAAG,KAAK,EAAE,SAAS,EAAE,MAAM,GAC5F,EAAE,QAAQ,EAAG,KAAM,MAAM,EAAE,OAAO;EAC1C;EACI,iBAAiB,GAAG;AAChB,SAAK,iBAAkB,OAAO,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,GAAE,EAAG;EACjE;;;;;EAIW,MAAM,KAAK;AACd,QAAI,MAAM,KAAK,GAAG,QAAQ;AACtB,UAAI;AACA,cAAM,KAAK,GAAG,CAAC,EAAC,GAAI,KAAK,GAAG,MAAK,GAAI,KAAK,GAAG,MAAK;MAClE,SAAqB,GAAP;AACE,YAAI;;;;;;;;;;;;;;;;;QAkBJ,SAASA,IAAG;AAGR,iBAAO,gCAAgCA,GAAE;QAC7D,EAgBK,CAAC;AAAG,gBAAM;AAEiB,UAAE,cAAc,4CAA4C,CAAC;MAC7F;AACY,WAAK,GAAG,SAAS;;;;;;;;;;MAWjB,KAAK,GAAG,EAAG,MAAM,KAAK,GAAE,CAAE;IACtC;EACA;EACI,GAAG,GAAG;AACF,UAAM,IAAI,KAAK,GAAG,KAAM,OAAO,KAAK,KAAK,MAAI,EAAC,EAAG,MAAO,CAAAA,OAAK;AACzD,WAAK,KAAKA,IAAG,KAAK,KAAK;AACvB,YAAMF;;;;;;QAMN,SAASE,IAAG;AACR,cAAIF,KAAIE,GAAE,WAAW;AACrB,UAAAA,GAAE,UAAUF,KAAIE,GAAE,MAAM,SAASA,GAAE,OAAO,IAAIA,GAAE,QAAQA,GAAE,UAAU,OAAOA,GAAE;AAC7E,iBAAOF;QACvB,EAyBKE,EAAC;;AAIM,YAAM,EAAE,8BAA8BF,EAAC,GAAGE;IACtD,CAAS,EAAG,KAAM,CAAAA,QAAM,KAAK,KAAK,OAAIA,GAAE,EAAG;AACnC,WAAO,KAAK,KAAK,GAAG;EAC5B;EACI,kBAAkB,GAAG,GAAG,GAAG;AACvB,SAAK,GAAE;IAEP,KAAK,GAAG,QAAQ,CAAC,IAAI,OAAO,IAAI;AAChC,UAAM,IAAI,GAAG,kBAAkB,MAAM,GAAG,GAAG,GAAI,CAAAA,OAAK,KAAK,GAAGA,EAAC,CAAC;AAC9D,WAAO,KAAK,GAAG,KAAK,CAAC,GAAG;EAChC;EACI,KAAK;AACD,SAAK,MAAM,EAAC;EACpB;EACI,4BAA4B;EAAA;;;;;EAIrB,MAAM,KAAK;AAKd,QAAI;AACJ,OAAG;AACC,UAAI,KAAK,IAAI,MAAM;IAC/B,SAAiB,MAAM,KAAK;EAC5B;;;;;EAIW,GAAG,GAAG;AACT,eAAW,KAAK,KAAK;AAAI,UAAI,EAAE,YAAY;AAAG,eAAO;AACrD,WAAO;EACf;;;;;;;;EAOW,GAAG,GAAG;AAET,WAAO,KAAK,GAAE,EAAG,KAAM,MAAM;AAEzB,WAAK,GAAG,KAAM,CAACA,IAAG,MAAMA,GAAE,eAAe,EAAE,YAAY;AACvD,iBAAW,KAAK,KAAK;AAAI,YAAI,EAAE,UAAS,GAAI,UAA4B,KAAK,EAAE,YAAY;AAAG;AAC9F,aAAO,KAAK,GAAE;IAC1B,CAAS;EACT;;;;EAGW,GAAG,GAAG;AACT,SAAK,GAAG,KAAK,CAAC;EACtB;;EACiE,GAAG,GAAG;AAE/D,UAAM,IAAI,KAAK,GAAG,QAAQ,CAAC;AAC3B,SAAK,GAAG,OAAO,GAAG,CAAC;EAC3B;AACA;AAEA,IAAM,KAAN,MAAS;;EAEL,YAAY,GAAG,GAAG;AACd,SAAK,aAAa,GAAG,KAAK,eAAe,GAAG,KAAK,cAAc,GAAG,CAAC;EAC3E;;;;;;;EAMW,IAAI,GAAG;AACV,UAAM,IAAI,GAAG,GAAG,KAAK,UAAU,GAAG,IAAI,IAAI,GAAG,KAAK,UAAU;AAC5D,WAAO,KAAK,aAAa,OAAO,CAAE,EAAE,IAAI,CAAE,EAAE,KAAM,CAAAA,OAAK;AACnD,UAAI,CAACA,MAAK,MAAMA,GAAE;AAAQ,eAAO,EAAC;AAClC,YAAM,IAAIA,GAAE,CAAC;AACb,UAAI,EAAE,gBAAe;AAAI,eAAO,IAAI,GAAG,KAAK,YAAY,GAAG,EAAE,KAAK,GAAG,EAAE,SAAS;AAChF,UAAI,EAAE,aAAY;AAAI,eAAO,IAAI,GAAG,KAAK,YAAY,GAAG,EAAE,MAAM,MAAM,EAAE,SAAS;AACjF,YAAM,EAAC;IACnB,CAAS;EACT;EACI,IAAI,GAAG,GAAG,GAAG;AACT,UAAM,IAAI,GAAG,GAAG,KAAK,UAAU,GAAG,IAAI,GAAG,EAAE,WAAW,GAAG,CAAC,GAAG,IAAI,GAAG,KAAK,aAAa,mBAAmB,EAAE,MAAM,GAAG,SAAS,EAAE,WAAW,CAAC;AAC3I,WAAO,KAAK,aAAa,IAAI,EAAE,MAAM,CAAC,GAAG;EACjD;EACI,OAAO,GAAG,GAAG,MAAM,GAAG;AAClB,UAAM,IAAI,GAAG,GAAG,KAAK,UAAU;AAGvB,QAAI;AACZ,WAAO,IAAI,YAAY,QAAQ,IAAIO,mBAAE,CAAC,MAAM,aAAa,KAAK,GAAG,KAAK,aAAa,sBAAsB,EAAE,MAAM,GAAG,GAAG,CAAC,IAAI,GAAG,KAAK,aAAa,sBAAsB,EAAE,MAAM,CAAC,GAChL,KAAK,aAAa,OAAO,EAAE,MAAM,CAAC,GAAG;EAC7C;;;;;;;EAMW,OAAO,GAAG;AACb,UAAM,IAAI,GAAG,GAAG,KAAK,UAAU;AAC/B,WAAO,KAAK,aAAa,OAAO,EAAE,IAAI,GAAG;EACjD;AACA;AAoBI,SAAS,GAAG,GAAG,GAAG,GAAG;AACrB,QAAM,IAAI,GAAG,IAAI,GAAG,GAAG,EAAE,CAAC,GAAG,IAAI,OAAO,OAAO,OAAO,OAAO,CAAA,GAAI,EAAE,GAAG,CAAC;AACvE,GAAC,SAASP,IAAG;AACT,QAAIA,GAAE,cAAc;AAAG,YAAM,IAAI,EAAE,GAAG,iCAAiC;EAC/E,EAAM,CAAC;AACH,QAAM,IAAI,IAAI;AACd,SAAO,IAAI,GAAG,IAAI,MAAI,GAAG,GAAI,CAAAC,OAAK,EAAE,IAAI,GAAG,GAAGA,EAAC,CAAC,GAAI,CAAC,EAAE,IAAG,GAAI,EAAE;AACpE;AASI,CAAC,SAAS,GAAG;AACb,MAAI;AACR,EAAE,GAAGE,kBAAQ,GAAGF,mBAAE,IAAIK,UAAE,kBAAmB,CAAC,GAAG,EAAC,oBAAoB,GAAG,SAAS,EAAC,MAAM;AACnF,QAAM,IAAI,EAAE,YAAY,KAAK,EAAE,aAAY,GAAI,IAAI,IAAI,GAAG,IAAI,EAAE,EAAE,YAAY,eAAe,CAAC,GAAG,IAAI,EAAE,EAAE,YAAY,oBAAoB,CAAC,GAAG,SAASN,IAAGF,IAAG;AACxJ,QAAI,CAAC,OAAO,UAAU,eAAe,MAAME,GAAE,SAAS,CAAE,WAAW,CAAE;AAAG,YAAM,IAAI,EAAE,GAAG,qDAAqD;AAC5I,WAAO,IAAI,EAAEA,GAAE,QAAQ,WAAWF,EAAC;EAC3C,EAgBK,GAAG,CAAC,GAAG,CAAC;AACT,SAAO,KAAK,EAAE,aAAa,CAAC,GAAG;AACnC,GAAI,QAAQ,EAAE,qBAAqB,IAAE,CAAC;AAEtCI,gBAAE,kBAAkB,SAAS,EAAE,GAAGA,gBAAE,kBAAkB,SAAS,SAAkB;",
  "names": ["o", "u", "e", "c", "t", "n", "r", "s", "a", "h", "i", "l", "f"]
}
